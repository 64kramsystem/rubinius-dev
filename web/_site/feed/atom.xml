<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Rubinius Blog</title>
  <link rel="self" type="application/atom+xml" href="http://rubini.us/feed/atom.xml" />
  <link rel="alternate" type="text/html" href="http://rubini.us/blog" />
  <updated></updated>
  <id>http://rubini.us/</id>

  
  <entry>
    <title>Introduction to Fancy</title>
    <id>http://rubini.us/2011/02/23/introduction-to-fancy/</id>
    <link rel="alternate" type="text/html" href="http://rubini.us/2011/02/23/introduction-to-fancy/" />
    <updated>2011-02-23T00:00:00+00:00</updated>
    <author>
      <name>Christopher Bertels</name>
    </author>
    
    <content type="html">&lt;p&gt;Fancy is a new general-purpose programming language targetting the
Rubinius VM.&lt;/p&gt;

&lt;p&gt;This blog post will give a short introduction to the language, what
kind of problems it&amp;rsquo;s trying to solve and why I chose Rubinius as the
VM to run Fancy on.&lt;/p&gt;

&lt;h3 id=&quot;what-is-fancy&quot;&gt;What is Fancy?&lt;/h3&gt;

&lt;p&gt;Fancy is a new general-purpose, dynamic, pure object-oriented
programming language heavily inspired by Ruby, Smalltalk and Erlang
that runs on the Rubinius VM. It&amp;rsquo;s the first fully bootstrapped
language, aside from Ruby, running on Rubinius. This means that the
compiler that generates bytecode for Rubinius is written in Fancy
itself.&lt;/p&gt;

&lt;p&gt;You can think of Fancy as a mix of features from the mentioned
languages above, taking each of their strengths and improving upon
their weaknesses.
Fancy has a very small core and is largely based on the concept of
message passing, just like Smalltalk. It tries to have as many
language concepts being first-class values in the language.&lt;/p&gt;

&lt;p&gt;Just like Ruby, Fancy is a dynamic object-oriented language that
allows changing code at runtime, everything being an expression and
generally embracing more then one way to do things. Fancy also has all
the literal support that Ruby has, plus literal syntax for Tuples and
Patterns (more on that below).&lt;/p&gt;

&lt;p&gt;In contrast to Ruby and just like Smalltalk, Fancy has a very small
amount of built-in keywords and all of the control structures are
implemented in terms of message sends to objects using closures.&lt;/p&gt;

&lt;p&gt;The third language that served as an inspiration is Erlang, from which
Fancy takes the idea that concurrent programming should be easy by
having the Actor Model built into the language. This part is still a
work in progress, but should come together soon. The fact that
Rubinius has a built-in Channel type, inter-VM communication
capabilities and even an actor library makes implementing this easier
than in traditional systems.&lt;/p&gt;

&lt;h3 id=&quot;why-fancy&quot;&gt;Why Fancy?&lt;/h3&gt;

&lt;p&gt;I believe there is real value in having a language that supports
certain things out of the box. Especially when it comes to things like
asynchronous and concurrent programming, having proper semantics built
into the language can often help developers more than a library can.
Very often it&amp;rsquo;s not just about the functionality itself but also about
the semantics you want that functionality to have. This can cause
problems particularly if the language&amp;rsquo;s semantics differ from what
your library is trying to solve. A good example is the callback-based
approach to asynchronous progamming which leads to code that differs
both in semantics as well as how code is structured, compared to
synchronous code. Ideally you&amp;rsquo;d still want to write code in a
synchronous fashion, where exceptions pop up naturally while still
being highly asynchronous.&lt;/p&gt;

&lt;p&gt;In that sense Fancy is more flexible than Ruby as there&amp;rsquo;s not many
special case semantics built in to the core language. Everything&amp;rsquo;s
done via message passing, which fits nicely the actor model approach
to concurrency. Fancy&amp;rsquo;s syntax is a lot simpler, too.&lt;/p&gt;

&lt;p&gt;Since all the core control structures are just implemented in Fancy
itself and adhere to the message passing protocol, you can easily
override them for your personal needs. This is especially interesting
when implementing domain specific languages.
Say, you&amp;rsquo;d want to add some logging to conditional or looping
constructs - it&amp;rsquo;s as easy as overriding a method in your DSL&amp;rsquo;s
classes. Fancy also has class-based mixins, so it makes it easy to
share functionality across class hierarchy boundaries.&lt;/p&gt;

&lt;p&gt;Finally, I created Fancy because I wanted a language implementation
that was well documented, easy to understand and very flexible to
extend. Ruby is a nice language, but it has some inconsistencies and
there&amp;rsquo;s only so much you can do when you&amp;rsquo;re bound by backwards
compatibility. By starting fresh, Fancy has a clean, simple and easy
to extend core which allows further exploration of features and
abstractions.&lt;/p&gt;

&lt;h3 id=&quot;why-target-rubinius&quot;&gt;Why target Rubinius?&lt;/h3&gt;

&lt;p&gt;The initial implementation of Fancy was a simple interpreter written
in C++, similar to how Ruby 1.8 (MRI) works. It was a simple AST
walker. After moving to Rubinius and writing an initial bootstrap
compiler in Ruby, the codebase shrank to about 20% of the original
implementation while actually being more performant. This of course is
mostly due to Rubinius&amp;rsquo; architecture and JIT compiler but it was a
great experience nontheless.&lt;/p&gt;

&lt;p&gt;The nice part about having a common virtual machine and runtime is
that you&amp;rsquo;re not forced to a completely different platform to get the
job done. Fancy and Ruby can coexist in the same application nicely
and calling code from one another is dead simple. In fact, as of now,
Rubinius doesn&amp;rsquo;t know anything about Fancy. And it shouldn&amp;rsquo;t. As long
as all languages running on top of it adhere to the same interface
(in this case the bytecode), it should just work fine.&lt;/p&gt;

&lt;p&gt;Choosing Rubinius as a successor platform for Fancy was easy. It&amp;rsquo;s
built for Ruby, a language that&amp;rsquo;s closely related to Fancy. Rubinius,
while having been developed as a VM for running Ruby code, is very
flexible and there are many features that abstract over Ruby&amp;rsquo;s
external semantics. It was just a natural choice given the fact that
Rubinius&amp;rsquo; architecture and design was heavily influenced by Smalltalk
VMs. Also, it&amp;rsquo;s a very nice dynamic bytecode virtual machine. The
community is very responsive and helpful. Bugs get fixed instantly,
there&amp;rsquo;s always someone to help out and overall it&amp;rsquo;s been a great
experience.&lt;/p&gt;

&lt;h3 id=&quot;lets-look-at-some-code&quot;&gt;Let&amp;rsquo;s look at some code!&lt;/h3&gt;

&lt;p&gt;OK, enough talking. Let&amp;rsquo;s have a look on how to get some Fancy code up
and running. Our little sample application will be a simple IRC bot
that connects to Fancy&amp;rsquo;s irc channel on Freenode and says hello to
everyone that greets it. To make life easier, there&amp;rsquo;s already a Fancy
package out there that helps with exactly this task:
&lt;a href=&quot;https://github.com/bakkdoor/fancy_irc&quot;&gt;FancyIRC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;FancyIRC is a simple IRC client library inspired by Ruby&amp;rsquo;s IRC bot
framework &lt;a href=&quot;https://github.com/cinchrb/cinch&quot;&gt;Cinch&lt;/a&gt;. It&amp;rsquo;s much simpler
and the code is fairly easy to read, but it gives you a similar
interface for writing IRC clients or bots.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s get going by installing Fancy. You can either use the Fancy
Rubygem and install it with Rubinius or get the code from GitHub and
run &lt;code&gt;rake&lt;/code&gt; in the directory. You&amp;rsquo;ll also then have to add the &lt;code&gt;bin&lt;/code&gt;
directory to your &lt;code&gt;$PATH&lt;/code&gt;. If you want the latest and greatest version
of Fancy I recommend building directly from source, as the Gem might
not be up to date all the time. For demonstration purposes, let&amp;rsquo;s
install the Rubygem.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbx -S gem install fancy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get the FancyIRC package we use Fancy&amp;rsquo;s built-in package manager,
which knows how to find the code on GitHub and install it locally:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ fancy install bakkdoor/fancy_irc
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;writing-the-code&quot;&gt;Writing the code&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;fancy&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fancy_irc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_bot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FancyIRC&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;nickname:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;greeter_bot&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;irc.freenode.net&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6667&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;channels:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#fancy&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# greet person back&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;channel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pattern:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^[hH]ello greeter_bot/&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reply:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello to you too, #{msg author}!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# &amp;quot;echo&amp;quot; command&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# invoke with: !echo &amp;lt;text&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;channel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pattern:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^!echo (.*)$/&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reply:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#{msg author} said: #{text}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# tell bot to shutdown via !shutdown command&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;on:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;channel&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pattern:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^!shutdown/&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reply:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;OK, shutting down&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_bot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_bot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I think the code is pretty straight forward. This should give you a
feeling for what Fancy looks and feels like. There is of course lots
more to Fancy than what was shown here. It would not fit into a single
blog post.&lt;/p&gt;

&lt;p&gt;A quick list of what&amp;rsquo;s currently being worked on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New pattern matching system: Message passing based pattern matching
that preserves encapsulation and is very extensible including
pattern literals that allow custom pattern types to be defined by
anyone. There&amp;rsquo;s an experimental branch for that. I&amp;rsquo;m happy
to answer questions.&lt;/li&gt;
  &lt;li&gt;Async support using coroutines (Fibers) - Write async code in a more
natural way where exceptions propagate naturally and you don&amp;rsquo;t have
to think about callbacks all the time.&lt;/li&gt;
  &lt;li&gt;First-class support for actors - Asynchronous message sends, Futures
and multi-vm messaging built-in.&lt;/li&gt;
  &lt;li&gt;And much more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;interested&quot;&gt;Interested?&lt;/h3&gt;

&lt;p&gt;If you got interested in Fancy and want to know where to go next,
here&amp;rsquo;s a short list of things to check out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bakkdoor/fancy&quot;&gt;Fancy&amp;rsquo;s GitHub repository&lt;/a&gt;.
The standard library is completely written in Fancy and most classes
and methods have docstrings. It should be fairly easy to understand.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fancy-lang/infancy&quot;&gt;Programming InFancy&lt;/a&gt;
An open source tutorial on learning Fancy. Work in progress.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.fancy-lang.org&quot;&gt;http://api.fancy-lang.org&lt;/a&gt;
A work in progress page containing Fancy&amp;rsquo;s standard library class
and method documentation.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!forum/fancy-lang&quot;&gt;Fancy&amp;rsquo;s Google Group mailinglist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;IRC Channel: #fancy @ irc.freenode.net&lt;/li&gt;
  &lt;li&gt;Website: &lt;a href=&quot;http://www.fancy-lang.org&quot;&gt;http://www.fancy-lang.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Running Multiple Rubinius Branches Simultaneously with RVM.</title>
    <id>http://rubini.us/2011/02/22/rubinius-multiple-branches-with-rvm/</id>
    <link rel="alternate" type="text/html" href="http://rubini.us/2011/02/22/rubinius-multiple-branches-with-rvm/" />
    <updated>2011-02-22T00:00:00+00:00</updated>
    <author>
      <name>Wayne E. Seguin</name>
    </author>
    
    <content type="html">&lt;p&gt;This article is written with the assumption that you have RVM installed
already. If you do not, follow the
&lt;a href=&quot;http://rvm.beginrescueend.com/rvm/install/&quot;&gt;Installation Instructions&lt;/a&gt;
followed by the
&lt;a href=&quot;http://rvm.beginrescueend.com/rvm/basics/&quot;&gt;Basics&lt;/a&gt;
closely first.&lt;/p&gt;

&lt;h3 id=&quot;named-ruby-installs&quot;&gt;Named Ruby Installs&lt;/h3&gt;

&lt;p&gt;Everyone familiar with RVM knows that it allows you to quickly and
easily install a particular Ruby interpreter by simply running, for
example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install rbx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is not widely known (yet) is that there is a &amp;ldquo;Named Rubies&amp;rdquo; feature
that allows you to install altered versions of the same Ruby
installation along side the original.&lt;/p&gt;

&lt;p&gt;In the case of Rubinius there is this facinating branch called &amp;lsquo;hydra&amp;rsquo;.
So let us see how we can have the Rubinius master branch installed as
the main rbx with the hydra branch installed along side as well.&lt;/p&gt;

&lt;p&gt;As above you first install rbx which is currently defaulted to -head
version so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install rbx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is currently equivalent to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install rbx-head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we have the mainline head Rubinus branch installed, we now want to
use the named rubies feature. This is done using the -n specifier in the
Ruby identifier string. So for example to install our hydra branch as an
RVM ruby with the name &amp;lsquo;hydra&amp;rsquo; in it we do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install --branch hydra rbx-nhydra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can see that they can be used together! Using the Rubinius master
environment,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm rbx ; ruby -v
rubinius 1.2.1 (1.8.7 6feb585f 2011-02-15 JI) [x86_64-apple-darwin10.6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whereas using the Rubinius hydra environment,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm rbx-nhydra ; ruby -v
rubinius 1.3.0dev (1.8.7 6feb585f xxxx-xx-xx JI) [x86_64-apple-darwin10.6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that the next release of Rubinius (hydra branch) is indeed
version 1.3.0 whereas the master branch is version 1.2.1.&lt;/p&gt;

&lt;p&gt;Also please note that RVM creates wrapper scripts, so you do not need to
switch out the entire environment just to run the differen versions
either:&lt;/p&gt;

&lt;p&gt;For Rubinius master,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbx-head -v
rubinius 1.2.1 (1.8.7 6feb585f 2011-02-15 JI) [x86_64-apple-darwin10.6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Rubinius hydra,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbx-head-nhydra -v
rubinius 1.3.0dev (1.8.7 6feb585f xxxx-xx-xx JI) [x86_64-apple-darwin10.6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a lot more available to you than this, for more information on
RVM capabilities please visit the &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;RVM
Website&lt;/a&gt; and also come talk to us in #rvm on
irc.freenode.net during the daytime EDT.&lt;/p&gt;

&lt;p&gt;I hope that this is helpful and informative to you!&lt;/p&gt;

&lt;p&gt;~Wayne&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Rubinius, What's Next?</title>
    <id>http://rubini.us/2011/02/17/rubinius-what-s-next/</id>
    <link rel="alternate" type="text/html" href="http://rubini.us/2011/02/17/rubinius-what-s-next/" />
    <updated>2011-02-17T00:00:00+00:00</updated>
    <author>
      <name>Brian Ford</name>
    </author>
    
    <content type="html">&lt;p&gt;On Tuesday, we released version 1.2.1 (see the &lt;a href=&quot;http://rubini.us/releases/1.2.1/&quot;&gt;Release
notes&lt;/a&gt;). This release weighs in at 256
commits and 21 tickets closed in the 56 calendar days since the release of
1.2.0. Many thanks to those who contributed patches and to everyone who helped
us test it.&lt;/p&gt;

&lt;p&gt;While we were working on 1.2.1, we were also working on a Top Secret project
that we&amp;rsquo;ve craftily &lt;a href=&quot;https://github.com/evanphx/rubinius/tree/hydra&quot;&gt;hidden in plain
sight&lt;/a&gt;. I&amp;rsquo;d like to introduce
the work we are doing on the hydra branch and the features you can expect to
see in Rubinius soon.&lt;/p&gt;

&lt;h3 id=&quot;daedalus---a-new-build-system&quot;&gt;Daedalus - A new build system&lt;/h3&gt;

&lt;p&gt;Rubinius is a fairly complex project. It combines multiple components into a
single system. We have worked hard to contain this complexity and from the
beginning we insisted that building Rubinius be as simple as possible. For
example, Rubinius can be run from the source directory, there is no need to
install it first. Typically, building requires:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure
rake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Rubinius system combines:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;External libraries written in C/C++, sometimes built with just Makefiles
and sometimes using autotools.&lt;/li&gt;
  &lt;li&gt;The virtual machine, garbage collector, and JIT compiler written in C++.&lt;/li&gt;
  &lt;li&gt;The virtual machine interpreter instructions, including support code for
the JIT, and instruction documentation all generated at build time from an
instruction template.&lt;/li&gt;
  &lt;li&gt;The core library and bytecode compiler written in Ruby.&lt;/li&gt;
  &lt;li&gt;Various C extensions like the Melbourne parser, BigDecimal, Digest, and
OpenSSL libraries. In the case of the parser, we have to build &lt;em&gt;two&lt;/em&gt;
versions, one for the bootstrapping system and one for the Rubinius system
being built.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It has not been easy to make this work and over the years we have compiled a
list of exactly what we need in a build system. Evan, in typical form, started
hacking out a first pass and created &lt;em&gt;daedalus&lt;/em&gt;, our new build system. It
features such exotic (and extremely useful) features as SHA-based change
detection, parallel builds, single-process execution, and use-aware
configuration options. Allow me to elaborate.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A typical build system decides to rebuild a file if the source is newer than
the build artifact. This can result is unnecessarily building files that
have been touched by some process (like updating from the source repository)
but whose contents have not changed.  By basing rebuild decisions on the SHA
digest of the source, only files that have actually been changed need to be
built. Since compiling C++ with optimizations is &lt;em&gt;not&lt;/em&gt; a fast process,
eliminating unnecessary building is great for productivity, not to mention
global warming.&lt;/li&gt;
  &lt;li&gt;With a multi-core system, builds can be done faster if they are done in
parallel. If the build system can accurately determine dependencies, it can
execute build sub-steps in parallel. Of course, this can cut into YouTube
and Twitter browsing time, but that&amp;rsquo;s a risk we are willing to take.&lt;/li&gt;
  &lt;li&gt;While parallel sub-processes during the build are excellent, the supervising
process benefits from running as a single process from start to finish.
Otherwise, configuration data needs to be re-parsed. To support a single
build process, we need multiple, independent dependency graphs for the
components. As noted above, we need to build two versions of the parser,
which requires two dependency graphs &lt;em&gt;for the same component&lt;/em&gt;! This is
simply impossible in Rake.&lt;/li&gt;
  &lt;li&gt;Use-aware configuration values know that the user has set the value and can
intelligently merge with newer configuration variables that we create
without requiring the user to reconfigure. Ultimately, we are aiming for a
&lt;em&gt;single&lt;/em&gt; command build. Just run &amp;lsquo;daedalus&amp;rsquo; and done. There is no step 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;full-on-concurrency&quot;&gt;Full-on Concurrency&lt;/h3&gt;

&lt;p&gt;Nobody likes waiting in line. In fact, the more desirable a thing is, the less
we want to stand idly waiting in a line for it, tapping our foot, twiddling
our thumbs. The same could be said about our programs.&lt;/p&gt;

&lt;p&gt;Threads give us the ability to add concurrency to our programs. However,
unless the hardware either has multiple CPUs or multiple cores per CPU (or
both), the apparent concurrency will still be executing serially. Since there
are so many multi-core CPUs around these days, our programs should be getting
stuff done in parallel.&lt;/p&gt;

&lt;p&gt;Unfortunately, there&amp;rsquo;s a twist. Even with native threads on a multi-core CPU,
the amount of parallelism you get depends on how well you manage locks around
shared data and resources. Sometimes managing these locks is complex and you
opt for one big lock, essentially only allowing one thread at a time to run.
That big lock is usually called a global interpreter lock (GIL) or global VM
lock (GVL).&lt;/p&gt;

&lt;p&gt;The Rubinius VM originally had green (user-space) threads, but it has had
native threads with a GIL for a while now. In the hydra branch, Evan and
contributors like Dirkjan Bussink have been working on replacing the GIL with
fine-grained locks so that threads truly execute in parallel. This work has
been going very well, owing in part to the fact that so much code in Rubinius
is actually written in Ruby. Contributors like Chuck Remes have been running
hydra under heavy concurrency loads and Rubinius is performing well.&lt;/p&gt;

&lt;p&gt;Rubinius also has experimental support for Fibers and a built-in Actor
library. There is more work to be done but Rubinius is quickly becoming an
excellent platform for concurrency, with a variety of approaches available to
the programmer. Evan has also suggested rewriting the Rubinius IO subsystem to
enable even better APIs for concurrency, all from Ruby.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Forget everything anyone has ever told you about Ruby being slow. There are
two things that make Ruby, as implemented, slow: 1) inexperience; 2)
inadequate tools. These two result in one big thing: &lt;em&gt;doing too much&lt;/em&gt;. Or, as
they say: &lt;em&gt;No code runs faster than no code&lt;/em&gt;. We have been working for 4+
years to build adequate tools in Rubinius, and there is plenty of experience
in Smalltalk, Self, and other languages for making dynamic languages fast.&lt;/p&gt;

&lt;p&gt;Presently, Rubinius typically runs pure Ruby code almost 2 times faster than
MRI 1.9. However, there are also cases where Rubinius is slower. These mostly
involve core libraries that are implemented in C in MRI. There are three main
fronts on which we are attacking performance issues: 1) improving the
algorithms in the Ruby code that implements the core library; 2) continuing to
tune the VM and garbage collector; and 3) improving the JIT compiler. Which
leads me to one of the most exciting things we are working on&amp;hellip;&lt;/p&gt;

&lt;h3 id=&quot;jit-intermediate-representation-ir&quot;&gt;JIT Intermediate Representation (IR)&lt;/h3&gt;

&lt;p&gt;The just-in-time (JIT) compiler is the key to making Ruby fast. One of the
biggest challenges with a dynamic language like Ruby is knowing what method is
actually being invoked when a message is sent to an object. Consider the
following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What method is being invoked by &lt;code&gt;obj.m(y)&lt;/code&gt;? There is no way to definitively
know this by looking at the source code. However, when the program is actually
running, we can know precisely what &lt;code&gt;obj&lt;/code&gt; is and precisely which method &lt;code&gt;m&lt;/code&gt;
was invoked. This is called type profiling and that is exactly what the Rubinius
VM does. Then the JIT uses the type information to make decisions like whether
to inline a method into another method. When methods are inlined, it gives the
optimizer more data and more possibilities to remove redundant code. The less
code we can run, the faster Ruby will be.&lt;/p&gt;

&lt;p&gt;Presently, the JIT compiler converts Rubinius bytecode into LLVM IR and LLVM
handles the thorny task of generating machine code. However, Rubinius bytecode
is designed for fast execution by the virtual machine rather than as a rich
intermediate representation. So Evan has started work on a new JIT IR.&lt;/p&gt;

&lt;p&gt;This new IR will help us to express Ruby semantics in a way that enables many
powerful optimizations and will ultimately allow LLVM to generate even better
machine code. Put another way, &lt;em&gt;Rubinius loves Ruby code!&lt;/em&gt; Right down to the
metal. There&amp;rsquo;s no fighting a foreign type system or the semantics of a
language at odds with Ruby&amp;rsquo;s rosy view of the world.&lt;/p&gt;

&lt;h3 id=&quot;ruby-19&quot;&gt;Ruby 1.9&lt;/h3&gt;

&lt;p&gt;MRI 1.9 introduced two completely different changes to Ruby. The first was a
new implementation based on a bytecode virtual machine. While the virtual
machine replaced the AST-walking interpreter, little else changed
architecturally. Mostly the same core library and garbage collector code
exists in MRI 1.9 as was in MRI 1.8. The second change introduced some new
syntax (minor) and encodings (major). Many of the other changes, for example,
returning Enumerator objects from methods that take blocks, have been
back-ported to Ruby 1.8.7 and are already available in Rubinius.&lt;/p&gt;

&lt;p&gt;So, the key to supporting Ruby 1.9 in Rubinius essentially involves supporting
the 1.9 syntax changes and encodings. We have begun implementing the parser
changes and introduced the foundation for Encoding-aware Strings. A good
amount of work remains to be done, but over the next month we expect that
we will be starting to run Ruby 1.9-specific code in Rubinius.&lt;/p&gt;

&lt;h3 id=&quot;tools-of-information&quot;&gt;Tools of Information&lt;/h3&gt;

&lt;p&gt;It has been said that &lt;code&gt;printf&lt;/code&gt; is the mother of all debuggers. That
illustrates two points: 1) data is often buried in our program code; and 2) we
should have tools (e.g. a debugger) that enables us to access the data without
manually instrumenting our code.&lt;/p&gt;

&lt;p&gt;Presently, Rubinius has a built-in debugger, precise method profiler, memory
analysis tool, and Agent interface that permits querying a running Rubinius
VM&amp;ndash;even one running on a remote machine&amp;ndash;for a variety of information.&lt;/p&gt;

&lt;p&gt;We will be adding the ability to track the location where objects are
allocated to assist finding object leaks or code that is creating unusually
large numbers of objects. We are also working on a tool to graphically display
information like number of running threads, amount of CPU usage, and amount of
memory used while actively monitoring a VM.&lt;/p&gt;

&lt;p&gt;I am also curious about correlating this VM information with external data to
enable play-back review.  For example, I would like to monitor RubySpec runs
and correlate which spec is running with the VM data. I imagine a simple
monotonic reference ID provided by the VM would be useful in correlating these
two otherwise unrelated pieces of data. The RubySpec runner would request the
ID before running each spec and the Agent monitor would request the ID when
gathering VM data. Later the two data sets could easily be merged.&lt;/p&gt;

&lt;p&gt;When you find yourself manually instrumenting some code, consider what data
you are trying to get your hands on and let us know the scenario.  We&amp;rsquo;ll
likely be able to build a tool that will open up new vistas into the behavior
of your Ruby programs.&lt;/p&gt;

&lt;h3 id=&quot;windowssupregsup&quot;&gt;Windows&lt;sup&gt;&amp;reg;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;However one may feel about Windows as an operating system, it is undeniable
that the vast majority of people in the world use Windows. We believe those
people have an inalienable right to use Rubinius, too.&lt;/p&gt;

&lt;p&gt;Thanks to the wonderful, hard-working
&lt;a href=&quot;http://mingw-w64.sourceforge.net/&quot;&gt;MinGW-w64&lt;/a&gt; folks, we are able to compile
the Rubinius VM into a native Windows executable. Presently, the VM will
compile, link, and attempt to load the Ruby core library. More
platform-specific work is needed to load the library. The next step after that
will be getting the RubySpecs to run and start fixing issues.&lt;/p&gt;

&lt;p&gt;Since the Windows work is being done on the hydra branch, the other features
discussed above will be available on Windows as soon as we complete them.&lt;/p&gt;

&lt;h3 id=&quot;multi-language-ualization&quot;&gt;Multi-language-ualization&lt;/h3&gt;

&lt;p&gt;The Rubinius VM began as an effort to create a modern, first-class environment
for running programs written in Ruby. However, it turns out that Ruby is a
terrific language for writing subsystems for other programming languages.
Actually, this should come as no surprise; Ruby is a fabulous general purpose
programming language.&lt;/p&gt;

&lt;p&gt;To support experimenting with writing other languages that run on the Rubinius
VM, Evan has started to put together a Language Toolkit. This includes things
like a built-in PEG parser, convenient ways to create methods from Rubinius
bytecode, and decoupling method dispatch from Ruby semantics.&lt;/p&gt;

&lt;p&gt;Hopefully, Evan will introduce us to all this in a future blog post, but
here is a taste of what you can do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;dynamic_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:self&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_literal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, world&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, that is much more concisely written in Ruby, but combine this
ability with a built-in PEG parser and you can be experimenting with your own
fascinating syntax in a matter of minutes.&lt;/p&gt;

&lt;p&gt;Check out the Rubinius &lt;a href=&quot;http://rubini.us/projects/&quot;&gt;Projects page&lt;/a&gt; for some of
these language experiments. One language in particular is
&lt;a href=&quot;https://github.com/bakkdoor/fancy&quot;&gt;Fancy&lt;/a&gt;, which is fully bootstrapped (i.e.
the Fancy compiler is now written in Fancy) on Rubinius.&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;One the one hand, Rubinius just runs Ruby code, and you shouldn&amp;rsquo;t need any
special knowledge to run your application on Rubinius. On the other hand, as
I&amp;rsquo;ve discussed above, there are some specific Rubinius features that may be
very helpful to you. However, they can only be as helpful as the documentation
we have for them.&lt;/p&gt;

&lt;p&gt;Before we released 1.2.0 in December last year, I spent quite a bit of time
getting a new documentation system in place. Since then, we&amp;rsquo;ve had
contributors help with translations to Russian, Polish, Spanish, and German.
Adam Gardiner started documenting the garbage collector algorithms. Yehuda
Katz (you may have heard the name) has contributed documentation for &lt;a href=&quot;http://rubini.us/doc/en/bytecode-compiler/&quot;&gt;the
bytecode compiler&lt;/a&gt; complete with
diagrams!. Chuck Remes wrote up a great piece on the &lt;a href=&quot;http://rubini.us/doc/en/tools/memory-analysis/&quot;&gt;memory
analysis&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;We really appreciate these contributions. We understand the need for great
documentation and we have been creating better support for it. In many cases,
all that is needed is to just open a file and start writing. Of course, one
cannot expect to understand much about Rubinius without digging into the code.
If there is a particular part of Rubinius that you are curious about, jump in
the #rubinius channel on freenode.net and ask us questions. We can point you
in the right direction and help clarify things. If nothing else, let us know
which part of the missing documentation is most important to you and we can
start filling that in.&lt;/p&gt;

&lt;h3 id=&quot;how-you-can-help&quot;&gt;How you can help&lt;/h3&gt;

&lt;p&gt;There you have it, some super exciting things coming very soon for Rubinius
and for Ruby! We would love to have your help making Rubinius even better. The
most important thing you can do is try running your Ruby code. Give us
feedback. Let us know what features or tools would make your life easier. Help
us to build them.&lt;/p&gt;

&lt;p&gt;Rubinius adopts Ruby&amp;rsquo;s rosy view of the world. We want to empower you to solve
your hardest problems with Ruby, and have fun doing it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Rubinius Has a Blog!</title>
    <id>http://rubini.us/2010/12/15/rubinius-has-a-blog/</id>
    <link rel="alternate" type="text/html" href="http://rubini.us/2010/12/15/rubinius-has-a-blog/" />
    <updated>2010-12-15T00:00:00+00:00</updated>
    <author>
      <name>Brian Ford</name>
    </author>
    
    <content type="html">&lt;p&gt;Many thought the day would never come, but Rubinius finally has a blog. That&amp;rsquo;s
not all, though: We have integrated the website, blog, and documentation using
Jekyll. The source code for it all is in the main &lt;a href=&quot;http://github.com/evanphx/rubinius&quot;&gt;Rubinius
repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;People have often requested that we write more about the &lt;em&gt;awesome&lt;/em&gt; features in
Rubinius. We hear you and we&amp;rsquo;d love to do this. However, there is always a
trade-off between working on those awesome features and writing about them.
Until now, it&amp;rsquo;s been rather painful to write docs or blog posts because we did
not have good infrastructure in place. Now, I think we do. I&amp;rsquo;m sure there are
still a lot of improvements we can make, but we have a good place to start.
I&amp;rsquo;d like to give a brief tour of our new system.&lt;/p&gt;

&lt;p&gt;The primary goal was to improve collaboration and reduce friction for writing
new documentation and blog posts. That&amp;rsquo;s right, improve collaboration. There
are many people who have experience developing Rubinius and running their
applications on it. We love how people have collaborated with source code
commits. Now anyone has the ability to write a blog post as well. I&amp;rsquo;ve written
a basic &lt;a href=&quot;/doc/en/how-to/write-a-blog-post/&quot;&gt;How-To - Write a Blog Post&lt;/a&gt;
document. If you have an idea for a blog post, just let us know. We will
exercise a bit of editorial control just to ensure the topics are appropriate
for Rubinius, but generally, we are thrilled to have your contributions.&lt;/p&gt;

&lt;p&gt;Recently, we added the &lt;code&gt;rbx docs&lt;/code&gt; command. This will run a web server on your
machine and open a browser window to display the Rubinius documentation. Now
the documentation will also be available at the &lt;a href=&quot;http://rubini.us&quot;&gt;rubini.us&lt;/a&gt;
website. I have added a basic outline and a bunch of files to further simplify
the task of writing docs. In many cases, merely open a file and start writing
docs in &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt; format.&lt;/p&gt;

&lt;p&gt;We have also begun translating our documentation to other languages. I am
excited about this, being a huge language geek. I wish that I were proficient
in 10 languages so I could polish our documentation for the many people who
are not native English speakers. Alas, I only have a fair ability to write in
Spanish, so we are again depending on your help. I started the translation
effort by passing the existing English docs through Google translate. We have
a beginning guide for &lt;a href=&quot;/doc/en/how-to/translate-documentation&quot;&gt;How-To - Translate
Documentation&lt;/a&gt;. I&amp;rsquo;ve been told by
&lt;em&gt;kronos_vano&lt;/em&gt; in our #rubinius IRC channel that he&amp;rsquo;s already working on a
Russian translation. I personally would love to see Japanese and Chinese
translations.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s a brief introduction to our new infrastructure for documenting and
explaining Rubinius. It&amp;rsquo;s been such a joy to see so many people contribute to
the Rubinius source code over the years. We hope that the blog, documentation,
and translations will further empower people to contribute and benefit from
the value that Rubinius has to offer the Ruby community.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;¡Adelante!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  

</feed>
