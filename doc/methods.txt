= Method Contract

Methods contain a contract that method implements and the caller
must adhere to. Herein are pieces of the method contract.

A. The method must be called with the correct number of arguments.
   1. If a method provides a fixed number of arguments, the
      caller must provide exactly that number of arguments.
   2. If a method is varadic (contains a splat), then the caller
      must provide at least the number of non-varadic arguments.
   3. If a method contains defaults for arguments, the default values
      will be assigned to the local variable if there is no assignment
      by the caller.
   4. If a method is called with the incorrect number of arguments,
      it raises an ArgumentError to indicate the error to the caller.
B. If the method captures the block as a local variable, it must be
   assigned before the body of the method begins.
C. As hinted to in A2, a method may provide default values for arguments.
	 The default values are evaluated in the context of the method, not the
   caller.

= Future Contracts

A. The method provides names for each argument.
   1. The caller may provide values for those arguments by name.
   2. Any arguments provided by name must be provide after all 
      arguments provided by position only.
   3. There must not be a positional value and keyword value 
      for an argument. If there is 2 values for a single argument,
      a ArgumentError exception is thrown.
   4. If the method specifies a varadic (splat) argument, unused
      keywords will be stored in the splat (see E for details).
B. Where D is true, the splat is not a simple Array, but rather a
   MethodArguments (MA) object. MA has a to_ary method
   that will return the normal splat. MA also provides methods
   for accessing unused keywords.
