 Contributing To Rubinius
==========================

Yep, it is a VM. Yep, terms like "compiler," "polymorphic cache" and
"pneumatic stegosaurus" get thrown around from time to time and it
may seem like a very complex undertaking.

But it is also Ruby, and there are many areas--like the Core and Standard
libraries--that are _completely_ stegosaur-proof.

Mainly it is just a fun project and everyone is likely to find something
interesting to do. You do not have to be a compiler wiz to work on it but
you might end up one. If you ARE a compiler wiz, maybe you do not want to
ever write library code again. Perhaps you want to understand Ruby itself 
better. Heck, maybe you think the website is iffy and want to make it shiny!

So hop in!

And when you find that something interesting, send in the documentation
patch, the spec, the missing or fixed Socket method or the quantum
anti-saurian device. You can commit code only occasionally if you are
short on time or go hog-wild; you can concentrate on a narrow area
or dabble in everything.

Anything that you contribute is greatly appreciated! You are warmly
invited to just hang out and write some code. Starting with the commit
policy, more on which below, there is no "core team" or in-crowd it
all works out pretty nicely.

If you are interested and just not quite sure where you might find
a good place to start, there are two pretty good options:

* Take a Ruby application or library of your own (or just one that
  you frequently use whether Stdlib or a gem) and try to run it. At
  this point it is probably still more likely than not that you will
  find some feature that is not completely supported. This opens
  the path of writing specs for the missing or broken feature so
  that it is documented and specified--and then you can try to fix
  it. Sometimes it turns out the issue runs a bit too deep to solve
  as a first stab but that is OK. At that point you will have an
  idea of how things fit together, you have probably found some
  areas of interest, collected some questions and so on.

* Run the specs and see which ones still fail or are completely
  missing. This gives an excellent starting point particularly
  if you are looking for something fairly short to start with.

For more information and all kinds of documentation, the [Rubinius
Lighthouse page](http://rubinius.lighthouseapp.com/projects/5089-rubinius/overview)
is the place to go. On the right, docs and on the left, tickets
(bug reports, todo items, feature requests and so on.)


 Commit Policy
===============

Writing code and participating should be fun, not an exercise in
perseverence. Stringent commit polices, for whatever their other
qualities may bring, also mean longer turnaround times.

For these and host of other reasons, anyone who submits a patch for
some part of the Rubinius project and has the patch accepted will be
given commit rights to the mainline repository. The Wiki, linked
above, has more information about the easiest way to go about that
first patch.


 Mailing List and IRC
======================

* irc://irc.freenode.net/#rubinius
* http://groups.google.com/group/rubinius-dev

IRC is the primary way that Rubinius developers communicate with each
other. Yes, we know it is the 21st century now--but give it a try. It
is even at this late date the best means of communication for a large
distributed project. IRC clients are available for any imaginable OS.
If it can access the Internet, it has an IRC client. More on IRC, a
list of clients and a nick list can be found [here](http://rubinius.lighthouseapp.com/projects/5089/irc-info-and-who-s-who).
[IRC logs](http://donttreadonme.co.uk/rubinius-irc) are also available.  

If you cannot (or prefer not to) use IRC, feel free to ask questions
or submit patches via the mailing list as well. The mailing list IS
relatively quiet currently because of the heavy emphasis on IRC but
rest assured, you will get an answer on the ML as well.

If you are just starting with Rubinius feel free to ask for help! We
try to make sure that there is documentation available and someone
will always be able to answer questions--all we ask in return is
that you bring an inquisitive mind and are willing to do proactively
poke around the code or research otherwise also.


 Bug Reports, Build Problems etc.
==================================

The ticketing interface is hosted on Lighthouse and there are some
guidelines there to help get the most out of it. Ideally you can
also drop by IRC or e-mail the mailing list but this is by no
means required.

When reporting a problem, please describe your system in detail,
including operating system version, CPU architecture, and the exact
error output.


 Continuous Integration
------------------------
In order to keep pace with the constant development, Rubinius uses a
continuous integration process. After every change you make to the
codebase, run `bin/mspec ci` to verify that no existing code is
adversely affected by it (i.e. broken or "regressed.")

[This page](http://rubinius.lighthouseapp.com/projects/5089/specs-continuous-integration)
has more information about the CI process.


 Getting The Code
==================

The Rubinius project uses [git](http://git.or.cz/) for version control
(<em>ed. note: in fact, we like to take credit for starting the move
towards git in the larger Ruby community! Granted, that Linus fellow and
his video broadcast might have helped a bit. --rue</em>.) [This
page](http://rubinius.lighthouseapp.com/projects/5089/using-git)
describes how to install and use git as well as the typical workflow for
Rubinius specifically.


 Writing Specs
===============

Specs are always most welcome: you can write one here and there or
spec an entire library at once, or you can augment and fix existing
ones. They can be a nice bite-sized introduction to Rubinius
development.

The Rubinius project uses [BDD](http://en.wikipedia.org/wiki/Behavior_driven_development)-style
executable specifications to specify and verify the implementation.
[RSpec](http://rspec.rubyforge.org/) is of course the originator of
the entire BDD concept and the most widely used spec library at this
time but its codebase uses the most advanced of Ruby features which
make it a poor fit for _developing_ a Ruby implementation. The main
ideas of RSpec are easy to implement using much simpler code, though,
so a small syntactically compatible application called MSpec was
written for that purpose.

Rubinius is intended to be a fully compliant implementation of version
1.8.x of the Ruby language as implemented by the standard ruby interpreter
usually referred to as MatzRuby or MRI to distinguish the implementation
(the executable program) from what can be considered the language itself.

For this purpose, the Rubinius spec suite covers as of this writing
just shy of 22,500 expectations (roughly equivalent to assertions)
in all areas from Ruby language features and its library classes to
components of the VM and supporting modules. It is the largest set
of language specifications for Ruby and is currently being used by
JRuby, IronRuby and other alternative Ruby implementations as well.

It is also, surprisingly, a very _undaunting_ task. Writing specs is
one of the simplest and most convenient ways of participating in the
project--all the while helping the larger Ruby ecosystem by making
sure it has a clear specification for the first time!

Full documentation for anything and everything to do with the specs is
be found in the Rubinius wiki. A good place to start is the [organization
overview](http://rubinius.lighthouseapp.com/projects/5089/specs-organization),

The specs are formed using an extremely simple DSL in plain Ruby code,
in the form of specifications (or expectations) of what should happen
when a certain piece of code is run. See the Wiki for more detailed
information but here is a small (incomplete) example:

    describe "Array#push given one argument" do
      it "appends the argument to the array" do
        a = [ "a", "b", "c" ]
        a.push("d")
        a.should == ["a", "b", "c", "d"]
      end

      it "returns self" do
        a = [ "a", "b", "c" ]
        a.push("d").equal?(a).should == true
      end
    end

As you can see, first a written specification is given, then the
code to reproduce the situation is run and lastly the expectation
is verified. If our Array#push implementation was broken, this
would cause a spec failure to be reported.

