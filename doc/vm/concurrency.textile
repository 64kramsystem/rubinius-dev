h2. Concurrency

Rubinius provides a number of concurrency techniques, significantly expanding upon that available in standard Ruby. As such, use of these additional primitives is non-standard.

h3. Tasks

Tasks are the foundation of green threads in Rubinius. See "here":http://blog.fallingsnow.net/2007/04/05/task-class-in-svn/ for an overview of Rubinius tasks.

h3. Threads

h3. Actors

The _Actor_ class provides an implementation of the Actor concurrency pattern, whereby each method in an actor object is run on a separate thread from that of the caller, using a thread that is owned by the Actor object.

h3. Channels

Channels provide a simple mechanism for co-ordinating the work of two or more threads. A channel resembles a queue, in that producer thread(s) can write to the channel, while consumer thread(s) read from it. If there is no data currently in the channel, consumer threads will suspend until data is available.
