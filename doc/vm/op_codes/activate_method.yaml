---
mnemonic: activate_method
operation: >-
  Activates a cached method on an object in preparation for execution.
format: activate_method argc
opcode: 53
stack_before:
  - receiver
  - method
  - size
  - locals
  - block
  - arg1
  - arg2
  - ...
  - argn
  - ...
stack_after:
  - retval
  - ...
description: >-
  Pops the top five items off the stack, using these to identify the object on
  which to invoke the method (_recv_), the @CompiledMethod@ instance to execute
  (_method_, i.e. @self@), the number of argments the method defines (_size_),
  the _locals_ currently in scope, and any _block_ passed to the method.
  
  Additionally, the actual arguments to be passed to the method must also be on
  the stack as an array, with the number of actual arguments passed (_argc_)
  specified alongside the opcode; these arguments will be consumed from the
  stack and pushed into locals when the method starts executing.

  When the method returns, the return value will be on top of the stack.
notes: Used by CompiledMethod#activate.
source: |-
    next_int;
    t1 = stack_pop(); /* recv */
    t2 = stack_pop(); /* self */ 
    t4 = stack_pop(); /* mod */
    j = FIXNUM_TO_INT(stack_pop()); /* sz */
    t3 = stack_pop(); /* locals */
    cpu_activate_method(state, c, t1, t2, t4, j, cmethod_get_name(t2), stack_pop());
    if(RTEST(t3)) {
      if(NIL_P(cpu_current_locals(state, c)) || NUM_FIELDS(t3) >= NUM_FIELDS(cpu_current_locals(state, c))) {
        // methctx_set_locals(c->active_context, t3);
        cpu_set_locals(state, c, t3);
      }
    }
    
