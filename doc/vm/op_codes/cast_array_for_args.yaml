---
mnemonic: cast_array_for_args
operation: >-
  Casts the value on the top of the stack into an array to be used as method
  args
format: cast_array_for_args size
opcode: 62
stack_before:
  - value
  - ...
stack_after:
  - array
  - ...
description: >-
  Removes the object on the top of the stack, and:
  
  If the object is a tuple, it is cast to an array.
  
  If the object is already an array, it is left unmodified.
  
  If the object is any other type, it is wrapped in a 1-element array with the
  object as the value of the single element.
  
  The resulting array is then pushed back onto the stack, and the size of the
  array is added to the argument _size_ that was specified with the opcode.
see:
  - cast_array
notes: >-
  This opcode exists to handle argscat and argspush, where a splat arg is
  specified in addition to one or more discrete arguments.
source: |-
    next_int;
    c->args = _int;
    t1 = stack_pop();
    if(REFERENCE_P(t1) && object_kind_of_p(state, t1, state->global->tuple)) {
      t1 = array_from_tuple(state, t1);
    } else if(!REFERENCE_P(t1) || !object_kind_of_p(state, t1, state->global->array)) {
      t2 = array_new(state, 1);
      array_set(state, t2, 0, t1);
      t1 = t2;
    }
    stack_push(t1);
    c->args += FIXNUM_TO_INT(array_get_total(t1));
