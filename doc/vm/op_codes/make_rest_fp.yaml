---
mnemonic: make_rest_fp
operation: >-
  Converts multiple individual arguments into an array for a rest argument
format: make_rest_fp argc
opcode: 96
stack_before:
  - ...
stack_after:
  - 
    - rest1
    - rest2
    - ...
    - restn
  - ...
description: >-
  Copies multiple individual arguments to a method from the caller's stack into
  an array to be used as a rest argument. Used when the method to be called has a
  rest argument (i.e. the last defined method parameter is a splat).
  
  The number of arguments to place into the rest arg is determined by how many
  actual args have been passed to the method, less the number of arguments
  _argc_ defined by the method. If this is less than or equal to 0, an empty
  array is pushed onto the stack. If the number is greater than 0, arguments
  are copied from before the frame pointer into the array, so that the first
  rest arg is at the start of the array, and the last rest arg is at the end.
example: |-
    def foo(a,b,*c)
      ...
    end
    
    foo(1,2,3,4,5)
    
    # In foo, c = [3,4,5]
    # On the top of the stack after this opcode is [3,4,5]
source: |-
    next_int;
    j = cpu_current_argcount(c) - _int;
    if(j < 0) j = 0;
    t1 = array_new(state, j);
    for(k = _int, m = 0; k < cpu_current_argcount(c); k++, m++) {
      array_set(state, t1, m, *(c->fp_ptr - k));
    }
    stack_push(t1);
