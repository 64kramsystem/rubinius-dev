---
mnemonic: make_rest
operation: >-
  Converts multiple individual caller arguments into an array for a rest
  argument
format: make_rest argc
opcode: 36
stack_before:
  - rest1
  - rest2
  - ...
  - restn
  - ...
stack_after:
  - "[rest1, rest2, ..., restN]"
  - ...
description: >-
  Pops 0 or more rest arguments from the top of the stack into an array to be
  used as a rest argument to a method whose last (non-block) parameter is a
  splat.
  
  The number of arguments to place into the rest array is determined by how many
  actual args have been passed to the method, less the number of arguments
  _argc_ defined by the method. If this is less than or equal to 0, an empty
  array is pushed onto the stack. If the number is greater than 0, arguments are
  popped from the stack so that the first rest arg is at the start of the
  array, and the last rest arg is at the end.
notes: >-
  This opcode is performed after the non-splat arguments have been dealt with,
  so that the top of the stack contains the first rest argument (remembering
  that arguments are pushed onto the stack in right to left order).
example: >-
  def foo(a,b,*c)
  
    ...
  
  end
  
  
  foo(1,2,3,4,5)
  
  
  # In foo, c = [3,4,5]
  
  # On the top of the stack after this opcode is [3,4,5]
source: |-
    next_int;
    j = cpu_current_argcount(c) - _int;
    if(j < 0) j = 0;
    t1 = array_new(state, j);
    for(k = 0; k < j; k++) {
      array_set(state, t1, k, stack_pop());
    }
    stack_push(t1);
