---
mnemonic: set_local_from_fp
operation: >-
  Sets a method argument local from the caller's stack (deprecated)
format: set_local_from_fp locl arg
opcode: 95
stack_before:
  - ...
stack_after:
  - ...
description: >-
  Copies the value of method argument _arg_ into the local variable _locl_.
  Method arguments are accessed from the caller's stack via negative offsets
  from the frame pointer, where 0 is the first argument, 1 is the second, etc.
  
  This opcode is now deprecated, and is not currently used under compiler2.
see:
  - from_fp
notes: >-
  Under compiler1, this opcode was used to copy method args into stack locals
  if the method arg was modified, but not captured. The use of stack and frame
  locals has been deprecated under compiler2, and all locals are now allocated
  in the execution context locals tuple. This opcode has thus been modified to
  store a frame referenced method arg in the locals tuple, but is not currently
  used in any bytecode generated by compiler2.
  
  If the method argument is captured, it must be allocated in the locals tuple.
source: |-
    next_int;
    k = _int;
    next_int;
    
    t1 = c->stack_top[c->fp - _int];
    
    t2 = cpu_current_locals(state, c);
    if(t2->gc_zone == 0) {
      sassert(k < NUM_FIELDS(t2) && "locals tuple sized wrong");
      fast_unsafe_set(t2, k, t1);
    } else {
      tuple_put(state, t2, k, t1);
    }
