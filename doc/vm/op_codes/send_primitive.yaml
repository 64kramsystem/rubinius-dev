---
mnemonic: send_primitive
operation: >-

format: send_primitive <arg1><arg1> <arg2>
opcode: 9
stack_before:
  - <consumed>
  - ...
stack_after:
  - <produced>
  - ...
description: >-

source: |-
    next_int;
    j = _int; // primitive index
    next_int;
    k = _int; // num_args

    // Should the OBJECT parameter be removed since a primitive is not necesarily
    // performed on an object? Or should we state that the semantics of a primitive 
    // will always have an object or else it needs to be an opcode... ?
    // If the primitive fails raise an exception
    if( ! cpu_perform_primitive(state, c, j, Qnil, k, Qnil, Qnil) )
    {
      cpu_raise_primitive_failure(state, c, j);
    }
