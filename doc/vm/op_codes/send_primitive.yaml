---
mnemonic: send_primitive
operation: >-
  Calls a primitive method
format: send_primitive primidx argc
opcode: 9
stack_before:
  - recv
  - arg1
  - arg2
  - ...
  - argn
  - ...
stack_after:
  - ...
description: >-
  Execute a primitive method on the receiver (_recv_). The index of the
  primitive to  execute (_primidx_), and the number of arguments being passed
  (_argc_) are  specified as paramters.
notes: >-
  The implementation of the primitive is responsible for consuming the
  receiver and any arguments that are on the stack.

  A primitive may also produce new items to be added to the stack.
source: |-
    next_int;
    j = _int; // primitive index
    next_int;
    k = _int; // num_args

    // Should the OBJECT parameter be removed since a primitive is not necesarily
    // performed on an object? Or should we state that the semantics of a primitive 
    // will always have an object or else it needs to be an opcode... ?
    // If the primitive fails raise an exception
    if( ! cpu_perform_primitive(state, c, j, Qnil, k, Qnil, Qnil) )
    {
      cpu_raise_primitive_failure(state, c, j);
    }
