---
mnemonic: yield_debugger
operation: >-
  Pauses execution and yields to the debugger
format: yield_debugger
opcode: 93
stack_before:
  - ...
stack_after:
  - ...
description: >-
  Pauses virtual machine execution at the yield_debugger instruction, and
  yields control to the debugger on the debug channel. If no debugger is
  registered, an error is raised.
notes: >-
  The yield_debugger instruction is VM plumbing that exists to support "full-
  speed" debugging. As such, it is not output by the compiler, but rather is
  used by the debugger to replace an existing instruction at a breakpoint. Prior
  to encountering a yield_debugger instruction, the VM will execute normally,
  i.e. at full speed, and not be slowed significantly by the fact that a
  debugger is attached.
  
  When the debugger is yielded to by this instruction, it can examine the
  execution context, stack, etc, or replace the yield_debugger instruction with
  the original instruction at that point, and then step through the code.
source: |-
    cpu_flush_sp(c);
    cpu_flush_ip(c);
    methctx_reference(state, c->active_context);
    if(c->debug_channel != Qnil) {
      cpu_channel_send(state, c, c->debug_channel, c->active_context);
      /* This is so when this task is reactivated, the sent value wont be placed
         on the stack, keeping the stack clean. */
      TASK_SET_FLAG(c, TASK_NO_STACK);
      cpu_channel_receive(state, c, c->control_channel, c->current_thread);
    } else {
      cpu_raise_arg_error_generic(state, c, "Attempted to switch to debugger, no debugger installed");
    }
