== Rubinius Compiled (.rbc) Files

With Rubinius, Ruby source files (.rb files) are compiled into platform
independent .rbc files, which contain the byte codes needed to execute the
source Ruby code on the Rubinius virtual machine (see shotgun[shotgun.html]
for a description of the Rubinius VM).

Since Rubinius is available on many platforms, and .rbc files are platform
independent, an .rbc file compiled on one platform will execute under Rubinius
on another platform without modification.

=== Data Types

The only special data type that's used in .rbc files are variable length
integers. In this encoding, the number of bytes that are used to store
an integer vary with its value -- smaller numbers are encoded in fewer
bytes than large numbers. Each byte in a variable length integer is split
in two parts: the MSB is zero if this byte is the last one and one if there's
more bytes to be read. The seven lower bits contain the integers payload.
The least significant byte is written first. Variable length integers are
unsigned. Decode them like this:

  value = 0 # this will hold the decoded integer
  shift = 0

  loop do
    byte = read_next_byte

    value += (byte & ~128) << shift
    break if byte < 128

    shift += 7
  end

=== File Layout

An .rbc file consists of:
* a 5-byte header containing the magic constant '!RBIX'
* a newline-delimited string representation of the version number of the .rbc file
* a variable number of number of marshaled objects

Objects are marshaled using a scheme whereby each object type is identified by
a single-byte tag, followed by 0 or more bytes containing the object data. The
following table specifies the values and formats for each tag:

[Positive integer (I)]
  * the integer's value stored as a variable length integer.
[Negative integer (J)]
  * the negated integer's value stored as a variable length integer.
[String (s)]
  * the string's size in bytes stored as a variable length integer.
  * the characters (single bytes) that make up the string.
[Symbol (x)]
  * the symbol string's size in bytes stored as a variable length integer.
  * the characters (single bytes) that make up the symbol string.
[SendSite (S)]
  * the sendsite's name's size in bytes stored as a variable length integer.
  * the characters (single bytes) that make up the name of the sendsite.
[Tuple (p)]
  * the number of elements in the tuple stored as a variable length integer.
  * the marshaled objects that represent each value in the tuple.
[InstructionSequence (i)]
  * the number of opcodes in the InstructionSequence stored as a variable length integer.
  * the opcodes that make up the InstructionSequence, stored as variable length integers.
[CompiledMethod (M)]
  * the version number of the CompiledMethod that has been marshaled.
  * the marshaled value of each field, where the fields are:
    1. <tt>\_\_ivars__</tt>
    1. primitive
    1. name
    1. iseq
    1. stack_size
    1. local_count
    1. required_args
    1. total_args
    1. splat
    1. literals
    1. exceptions
    1. lines
    1. file
    1. local_names
[Float (d)]
  * the newline-delimited string representation of the Float
[NilClass (n)]
  * "nil"
[TrueClass (t)]
  * "true"
[FalseClass (f)]
  * "false"

=== Formatter

To make .rbc files easier to read and debug, you may use
<tt>lib/bin/describe_rbc.rb</tt>.

