# Rubinius Kernel

TODO: document the kernel.

The Rubinius kernel is synonymous with the Ruby core library. That is, it's
comprised of the core classes like Array, Hash, String, Range, etc.

## Working with Kernel classes

Any time you make a change here -- or anywhere else for that matter -- make
sure you do a full rebuild (rake kernel:build) to pick up the changes, then
run the related specs, and then run bin/ci to make sure that also the
*unrelated* specs still work (minimal-seeming changes may have broad
consequences.)

If you modify a kernel class, you need to `rake build` after to have the
changes picked up. With some exceptions, you should not regenerate the stable
files. They will in most cases work just fine even without the newest code.
`rake build:stable` is the command for that.

If you create a new file in one of the kernel subdirectories, it will be
necessary to regenerate the .load_order.txt file in the equivalent runtime
subdirectory in order to get your class loaded when Rubinius starts up. Use
the rake task build:load_order to regenerate the .load_order.txt files.


## Kernel-land and user-land

Rubinius is in many ways architected like an operating system, so some OS
world terms may be easiest to describe the two modes that Rubinius operates
under:

'Kernel-land' describes how code in kernel/ is executed.  Everything else is
'user-land.'

Kernel-land has a number of restrictions to keep things sane and simple:

*   #public, #private, #protected, #module_function require method names as
    arguments. The 0-argument version that allows toggling visibility in a
    class or module body is not available.

*   Restricted use of executable code in class, module and script (file)
    bodies. <tt>SOME_CONSTANT = :foo<tt> is perfectly fine, of course, but for
    example different 'memoizations' or other calculation should not be
    present. Code inside methods has no restrictions, broadly speaking, but
    keep dependency issues in mind for methods that may get called during the
    instantiation of the rest of the kernel code.

*   Kernel-land code does not use handle defining methods through
    Module#__add_method__ nor MetaClass#attach_method. It adds and attaches
    methods directly in the VM. This is necessary for bootstrapping.

*   Any use of string-based eval in the kernel must go through discussion.
