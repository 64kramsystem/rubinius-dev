---
This is a list of tasks that need to be completed. I've tried to
group them by when they need to be done.

Before Alpha:
 - Ruby tasks:
   - Convert syd-parser to standalone library to be linked in
   - Convert compiler infrastructure to SimpleSexpProcessor so..
   - Compiler can run natively within rubinius VM.
   - Get miniunit running in the VM, so...
   - BFTS tests can be integrated into main testing
  
 - C tasks:
   - Add baker GC down scaling
      - After GC, detect how much free space is available.
        If there is A LOT, rescale next back a bit (using a
        reverse scaling factor so it gets smaller slowly)
   - Add primitives for onig to do regexp
      - Create, match, replace?, captures
   - Add primitives for libtommath to do bignums
      - all the numeric operators
   - Come up with simple foreign function interface (FFI)
     - maybe use a segment of primitive indexes
       - this would limit the total number of foreign functions
     - could use a specialized method like the attr_* methods and use
       a primitive that would pull the function pointer and call
       information out of the method to be called.

Soon rather than later:
  - Ruby tasks:
    - Write a convert for a ruby dialect => c, ala pyrex.
      - Convert all the primitives to use it.
      - Make it THE way to create extensions for rubinius.

Future:
  - Ruby tasks:
    - Get translation work so that prototype B ruby
      code can translated into C
  - C tasks:
    - Make use of train GC
  - Extensions:
    - sqlite3. I really want it to be one of the core extensions
      rubinius includes because it's so darn useful. I'd love for
      it to be in the rubinius core library so that stdlib stuff
      could easily build off it.
  - Optimizations:
    - When working with bignum's, the normal code paths check that the
      output needs to be a bignum, and downconverts it to a fixnum
      if it doesn't need to be. The thing to do would be to not bother
      down converting, and when the GC runs, then downconvert any bignums.
