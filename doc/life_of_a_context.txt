= The life of a context.

== Definitions:

Virtual bottom (om->context_bottom): The lowest context, address wise, in the
stack that is not referenced.

== Description:

All contexts begin life in the context stack (state->om->contexts).
A context is allocated at the next available position in the stack
(contexts->current).

The context is then activated. When another method call is performed, the cpu
registers are saved into it, and it is registered as the new context's sender.

Now there are 3 paths:

1. The context is ready to return, and has not been referenced. Because of the
   order in which contexts are allocated on the context stack, the most recent
   context is always on the bottom. So the space it took up is decremented from
   contexts->current, so the next context uses the same memory.

2. Same as 1, but the context was referenced. Before decrementing
	 contexts->current, the address of the context is compared against the
	 virtual bottom of the stack. Because the context has been referenced, it is
	 equal to the virtual bottom, so the context stack is not decremented,
   leaving this context alive in the context stack.

3. Same as 2, but instead a context created by a method send in this context is
   referenced. When this context goes to return, it's address is lower than the
   virtual bottom, so the contexts->current is left unchanged.

== Phase 2

When the baker GC is run, the first thing it does is formalize all contexts
between the true bottom and the virtual bottom. These are contexts that ones
that were directly referenced, or indirectly referenced (a child was
referenced).

The baker GC is then run. Any references to contexts in the context stack will
be of contexts between the true bottom and the virtual bottom only, and when
they are seen by the GC, they will be copied into the normal baker heap. This
causes the sender chain to be pulled into the baker heap too.

The baker GC finishes. All contexts that were referenced have been pulled into
the baker GC and contain all proper OOPs.

The context stack is walked again, this time, from virtual bottom to the top.
These are all the contexts that were not referenced. The first context in the
stack's sender will now point to a context in the baker heap. That context is
then copied to the true bottom of the context stack. The same is done for all
the rest of the contexts still in the context stack, moving them one after
another closer to the bottom. This compacts the context stack, removing all
contexts that have been placed into the baker heap.

== Phase 2.5

When the mark/sweep GC is run, the contexts on the context stack are walked
specifically, marking the objects that they point to. This is the only extra
effort that the mark/sweep GC requires of the context stack.

== Phase 3: Baker GC context death

When a context store in the baker GC returns, it's sender is set to nil (to
break the chain) and it is left in the heap, to be cleaned up the next time
the GC runs.

== heap == baker GC heap

Scenarios:

0. no contexts
   A. nil
   B. on the stack
   
   B->sender is nil, and B will be on the stack, as it's the first context.
1. all on stack.
   A. on stack
   B. child of A, on stack
   
   on GC, B->sender is adjusted for new location of A, post compacting.
   if A has not been referenced, A is the ctx located in memory just before B.
2. heap and stack.
   A. in heap
   B. child, on stack
   
   on GC, B->sender is compacted by baker, returning new location.
   B is located at the virtual bottom.
3. both in heap
   A. in heap
   B. child, in heap
   
   on GC, B->sender is compacted by baker, returning new location.
4. stack and heap
   A. on stack
   B. child, in heap (can only be BlockContext)
   
	 A is referenced, thus below virtual bottom. On GC of B, B->sender causes A
   to be copied into heap, returning new location.

== Assertions:

A context can never be in the mark_sweep GC.

A context referenced in the heap must be also in heap, or below virtual bottom
(about to be copied)

A sender on the stack must be in the heap or exactly CTX_SIZE less that the
current context.

Only the context closest to the virtual bottom may be referenced by an object
in the heap.

If a context is on the stack and not referenced, it's class is nil.

If a context is on the stack and referenced, it's class is fastctx.

If a context is in the heap, it's class is either fastctx or blokctx.

