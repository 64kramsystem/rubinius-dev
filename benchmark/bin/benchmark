#!/usr/bin/env ruby

lib_path = File.expand_path("../../lib", __FILE__)

$:.unshift lib_path

require 'optparse'
require 'tempfile'

require 'benchmark/suite'
require 'benchmark/ips'

targets = []
at_end = false

opt = OptionParser.new do |o|
  o.on("-t", "--target TARGET", String,
          "Use TARGET to compare against: r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      targets << 'ruby'
    when 'r19', 'ruby19'
      targets << 'ruby19'
    when 'x', 'rbx', 'rubinius'
      targets << 'bin/rbx'
    when 'j', 'jruby'
      targets << 'jruby'
    else
      targets << t
    end
  end

  o.on("-e", "--end", "Report all stats after all suitse have run") do
    at_end = true
  end
end

opt.parse!

if targets.empty?
  targets << "bin/rbx"
end

opts = []

if at_end
  opts << "--quiet"
end

results = targets.map do |t|
  tf = Tempfile.new "benchmark"
  tf.close
  puts "=== #{t} ===" unless at_end
  args = ["-I#{lib_path}", "benchmark/lib/benchmark/suite-run.rb"]
  args += opts
  args << tf.path
  args += ARGV

  cmd, *rest = t.split(/\s+/)
  args.unshift *rest

  system cmd, *args

  tf.open

  [t, Marshal.load(tf.read)]
end

if at_end
  results.each do |name, suite|
    puts "=== #{name} ==="
    suite.display
  end
end

if targets.size > 1
  compared = Hash.new { |h,k| h[k] = [] }

  results.each do |target, suite|
    suite.reports.each do |name, reports|
      reports.each do |rep|
        compared["#{name}:#{rep.label}"] << [target, rep]
      end
    end
  end

  puts

  compared.each do |name, reports|
    if reports.size > 1
      puts "Comparing #{name}:"

      iter = false
      sorted = reports.sort do |a,b|
        if a[1].respond_to? :ips
          iter = true
          b[1].ips <=> a[1].ips
        else
          a[1].runtime <=> b[1].runtime
        end
      end

      best_name, best_report = sorted.shift


      if iter
        printf "%20s: %10d i/s\n", best_name, best_report.ips
      else
        puts "#{best_name.rjust(20)}: #{best_report.runtime}s"
      end

      sorted.each do |entry|
        name, report = entry
        if iter
          x = (best_report.ips.to_f / report.ips.to_f)
          printf "%20s: %10d i/s - %.2fx slower\n", name, report.ips, x
        else
          x = "%.2f" % (report.ips.to_f / best_report.ips.to_f)
          puts "#{name.rjust(20)}: #{report.runtime}s - #{x}x slower"
        end
      end
    end
  end
end
