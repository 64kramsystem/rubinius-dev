= Installation guide for Rubinius as of 05/2007

Please visit http://rubini.us to view the most current installation
information. Additionally, the #rubinius IRC channel on Freenode will help.


== Getting the software and required libraries

There are a few things that you need in order to be able to build and run Rubinius. 
Once you have installed the general requirements, install the Gems needed and then 
any platform-specific requirements.


=== General requirements

* "GCC version 4.x":http://gcc.gnu.org/
* "GNU Bison":http://www.gnu.org/software/bison/
* "gmake (GNU Make)":http://savannah.gnu.org/projects/make/
* "pkg-config (configuration tool)":http://pkgconfig.freedesktop.org/
* "glib2 version >= 2.10 (Gtk2 base libs)":http://www.gtk.org/
* "libtool version >= 1.5":http://www.gnu.org/software/libtool/
* "Ruby version >= 1.8.4 (the Ruby language)":http://www.ruby-lang.org/
* "RubyGems (Ruby package manager)":http://www.rubygems.org/
* "Git (source control used by rubinius)":http://git.or.cz/
* "zip and unzip commands (archiving)":http://www.info-zip.org

Each package may have requirements of its own, of course.

You may want to make sure not to override your normal environment so if necessary, 
make sure to install everything in the correct prefix (often /usr/local) and to name 
the programs accordingly (you probably want to ensure gmake is called gmake in order 
not to override the default make.) You can then adjust the environment with often a 
simple PATH revision as needed.


=== Requirements through RubyGems

* rake

Rake may be obtained with the gem install command. See http://www.rubygems.org for more information.


=== System-dependent requirements

==== FreeBSD, OpenBSD
 
* "libexecinfo (backtrace utilities)":http://www.freshports.org/devel/libexecinfo


== Rubinius itself

You need to check Rubinius out through Git (which we just installed). The invocation looks like this:

  git clone http://git.rubini.us/code rubinius

== Compiling etc.

In the simplest case and assuming that you have all the prerequisites, actually 
getting a working Rubinius binary should be as simple as this:

  cd /path/to/rubinius
  ./configure
  make

This will give you a binary, @./shotgun/rubinius@ which can then be invoked to 
run scripts. If your system compiler is not GCC 4.x, you can use the CC env
to the *configure* script. If you want a development version (no optimisations, 
extra debug info), use DEV=1 again at the configuration phase, not to make. 

If you want, you can also do a @make install@. This will install @rbx@ as a 
shortcut for @./shotgun/rubinius@.


== Troubleshooting and platform-specific notes

Right now, the very best thing to do is to join the #rubinius IRC channel on Freenode. 
The forums here are an alternative method though the response is probably not going to 
be as swift. We will try to collect tips here, too.

=== 64-bit platforms

Currently mostly works on amd64 and Opteron. Other 64-bit platforms have not been tested.

This is a guide to building Rubinius on various platforms.

=== Mac OS X

See http://42squared.com/posts/how_to_install_rubinius_on_mac_os_x

If you are getting an error like this one:

  glibtool: link: cannot build libtool library `librubinius.la' from non-libtool objects: ...

This is probably because you are using an old glibtool (1.3.5 or similar) that came
with Fink. This is the case when 'which glibtool' produces /sw/bin/glibtool. You want 
to use the one at /usr/bin/glibtool (1.5) instead. If you are radical you can just 
'sudo rm /sw/bin/glibtool' to fix this mess.

=== Ubuntu

For the build to succeed you will need these packages:
 
* libglib2.0-dev
* zlib1g-dev
