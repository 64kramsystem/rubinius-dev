# -*- ruby -*-

$q = true

Autotest.add_hook :run_command do |at|
  system "rake"
end

class Autotest
  alias :old_ruby :ruby
  alias :old_make_test_cmd :make_test_cmd

  def ruby
    "bin/ci"
  end

  def make_test_cmd files_to_test
    # until bin/ci and bin/mspec allow for regexps, run the whole file again
    classes = reorder(files_to_test).map { |k,v| k }.join(' ')
    "PRETTY=1 #{ruby} #{classes} | #{unit_diff}"
  end
end

Autotest.add_hook :initialize do |at|
  at.order = :natural

  at.add_exception(/\.rbc$/)
  at.add_exception(/\.txt$/)
  at.add_exception(/fixtures/)
  at.add_exception(/\/data\//)

  at.test_directories.clear
  at.test_directories.push('spec/ruby/1.8/core',
                           'spec/ruby/1.8/language',
                           'spec/compiler',
                           'spec/parser')

  at.add_mapping %r%^spec/.*_spec\.rb$% do |filename, _|
    filename
  end

  at.add_mapping %r%^kernel/(.*)/(.*).rb$% do |_, m|
    Dir["spec/#{m[1]}/#{m[2]}/*_spec.rb"]
  end

  at.add_mapping %r%^kernel/(.*)/(.*).rb$% do |_, m|
    Dir["spec/#{m[1]}/#{m[2]}/*_spec.rb"]
  end

  at.add_mapping %r%^compiler/(bytecode|sexp|translation)/*.rb$% do |_, m|
    Dir["spec/compiler/rubinius/*_spec.rb"] + Dir["spec/language/*_spec.rb"]
  end

  at.add_mapping %r%^lib/(.*).rb% do |_, m|
    Dir["spec/library/#{m[1]}*_spec.rb"]
  end

  at.add_mapping %r%^shotgun/lib/subtend/ruby.c$% do |_, m|
    Dir["spec/rubinius|spec/rubinius/subtend/*_spec.rb"]
  end
end
