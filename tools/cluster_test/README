Rubinius Cluster Test (bad name--I know)
----------------------------------------

cluster_test is a continuous build / test system for ruby
implementations. On the client side, it runs rubyspecs against any
number of ruby versions for a given implementation (mri, rbx,
etc). The server script collects submitted data and produces summaries
of the current results.

If You Want to Contribute:
--------------------------

Please coordinate with the rubinius team! We only need one incremental
and one full per platform. Anything more just gets dumped on the
floor. Save the salmon, etc etc.

Basic Architecture:
-------------------

ci.rb         - client run in various platforms for various ruby
                implementations.

ci_submit.cgi - runs on ci.rubini.us and receives test result
                payloads and files them via safecat.

ci_cron.rb    - runs on ci.rubini.us and collects the results and
                generates html files, and updates client trigger files.

Running the Scripts:
--------------------

The package contains the following files:

+ ci.rb - the client side script.

          REQUIRES A PROPER MULTIRUBY SETUP. See below for details.

          Takes two optional args and one mandatory arg:

          ci.rb [-i] [-d dir] -r (mri|rbx)

          -i is incremental and builds into base_dir/builds/incremental.
          -d dir changes the base directory to run out of.
          -r is the ruby implementation you're running against (mri, rbx, etc).

          The rest is minutia and can be discovered by reading the source.

+ ci_submit.cgi - server side build result submission CGI. 

                  Tweak BASE_DIR and SAFE_CAT as necessary.

+ ci_cron.rb - server side cron script. 

               Takes two optional args:

               ci_cron.rb [base_dir] [html_dir]

Client Strategy:
----------------

1) start and build necessary dir structure
2) head CI trigger URL to get timestamp
3) sleep and repeat 2 if date unchanged
4) if first time or timestamp has changed, run multiruby_update
5) git pull on rubyspec dir
6) run multiruby on the rubyspecs
7) split results from multiruby output
8) submit each result separately with rubyspec hash & ruby impl id (-v)

Client Dir Structure:
---------------------

  root/
    latest_hash.txt             - file with latest built hash
    latest_incremental_hash.txt - file with latest incrementally built hash
    HEAD/...                    - clone of rubyspecs
    builds/$hash/...            - clone of HEAD
    builds/incremental/...      - clone of HEAD

Server Dir Structure:
---------------------

  root/
    data/
    html/
      ci/
      trigger/
    tmp/

Multiruby Suggestions:
----------------------

1) for mri, multiruby_setup mri:svn:branches
2) for rbx, multiruby_setup rbx:git:current
3) for other, submit patch to zentest project to teach multiruby_setup
   how to work with your impl.

Client Requirements:
--------------------

1) sudo gem install ZenTest (latest)
2) multiruby_setup update:rubygems
3) multiruby_setup help and run spec(s) for your test target, e.g.:
   multiruby_setup mri:svn:branches - for all MRI active branches
4) multiruby -S gem install mspec

Server Requirements:
--------------------

1) sudo gem install tagz
2) safecat - http://jeenyus.net/~budney/linux/software/safecat.html

Maintenance Details:
--------------------

Server is hosted on hoshi.fallingsnow.net in ~ci/

CGI is located in XXX.

Cron is run by user XXX.

The following people have admin access on the server:

+ Evan Phoenix (irc: evan)
+ Ryan Davis   (irc: zenspider)
