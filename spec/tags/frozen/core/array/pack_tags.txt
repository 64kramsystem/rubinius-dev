fails:Array#pack with format 'n' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'N' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'q' raises a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'q' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'q' processes count number of array elements if count given
fails:Array#pack with format 'q' returns empty string if count = 0
fails:Array#pack with format 'q' with star parameter processes all remaining array items
fails:Array#pack with format 'Q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'Q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'Q' raises a RangeError when a pack argument is >= 2**64
fails:Array#pack with format 'Q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'Q' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'Q' processes count number of array elements if count given
fails:Array#pack with format 'Q' returns empty string if count = 0
fails:Array#pack with format 'Q' with star parameter processes all remaining array items
fails:Array#pack with format 's!' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's!' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's!' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's!' processes count number of array elements if count given
fails:Array#pack with format 's!' with star parameter processes all remaining array items
fails:Array#pack with format 's_' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's_' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's_' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's_' processes count number of array elements if count given
fails:Array#pack with format 's_' with star parameter processes all remaining array items
fails:Array#pack with format 'S_' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'S_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'S_' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 'S_' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 'S_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'S_' processes count number of array elements if count given
fails:Array#pack with format 'S_' with star parameter processes all remaining array items
fails:Array#pack with format 'i!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i!' processes count number of array elements if count given
fails:Array#pack with format 'i!' with star parameter processes all remaining array items
fails:Array#pack with format 'i_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i_' processes count number of array elements if count given
fails:Array#pack with format 'i_' with star parameter processes all remaining array items
fails:Array#pack with format 'I!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I!' processes count number of array elements if count given
fails:Array#pack with format 'I!' with star parameter processes all remaining array items
fails:Array#pack with format 'I_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I_' processes count number of array elements if count given
fails:Array#pack with format 'I_' with star parameter processes all remaining array items
fails:Array#pack with format 'l!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l!' processes count number of array elements if count given
fails:Array#pack with format 'l!' with star parameter processes all remaining array items
fails:Array#pack with format 'l_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l_' processes count number of array elements if count given
fails:Array#pack with format 'l_' with star parameter processes all remaining array items
fails:Array#pack with format 'L!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L!' processes count number of array elements if count given
fails:Array#pack with format 'L!' with star parameter processes all remaining array items
fails:Array#pack with format 'L_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L_' processes count number of array elements if count given
fails:Array#pack with format 'L_' with star parameter processes all remaining array items
fails:Array#pack with format 'f' consumes as many Floats as specified
fails:Array#pack with format 'f' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'f' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'f' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'f' returns a string with length 4
fails:Array#pack with format 'f' accepts the positive zero
fails:Array#pack with format 'f' accepts the negative zero
fails:Array#pack with format 'f' accepts a positive value
fails:Array#pack with format 'f' accepts a negative value
fails:Array#pack with format 'f' accepts the positive infinity
fails:Array#pack with format 'f' accepts the negative infinity
fails:Array#pack with format 'f' accepts a NaN
fails:Array#pack with format 'd' consumes as many Floats as specified
fails:Array#pack with format 'd' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'd' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'd' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'd' returns a string with length 8
fails:Array#pack with format 'd' accepts the positive zero
fails:Array#pack with format 'd' accepts the negative zero
fails:Array#pack with format 'd' accepts a positive value
fails:Array#pack with format 'd' accepts a negative value
fails:Array#pack with format 'd' accepts the positive infinity
fails:Array#pack with format 'd' accepts the negative infinity
fails:Array#pack with format 'd' accepts a NaN
fails:Array#pack with format 'e' consumes as many Floats as specified
fails:Array#pack with format 'e' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'e' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'e' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'e' returns a string with length 4
fails:Array#pack with format 'e' accepts the positive zero
fails:Array#pack with format 'e' accepts the negative zero
fails:Array#pack with format 'e' accepts a positive value
fails:Array#pack with format 'e' accepts a negative value
fails:Array#pack with format 'e' accepts the positive infinity
fails:Array#pack with format 'e' accepts the negative infinity
fails:Array#pack with format 'e' accepts a NaN
fails:Array#pack with format 'E' consumes as many Floats as specified
fails:Array#pack with format 'E' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'E' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'E' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'E' returns a string with length 8
fails:Array#pack with format 'E' accepts the positive zero
fails:Array#pack with format 'E' accepts the negative zero
fails:Array#pack with format 'E' accepts a positive value
fails:Array#pack with format 'E' accepts a negative value
fails:Array#pack with format 'E' accepts the positive infinity
fails:Array#pack with format 'E' accepts the negative infinity
fails:Array#pack with format 'E' accepts a NaN
fails:Array#pack with format 'g' consumes as many Floats as specified
fails:Array#pack with format 'g' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'g' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'g' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'g' returns a string with length 4
fails:Array#pack with format 'g' accepts the positive zero
fails:Array#pack with format 'g' accepts the negative zero
fails:Array#pack with format 'g' accepts a positive value
fails:Array#pack with format 'g' accepts a negative value
fails:Array#pack with format 'g' accepts the positive infinity
fails:Array#pack with format 'g' accepts the negative infinity
fails:Array#pack with format 'g' accepts a NaN
fails:Array#pack with format 'g' keeps order of nonnegative real numbers
fails:Array#pack with format 'g' reverses order of nonpositive real numbers
fails:Array#pack with format 'G' consumes as many Floats as specified
fails:Array#pack with format 'G' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'G' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'G' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'G' returns a string with length 8
fails:Array#pack with format 'G' accepts the positive zero
fails:Array#pack with format 'G' accepts the negative zero
fails:Array#pack with format 'G' accepts a positive value
fails:Array#pack with format 'G' accepts a negative value
fails:Array#pack with format 'G' accepts the positive infinity
fails:Array#pack with format 'G' accepts the negative infinity
fails:Array#pack with format 'G' accepts a NaN
fails:Array#pack with format 'G' keeps order of nonnegative real numbers
fails:Array#pack with format 'G' reverses order of nonpositive real numbers
fails:Array#pack with format 'M' appends soft line break after each specified number of chars + 1 encoded char in encoded string for the specified number > 1
fails:Array#pack with format 'M' comsumres only one array item per a format
fails:Array#pack with format 'm' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'u' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'w' converts to BER-compressed integer
fails:Array#pack with format 'w' raises an ArgumentError if the count is greater than the number of remaining array elements
fails:Array#pack with format 'w' raises TypeError on nil and non-numeric arguments
fails:Array#pack with format 'p' consumes a String
fails:Array#pack with format 'p' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'p' only takes as many elements as specified after ('p')
fails:Array#pack with format 'p' consumes the whole argument string with star parameter
fails:Array#pack with format 'P' consumes a String
fails:Array#pack with format 'P' returns null pointer when passed nil
fails:Array#pack with format 'P' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'P' consumes one array item per a format
fails:Array#pack with format 'P' ignores '*' parameter
fails:Array#pack with format 'P' returns a pointer to zero-length byte sequence if count = 0 with
fails:Array#pack with format 'P' raises an ArgumentError if count is greater than the corresponding string in array
fails(on 64bit):Array#pack with format 'i!' drops higher bytes when a pack argument is >= 2**32
fails(on 64bit):Array#pack with format 'i!' drops higher bytes when a pack argument is < -2**32
fails(on 64bit):Array#pack with format 'i_' drops higher bytes when a pack argument is >= 2**32
fails(on 64bit):Array#pack with format 'i_' drops higher bytes when a pack argument is < -2**32
fails(on 64bit):Array#pack with format 'I!' drops higher bytes when a pack argument is >= 2**32
fails(on 64bit):Array#pack with format 'I!' drops higher bytes when a pack argument is < -2**32
fails(on 64bit):Array#pack with format 'I_' drops higher bytes when a pack argument is >= 2**32
fails(on 64bit):Array#pack with format 'I_' drops higher bytes when a pack argument is < -2**32
fails(on 64bit):Array#pack with format 'l!' returns a string containing 8 bytes for an integer
fails(on 64bit):Array#pack with format 'l_' returns a string containing 8 bytes for an integer
fails(on 64bit):Array#pack with format 'L!' returns a string containing 8 bytes for an integer
fails(on 64bit):Array#pack with format 'L_' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'p' returns a pointer to internal byte sequence
fails:Array#pack with format 'p' returns a pointer which is able to dereferenced into NUL terminated byte sequence
fails:Array#pack with format 'p' returns a pointer which is able to dereferenced into a right value
fails:Array#pack with format 'p' returns null pointer when passed nil
fails:Array#pack with format 'p' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'p' returns empty string if count = 0 with
fails:Array#pack with format 'p' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'P' returns a pointer to internal byte sequence
fails:Array#pack with format 'P' returns a pointer which is able to dereferenced into NUL terminated byte sequence
fails:Array#pack with format 'P' returns a pointer which is able to dereferenced into a right value
fails:Array#pack with format 'P' raises a TypeError if corresponding array item is not String
