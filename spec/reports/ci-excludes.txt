Bytecode::Compiler compiles masgn with array as the source and too many lhs
Bytecode::Compiler compiles masgn with array as the source and too many rhs
Bytecode::Compiler compiles masgn with array as source splat is stupid
Local variable access lvar in method body uses specific syntax
Local variable access lvar defined in method, accessed in block
Single assignment If rhs has multiple arguments, lhs becomes an Array of them
Multiple assignment without grouping or splatting An equal number of arguments on lhs and rhs assigns positionally
Multiple assignment without grouping or splatting If rhs has too few arguments, the missing ones on lhs are assigned nil
Multiple assignment without grouping or splatting If rhs has too many arguments, the extra ones are silently not assigned anywhere
Array#* handles recursive arrays like #join
Array#join handles recursive arrays
Array includes Enumerable
Array.new raises ArgumentError when passed a negative size
Array.new calls to_int on size
Array.new returns a new array by calling to_ary on an array-like argument
Array#& calls to_ary on its argument
Array#& acts as if using eql?
Array#| calls to_ary on its argument
Array#* calls to_str on its argument
Array#* raises ArgumentError when passed a negative integer
Array#* calls to_int on its argument
Array#* calls to_str on its argument before to_int
Array#* returns subclass instance with Array subclasses
Array#* raises TypeError if the argument can neither be converted to a string nor an integer
Array#+ calls to_ary on its argument
Array#- calls to_ary on its argument
Array#<< raises TypeError on a frozen array
Array#<=> returns -1 if the array is shorter than the other array
Array#<=> calls to_ary on its argument
Array#assoc calls == on argument
Array#at calls to_int on its argument
Array#clear raises TypeError on a frozen array
Array#collect! raises TypeError on a frozen array
Array#map! raises TypeError on a frozen array
Array#compact returns subclass instance for Array subclasses
Array#compact! raises TypeError on a frozen array
Array#concat calls to_ary on its argument
Array#concat raises TypeError on a frozen array
Array#delete raises TypeError on a frozen array
Array#delete_at calls to_int on its argument
Array#delete_at raises TypeError on a frozen array
Array#delete_if raises TypeError on a frozen array
Array#fetch calls to_int on its argument
Array#fill calls to_int on start and length
Array#fill replaces elements in range with object
Array#fill raises TypeError with range and length argument
Array#fill raises TypeError on a frozen array
Array#first returns an empty array when passed count on an empty array
Array#first calls to_int on count
Array#first does not return subclass instance when passed count on Array subclasses
Array#frozen? returns true if array is temporarily frozen while being sort!ed
Array#hash calls to_int on result of calling hash on each element
Array#include? calls == on elements from left to right until success
Array#indexes returns elements at integer argument indexes (DEPRECATED)
Array#indexes calls to_int on arguments
Array#indices returns elements at integer argument indexes (DEPRECATED)
Array#indices calls to_int on arguments
Array#initialize is private
Array#initialize does nothing when passed self
Array#initialize sets the array to size objects when passed size, object
Array#initialize raises ArgumentError if size is negative
Array#initialize calls to_int on array size
Array#initialize does not raise TypeError on a frozen array if it would not change the array
Array#initialize raises TypeError on frozen arrays
Array#initialize_copy is private
Array#initialize_copy calls to_ary on its argument
Array#initialize_copy raises TypeError on a frozen array
Array#insert calls to_int on position argument
Array#insert raises TypeError on frozen arrays
Array#join returns a string formed by concatenating each element.to_s separated by separator without trailing separator
Array#join uses the same separator with nested arrays
Array#join calls to_str on its separator argument
Array#last returns an empty array when passed a count on an empty array
Array#last does not return subclass instance on Array subclasses
Array#nitems returns the number of non-nil elements
Array#pop raises TypeError on a frozen array
Array#push raises TypeError on a frozen array
Array#rassoc calls == on argument
Array#reject! raises TypeError on a frozen array
Array#replace calls to_ary on its argument
Array#replace raises TypeError on a frozen array
Array#reverse returns subclass instance on Array subclasses
Array#reverse! raises TypeError on a frozen array
Array#reverse_each does not fail when removing elements from block
Array#rindex does not fail when removing elements from block
Array#shift raises TypeError on a frozen array
Array#slice! removes and return the element at index
Array#slice! removes and returns length elements beginning at start
Array#slice! calls to_int on start and length arguments
Array#slice! calls to_int on range arguments
Array#slice! does (not?) expand array with indices out of bounds
Array#slice! raises TypeError on a frozen array
Array#sort returns subclass instance on Array subclasses
Array#sort! raises TypeError on a frozen array
Array#transpose assumes an array of arrays and returns the result of transposing rows and columns
Array#transpose raises if the items aren't arrays and don't respond to to_ary
Array#transpose does not call to_ary on array subclass elements
Array#uniq returns subclass instance on Array subclasses
Array#uniq! raises TypeError on a frozen array
Array#unshift prepends object to the original array
Array#unshift raises TypeError on a frozen array
Array#values_at calls to_int on its indices
Array#values_at calls to_int on arguments of ranges when passes ranges
Array#[] return count elements starting from index with [index, count]
Array#[] calls to_int on index and count arguments with [index, count]
Array#[] returns the elements specified by Range indexes with [m..n]
Array#[] returns elements specified by Range indexes except the element at index n with [m...n]
Array#[] accepts Range instances having a negative m and both signs for n with [m..n] and [m...n]
Array#[] calls to_int on Range arguments with [m..n] and [m...n]
Array#[] returns the same elements as [m..n] and [m...n] with Range subclasses
Array#[] returns nil if length is zero but index is invalid with [index, length]
Array#[] does not expand array when the indices are outside of the array bounds
Array#[] returns a subclass instance when called on a subclass of Array
Array#slice return count elements starting from index with [index, count]
Array#slice calls to_int on index and count arguments with [index, count]
Array#slice returns the elements specified by Range indexes with [m..n]
Array#slice returns elements specified by Range indexes except the element at index n with [m...n]
Array#slice accepts Range instances having a negative m and both signs for n with [m..n] and [m...n]
Array#slice calls to_int on Range arguments with [m..n] and [m...n]
Array#slice returns the same elements as [m..n] and [m...n] with Range subclasses
Array#slice returns nil if length is zero but index is invalid with [index, length]
Array#slice does not expand array when the indices are outside of the array bounds
Array#slice returns a subclass instance when called on a subclass of Array
Array#[]= calls to_int on its start and length arguments
Array#[]= calls to_int on range arguments
Array#[]= raises IndexError when passed indexes out of bounds
Array#[]= calls to_ary on its rhs argument for multi-element sets
Array#[]= does not call to_ary on rhs array subclasses for multi-element sets
Array#[]= raises TypeError on a frozen array
Array#[]= with [index, count] sets elements when passed start, length
Array#[]= with [m..n] accepts Range subclasses
Array#pack raises ArgumentError with ('%')
Array#pack skips everything till the end of schema string with ('#')
Array#pack skips everything till the end of schema line with ('#')
Array#pack returns packed bit-string descending order with ('B')
Array#pack uses char codes to determine if bit is set or not with ('B')
Array#pack conversion edge case: all zeros with ('B')
Array#pack conversion edge case: all ones with ('B')
Array#pack conversion edge case: left one with ('B')
Array#pack conversion edge case: left one with ('B')
Array#pack conversion edge case: edge sequences not in first char with ('B')
Array#pack uses zeros if count is not multiple of 8 with ('B')
Array#pack returns zero-char for each 2 of count that greater than string length with ('B')
Array#pack returns extra zero char if count is odd and greater than string length with ('B')
Array#pack starts new char if string is ended before char's 8 bits with ('B')
Array#pack considers count = 1 if no explicit count it given with ('B')
Array#pack returns empty string if count = 0 with ('B')
Array#pack uses argument string length as count if count = * with ('B')
Array#pack consumes only one array item with ('B')
Array#pack raises TypeError if corresponding array item is not String with ('B')
Array#pack returns packed bit-string descending order with ('b')
Array#pack conversion edge case: all zeros with ('b')
Array#pack conversion edge case: all ones with ('b')
Array#pack conversion edge case: left one with ('b')
Array#pack conversion edge case: left one with ('b')
Array#pack conversion edge case: edge sequences not in first char with ('b')
Array#pack uses char codes to determine if bit is set or not with ('b')
Array#pack uses zeros if count is not multiple of 8 with ('b')
Array#pack returns zero-char for each 2 of count that greater than string length with ('b')
Array#pack returns extra zero char if count is odd and greater than string length with ('b')
Array#pack starts new char if argument string is ended before char's 8 bits with ('b')
Array#pack considers count = 1 if no explicit count it given with ('b')
Array#pack returns empty string if count = 0 with ('b')
Array#pack uses argument string length as count if count = * with ('b')
Array#pack consumes only one array item with ('b')
Array#pack raises TypeError if corresponding array item is not String with ('b')
Array#pack enocdes string with Qouted Printable encoding with ('M')
Array#pack doesn't encode new line chars with ('M')
Array#pack doesn't quote chars 32..60 and 62..126) with ('M')
Array#pack quotes chars by adding equal sign and char's hex value with ('M')
Array#pack quotes equal sign with ('M')
Array#pack doesn't quote \t char with ('M')
Array#pack returns empty string if source string is empty with ('M')
Array#pack calls to_s on object to convert to string with ('M')
Array#pack encodes string with UU-encoding with ('u')
Array#pack converts series of 3-char sequences into four 4-char sequences with ('u')
Array#pack appends zero-chars to source string if string length is not multiple of 3 with ('u')
Array#pack encodes 6-bit char with another char starting from char 32 with ('u')
Array#pack replaces spaces in encoded string with grave accent (`) char with ('u')
Array#pack returns empty string if source string is empty with ('u')
Executing a Continuation Using #call transfers execution to right after the Kernel.callcc block
Executing a Continuation Arguments given to #call (or nil) are returned by the Kernel.callcc block (as Array unless only one object)
Executing a Continuation #[] is an alias for #call
Bignum#% % should NOT raise ZeroDivisionError if other is zero and is a Float
Bignum#modulo % should NOT raise ZeroDivisionError if other is zero and is a Float
Bignum#& returns self bitwise AND other
Bignum#<< returns self shifted left other bits
Bignum#>> returns self shifted right other bits
Bignum#[] returns the nth bit in the binary representation of self
Bignum#divmod returns an [quotient, modulus] from dividing self by other
Bignum#eql? returns true if other is a Bignum with the same value
Bignum#remainder returns the remainder of dividing self by other
Bignum#remainder raises ZeroDivisionError if other is zero and not a Float
Bignum#remainder does NOT raise ZeroDivisionError if other is zero and is a Float
Bignum#to_s returns a string with the representation of self in base x
Bignum#to_s raises an ArgumentError exception if argument is 0
Bignum#to_s raises an ArgumentError exception if argument is bigger than 36
Creating Bindings No .new provided
Creating Bindings Kernel.binding creates a new Binding
Initialised Binding May be duplicated with #dup
Initialised Binding May be cloned with #clone
Initialised Binding Normal #dup and #clone semantics apply
Using Class.new to create a new class If a block is provided, it is evaluated in the context of the Class object
Class event hook methods #inherited, if implemented, is called when a Class object is inherited. Subclass object given as parameter.
Creating a Continuation object Must be done through Kernel.callcc, no .new
Hash#inspect handles recursive hashes
Using Dir to move around the filesystem Dir.chdir can be used to change the working directory--temporary if a block is provided. Defaults to $HOME
Using Dir to modify the filesystem Dir.mkdir creates the named directory with the given permissions
Using Dir to modify the filesystem Dir.mkdir raises without adequate permissions in the parent dir
Using Dir to modify the filesystem Dir.mkdir cannot create directory hierarchies
Using Dir to modify the filesystem Dir.rmdir, .delete and .unlink remove non-empty directories
Using Dir to modify the filesystem Dir.rmdir, .delete and .unlink will raise an exception trying to remove a nonempty directory
Using Dir to modify the filesystem Dir.rmdir, .delete and .unlink need adequate permissions to remove a directory or will raise
Examining directory contents with Dir Dir.entries gives an Array of filenames in an existing directory including dotfiles
Examining directory contents with Dir Dir.foreach yields all filenames (including dotfiles) in an existing directory to block provided, returns nil
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * by itself matches any non-dotfile
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) .* by itself matches any dotfile
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * with option File::FNM_DOTMATCH matches both dot- and nondotfiles
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * followed by literals matches any (or no) beginning for nondot filenames
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) .* followed by a string matches any (or no) beginning for dotfile names
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * with File::FNM_DOTMATCH followed by literals matches any (or no) beginning for any filenames
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * in the end of a string matches any (or no) ending
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) * in the middle matches any (or no) characters
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) multiple * may appear in a glob to use all above capabilities
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) ** by itself matches any nondot files in the current directory
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) .** by itself matches any dotfiles in the current directory
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) .** with File::FNM_DOTMATCH matches any files in the current directory
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) **/ recursively matches any nondot subdirectories
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) **/ with File::FNM_DOTMATCH recursively matches any subdirectories (not ./ or ../)
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) ? can be used anywhere in a file name to match any one character except leading .
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) multiple ? can appear to match any one character each
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) [CHARACTERS] can be used to match any one character of the ones in the brackets
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) [CHAR-OTHER] can contain ranges of characters such as a-z
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) [^CHARACTERS] matches anything BUT those characters or range
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) [^CHAR-OTHER] matches anything BUT those characters or range
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) {string,other,...} matches one of the provided strings exactly in any part of a filename
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) {string,,other} can have an empty string
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) {,.}* etc. can be used to match any dot- or nondot file
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) In a single-quoted pattern, \ escapes the following character of any special meaning
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) In a single-quoted pattern, File::FNM_NOESCAPE treats \ as the literal backslash
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) Normally, / is a special character. File::FNM_PATHNAME treats it like any regular character
Wildcard-matching directory contents with Dir.glob (Dir[PATTERN] is equivalent to Dir.glob(PATTERN, 0) **/PATTERN recursively matches the pattern (as above) in itself and all subdirectories
Creating Dir objects Both Dir.new and Dir.open return a new Dir instance
Creating Dir objects Dir.new and Dir.open will raise if the directory does not exist
Creating Dir objects Dir.open may also take a block which yields the Dir instance and closes it after. Returns block value
NoMethodError#args returns an empty array if the caller method had no arguments
NoMethodError#args returns an array with the same elements as passed to the method
File class method blockdev? should return true/false depending if the named file is a block device
File class method chardev? should return true/false depending if the named file is a char device
File class method zero? should return true if the named file exists and has a zero size.
File class method writable_real? should return true if named file is writable by the real user id of the process, otherwise false
File class method writable? should return true if named file is writable by the effective user id of the process, otherwise false
File class method delete should delete a file and return the number of names passed as arguments
File class method unlink should delete a file and return the number of names passed as arguments
File class method umask should return the current umask value for the process
File class method split should split the given string into a directory and a file component and returns them in a 2 element array
File class method size? should return nil if file_name doesn't exist or has zero size, the size of the file otherwise
File class method size should the size of the file
File class method ftype should return the type of the named file
File class method identical? should return true if both named files are identical
File class method join should return new string formed by joining the strings using File::SEPARATOR
File instance method path should return the pathname used to create file as a string
File#atime returns the last access time to self
File#atime raise an Exception if it has the worng number of argments
File#ctime Returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).
File#ctime raise an exception if the arguments are wrong type or are the incorect number of arguments
File.ctime raise an Errno::ENOENT exception if the file is not found
File.ctime raise an exception if the arguments are wrong type or are the incorect number of arguments
File.delete deletes the named files,
File.delete return the number of names passed as arguments (0 and 1 argument)
File.delete return the number of names passed as arguments(multiples arguments)
File.delete raise an exception its the arguments are the worng type or number
File.directory? raise an exception its the arguments are the worng type or number
File.executable? return true if the argument its an executable file
File.executable? raise an exception its the arguments are the worng type or number
File.executable_real? returns true if the file its an executable
File.executable_real? raise an exception if the argumnent is not from the correct type or are missing
File::Constants File::RDONLY
File::Constants File::WRONLY
File::Constants File::CREAT
File::Constants File::RDWR
File::Constants File::APPEND
File::Constants File::TRUNC
File.exist? raise an exception if the argumnent is not from the correct type or are missing
File::Constants match mode constants
File::Constants the sperator constant
File::Constants the open mode constants
File::Constants lock mode constants
File.expand_path Converts a pathname to an absolute pathname
File.expand_path Converts a pathname to an absolute pathname, using a complete path
File.expand_path Converts a pathname to an absolute pathname, using ~ (home) as base
File.expand_path expand path with 
File.expand_path expand_path for commoms unix path  give a full path
File.expand_path raise an exception if the argumnents are not of the correct type or are missing
File.extname returns the extension (the portion of file name in path after the period).
File.extname returns the extension (the portion of file name in path after the period).(edge cases)
File.extname returns only the last extension of a file with several dots
File.extname raise an exception if the argumnents are not of the correct type or are missing
File.file? returns true if the named file exists and is a regular file.
File.file? raise an exception if the argumnents are not of the correct type or are missing
File.fnmatch match entire strings
File.fnmatch match when use a partial strings
File.fnmatch not match  when use { } because is not supported
File.fnmatch match when use the wildcard for one-character expresion (?)
File.fnmatch match when use the wildcard for 0 or more characters expresion (*)
File.fnmatch match when use inclusive bracket expresion [a-z] 
File.fnmatch not match when the character is out of the range using an inclusive bracket expresion [x-z] 
File.fnmatch match exclusive bracket expresion [^t] or [!t]
File.fnmatch match case sensitive
File.fnmatch match case insensitive
File.fnmatch not match a character using the wildcard '?'
File.fnmatch not match a character using the wildcard '*'
File.fnmatch not match a character using a charater insede a bracket expression 
File.fnmatch escaped wildcard becomes ordinary
File.fnmatch escaped ordinary remains ordinary
File.fnmatch  FNM_NOESACPE makes '' ordinary
File.fnmatch can escape inside bracket expression
File.fnmatch wildcards doesnt match leading by default
File.fnmatch match some paths using a composite string
File.fnmatch match usign File::CONSTANT
File.fnmatch raise an exception if the argumnents are not of the correct type or are missing
File.fnmatch? match entire strings
File.fnmatch? match when use a partial strings
File.fnmatch? not match  when use { } because is not supported
File.fnmatch? match when use the wildcard for one-character expresion (?)
File.fnmatch? match when use the wildcard for 0 or more characters expresion (*)
File.fnmatch? match when use inclusive bracket expresion [a-z] 
File.fnmatch? not match when the character is out of the range using an inclusive bracket expresion [x-z] 
File.fnmatch? match exclusive bracket expresion [^t] or [!t]
File.fnmatch? match case sensitive
File.fnmatch? match case insensitive
File.fnmatch? not match a character using the wildcard '?'
File.fnmatch? not match a character using the wildcard '*'
File.fnmatch? not match a character using a charater insede a bracket expression 
File.fnmatch? escaped wildcard becomes ordinary
File.fnmatch? escaped ordinary remains ordinary
File.fnmatch?  FNM_NOESACPE makes '' ordinary
File.fnmatch? can escape inside bracket expression
File.fnmatch? wildcards doesnt match leading by default
File.fnmatch? match some paths using a composite string
File.fnmatch? match usign File::CONSTANT
File.fnmatch? raise an exception if the argumnents are not of the correct type or are missing
File.join returns a new string formed by joining the strings using File::SEPARATOR (unix)
File.join returns a new string formed by joining the strings using File::SEPARATOR (edge cases on windows) 
File.join raise a TypeError exception when args are nil
File.new return a new File with mode string
File.new return a new File with mode num
File.new return a new File with modus num and premissions 
File.new return a new File with modus fd 
File.new create a new file when use File::EXCL mode 
File.new raise an Errorno::EEXIST if the file exists when create a new file with File::CREAT|File::EXCL
File.new create a new file when use File::WRONLY|File::APPEND mode
File.new raise an Errno::EINVAL error with File::APPEND
File.new raise an Errno::EINVAL error with File::RDONLY|File::APPEND
File.new raise an Errno::EINVAL error with File::RDONLY|File::WRONLY
File.new create a new file when use File::WRONLY|File::TRUNC mode
File.new expected errors 
File.new can't alter mode or permissions when opening a file
File.open open the file (basic case)
File.open open file when call with a block (basic case)
File.open open with mode string
File.open open a file with mode string and block
File.open open a file with mode num
File.open open a file with mode num and block
File.open open the file when call with mode, num andpermissions
File.open open the flie when call with mode, num, permissions and block
File.open open the file when call with fd
File.open open a file with a file descriptor d and a block
File.open open a file that no exists when use File::WRONLY mode
File.open open a file that no exists when use File::RDONLY mode
File.open open a file that no exists when use 'r' mode
File.open open a file that no exists when use File::EXCL mode
File.open open a file that no exists when use File::NONBLOCK mode
File.open open a file that no exists when use File::TRUNC mode
File.open open a file that no exists when use File::NOCTTY mode
File.open open a file that no exists when use File::CREAT mode
File.open open a file that no exists when use 'a' mode
File.open open a file that no exists when use 'w' mode
File.open raise an ArgumentError exception when call with an unknow mode
File.open can read in a block when call open with RDONLY mode
File.open can read in a block when call open with 'r' mode
File.open raise an IO exception when write in a block opened with RDONLY mode
File.open raise an IO exception when write in a block opened with 'r' mode
File.open can't write in a block when call open with File::WRONLY||File::RDONLY mode
File.open can't read in a block when call open with File::WRONLY||File::RDONLY mode
File.open can write in a block when call open with WRONLY mode
File.open can write in a block when call open with 'w' mode
File.open raise an IO exception when read in a block opened with WRONLY mode
File.open raise an IO exception when read in a block opened with 'w' mode
File.open raise an IO exception when read in a block opened with 'a' mode
File.open raise an IO exception when read in a block opened with 'a' mode
File.open raise an IO exception when read in a block opened with 'a' mode
File.open raise an IO exception when read in a block opened with File::WRONLY|File::APPEND mode
File.open raise an IO exception when read in a block opened with File::RDONLY|File::APPEND mode
File.open can read and write in a block when call open with RDWR mode
File.open can't read in a block when call open with File::EXCL mode
File.open can read in a block when call open with File::EXCL mode
File.open can read and write in a block when call open with File::RDWR|File::EXCL mode
File.open raise an Errorno::EEXIST if the file exists when open with File::CREAT|File::EXCL
File.open create a new file when use File::WRONLY|File::APPEND mode
File.open open a file when use File::WRONLY|File::APPEND mode
File.open raise an Errorno::EEXIST if the file exists when open with File::RDONLY|File::APPEND
File.open create a new file when use File::TRUNC mode
File.open can't read in a block when call open with File::TRUNC mode
File.open open a file when use File::WRONLY|File::TRUNC mode
File.open can't write in a block when call open with File::TRUNC mode
File.open raise an Errorno::EEXIST if the file exists when open with File::RDONLY|File::TRUNC
File.open expected errors 
File.atime raise an Errno::ENOENT exception if the file is not found
File.atime raise an exception if the arguments are wrong type or are the incorect number of arguments
File.truncate truncate the a file
File.truncate truncate to 0 a file
File.truncate truncate to 5 a file
File.truncate truncate to a lager size than the original file
File.truncate truncate to a the same size the original file
File.truncate raise an exception if the arguments are wrong type or are the incorect number of arguments
Fixnum#% does NOT raise ZeroDivisionError if other is zero and is a Float
Fixnum#<< coerces result on overflow and return self shifted left other bits
Fixnum#[] coerces the bit and return the nth bit in the binary representation of self
Fixnum#div coerces fixnum and return self divided by other as an Integer
Fixnum#modulo does NOT raise ZeroDivisionError if other is zero and is a Float
Float#CONSTANTS the DIG value is  15
Float#CONSTANTS the EPSILON value is 
Float#CONSTANTS the MANT_DIG is 53
Float#CONSTANTS the MAX_10_EXP is 308
Float#CONSTANTS the MIN_10_EXP is -308
Float#CONSTANTS the MAX_EXP is 1024
Float#CONSTANTS the MIN_EXP is -1021
Float#CONSTANTS the MIN_EXP is 1.79769313486232e+308
Float#CONSTANTS the MAX is 1.79769313486232e+308
Float#CONSTANTS the MIN is 2.2250738585072e-308
Float#CONSTANTS the RADIX is 2
Float#% does NOT raise ZeroDivisionError if other is zero
Float#/ does NOT raise ZeroDivisionError if other is zero
Float#divmod returns an [quotient, modulus] from dividing self by other
Float#infinite? returns nil, -1, +1 when self is finite, -Infinity, +Infinity
Float#modulo does NOT raise ZeroDivisionError if other is zero
Float#nan? returns true if self is not a valid IEEE floating-point number
Hash includes Enumerable
Hash.[] returns an instance of the class it's called on
Hash.new raises ArgumentError if passed both default argument and default block
Hash#== compares keys with eql? semantics
Hash#== first compares keys via hash
Hash#== does not compare keys with different hash codes via eql?
Hash#== compares keys with matching hash codes via eql?
Hash#[] compares keys with eql? semantics
Hash#[] calls % on hash code from hash()
Hash#[] compares key with found hash code via eql?
Hash#[]= duplicates and freezes string keys
Hash#[]= duplicates string keys using dup semantics
Hash#[]= raises TypeError if called on a frozen instance
Hash#clear raises TypeError if called on a frozen instance
Hash#default= raises TypeError if called on a frozen instance
Hash#delete removes the first entry (#keys order) whose key is == key and return the deleted value
Hash#delete raises TypeError if called on a frozen instance
Hash#delete_if processes entries with the same order as each()
Hash#delete_if raises TypeError if called on a frozen instance
Hash#delete_if raise RuntimeError if #rehash is called from block
Hash#delete_if raises if lots of new entries are added from block
Hash#each yields one argument: [key, value]
Hash#each raise RuntimeError if #rehash is called from block
Hash#each raises if lots of new entries are added from block
Hash#each_key raise RuntimeError if #rehash is called from block
Hash#each_key raises if lots of new entries are added from block
Hash#each_pair raise RuntimeError if #rehash is called from block
Hash#each_pair raises if lots of new entries are added from block
Hash#each_value raise RuntimeError if #rehash is called from block
Hash#each_value raises if lots of new entries are added from block
Hash#initialize is private
Hash#initialize can be used to reset default_proc
Hash#initialize raises TypeError if called on a frozen instance
Hash#initialize_copy is private
Hash#initialize_copy calls to_hash on its argument
Hash#initialize_copy does not transfer default values
Hash#initialize_copy raises TypeError if called on a frozen instance
Hash#merge calls to_hash on its argument
Hash#merge returns subclass instance for subclasses
Hash#merge processes entries with same order as each()
Hash#merge raise RuntimeError if #rehash is called from block
Hash#merge raises if lots of new entries are added from block
Hash#merge! calls to_hash on its argument
Hash#merge! raises TypeError if called on a frozen instance
Hash#merge! raise RuntimeError if #rehash is called from block
Hash#merge! raises if lots of new entries are added from block
Hash#rehash raises TypeError if called on a frozen instance
Hash#reject returns subclass instance for subclasses
Hash#reject! raises TypeError if called on a frozen instance
Hash#reject! raise RuntimeError if #rehash is called from block
Hash#reject! raises if lots of new entries are added from block
Hash#replace calls to_hash on its argument
Hash#replace does not transfer default values
Hash#replace raises TypeError if called on a frozen instance
Hash#select raise RuntimeError if #rehash is called from block
Hash#select raises if lots of new entries are added from block
Hash#shift removes a pair from hash and return it (same order as to_a)
Hash#shift raises TypeError if called on a frozen instance
Hash#store duplicates and freezes string keys
Hash#store duplicates string keys using dup semantics
Hash#store raises TypeError if called on a frozen instance
Hash#to_a returns a list of [key, value] pairs with same order as each()
Hash#update calls to_hash on its argument
Hash#update processes entries with same order as merge()
Hash#update raises TypeError if called on a frozen instance
Hash#update raise RuntimeError if #rehash is called from block
Hash#update raises if lots of new entries are added from block
Examining the call stack may be viewed through .caller
Kernel.at_exit() should fire after all other code
Kernel.at_exit() should fire in reverse order of registration
Kernel.loop() loop returns value passed to break
Kernel.loop() loop raises LocalJumpError if no block given
Kernel.srand() srand should return the previous seed value
Kernel.rand() rand should have the random number generator seeded uniquely at startup
Kernel#methods returns a list of the names of publicly accessible methods in the object
Kernel#methods returns a list of the names of publicly accessible methods in the object and its ancestors and mixed-in modules
Kernel#singleton_methods returns a list of the names of singleton methods in the object
Kernel#singleton_methods returns a list of the names of singleton methods in the object and its ancestors and mixed-in modules
Kernel#public_methods returns a list of the names of publicly accessible methods in the object
Kernel#public_methods returns a list of the names of publicly accessible methods in the object and its ancestors and mixed-in modules
Kernel#private_methods returns a list of the names of privately accessible methods in the object
Kernel#private_methods returns a list of the names of privately accessible methods in the object and its ancestors and mixed-in modules
Kernel#protected_methods returns a list of the names of protected methods accessible in the object
Kernel#protected_methods returns a list of the names of protected methods accessible in the object and from its ancestors and mixed-in modules
MatchData#[] provides access to named groups
MatchData#string returns a frozen copy of the match string
A class that includes the Math module can access the sqrt method as a private instance method
A class that includes the Math module can access the cos method as a private instance method
A class that includes the Math module has the Math::E constant
A class that includes the Math module has the Math::PI constant
Math.cos returns a float
Math.cos returns the cosine of the argument expressed in radians
Math.cos raises an ArgumentError if the argument cannot be coerced with Float()
Math.cos raises a TypeError if the argument is nil
Math.cos accepts any argument that can be coerced with Float()
Math.sin returns a float
Math.sin returns the sine of the argument expressed in radians
Math.sin raises an ArgumentError if the argument cannot be coerced with Float()
Math.sin raises a TypeError if the argument is nil
Math.acos returns a float
Math.acos returns the arccosine of the argument
Math.acos raises an Errno::EDOM if the argument is greater than 1.0
Math.acos raises an Errno::EDOM if the argument is less than -1.0
Math.acos raises an ArgumentError if the argument cannot be coerced with Float()
Math.acos raises a TypeError if the argument is nil
Math.asin return a float
Math.asin returns the arcsine of the argument
Math.asin raises an Errno::EDOM if the argument is greater than 1.0
Math.asin raises an Errno::EDOM if the argument is less than -1.0
Math.asin raises an ArgumentError if the argument cannot be coerced with Float()
Math.asin raises a TypeError if the argument is nil
Math.atan returns a float
Math.atan return the arctangent of the argument
Math.atan raises an ArgumentError if the argument cannot be coerced with Float()
Math.atan raises a TypeError if the argument is nil
Math.hypot returns a float
Math.hypot returns the length of the hypotenuse of a right triangle with legs given by the arguments
Math.hypot raises an ArgumentError if the argument cannot be coerced with Float()
Math.hypot raises a TypeError if the argument is nil
Math.erf returns a float
Math.erf returns the error function of the argument
Math.erf raises an ArgumentError if the argument cannot be coerced with Float()
Math.erf raises a TypeError if the argument is nil
Math#erfc returns a float
Math#erfc returns the complimentary error function of the argument
Math#erfc raises an ArgumentError if the argument cannot be coerced with Float()
Math#erfc raises a TypeError if the argument is nil
Math.log returns a float
Math.log returns the natural logarithm of the argument
Math.log raises an Errno::EDOM if the argument is less than 0
Math.log raises an ArgumentError if the argument cannot be coerced with Float()
Math.log raises a TypeError if the argument is nil
Math.log10 returns a float
Math.log10 return the base-10 logarithm of the argument
Math.log10 raises an Errno::EDOM if the argument is less than 0
Math.log10 raises an ArgumentError if the argument cannot be coerced with Float()
Math.log10 raises a TypeError if the argument is nil
Math.sqrt raises an ArgumentError if the argument cannot be coerced with Float()
Math.sqrt raises a TypeError if the argument is nil
Module#append_features(mod) gets called when self is included in another module/class
Module#autoload(name, filename) registers the given filename to be loaded the first time that the Module with the given name is accessed
Module#autoload(name, filename) does not autoload when the specified constant was already set
Module#autoload(name, filename) raises a NameError when an invalid constant name is given
Module#define_method(name, Method, &block) defines a new method with the given name and the given block as body in self
Module#extend_object(object) is called when an object gets extended with self
Module#extended(module) is called when an object gets extended with self
Module#extended(module) is called after Module#extend_object
String#gsub(pattern, replacement) treats \1 sequences without corresponding captures as empty strings
String#gsub(pattern, replacement) replaces \1 sequences with the regexp's corresponding capture
String#gsub(pattern, replacement) replaces \& and \0 with the complete match
String#gsub(pattern, replacement) replaces \` with everything before the current match
String#gsub(pattern, replacement) replaces \' with everything after the current match
String#gsub(pattern, replacement) returns subclass instances when called on a subclass
String#gsub(pattern) { block } raises a RuntimeError if the string is modified while substituting
String#unpack(format) returns an array by decoding self according to the format string
String#%(Object) raises ArgumentError for unused arguments when $DEBUG is true
String#%(Object) ignores percent signs at end of string / before newlines, null bytes
String#%(Object) replaces trailing absolute argument specifier without type with percent sign
String#%(Object) raises an ArgumentError when given invalid argument specifiers
String#%(Object) raises an ArgumentError when absolute and relative argument numbers are mixed
String#%(Object) calls to_int on width star and precision star tokens
String#%(Object) doesn't return subclass instances when called on a subclass
String#%(Object) always taints the result when the format string is tainted
String#%(Object) supports binary formats using %b
String#%(Object) supports binary formats using %B with same behaviour as %b except for using 0B instead of 0b for #
String#%(Object) calls to_int on argument for %c formats
String#%(Object) supports octal formats using %o
String#%(Object) calls inspect on arguments for %p format
String#%(Object) taints result for %p when argument.inspect is tainted
String#%(Object) calls to_s on arguments for %s format
String#%(Object) taints result for %s when argument is tainted
String#%(Object) raises ArgumentError for huge precisions for %s
String#%(Object) supports unsigned formats using %u
String#%(Object) supports hex formats using %x
String#%(Object) supports hex formats using %X
String#%(Object) behaves as if calling Kernel#Integer for %b argument
String#%(Object) behaves as if calling Kernel#Integer for %d argument
String#%(Object) behaves as if calling Kernel#Integer for %i argument
String#%(Object) behaves as if calling Kernel#Integer for %o argument
String#%(Object) behaves as if calling Kernel#Integer for %u argument
String#%(Object) behaves as if calling Kernel#Integer for %x argument
String#%(Object) behaves as if calling Kernel#Integer for %X argument
String#%(Object) behaves as if calling Kernel#Float for %e arguments
String#%(Object) behaves as if calling Kernel#Float for %E arguments
String#%(Object) behaves as if calling Kernel#Float for %f arguments
String#%(Object) behaves as if calling Kernel#Float for %g arguments
String#%(Object) behaves as if calling Kernel#Float for %G arguments
String#*(count) returns subclass instances
String#+(other) always taints the result when self or other is tainted
String#<<(other) taints self if other is tainted
String#<=>(obj) compares its argument and self by calling <=> on obj and turning the result around if obj responds to to_str
String#==(obj) returns obj == self if obj responds to to_str
String#[](idx) calls to_int on idx
String#[](idx, length) always taints resulting strings when self is tainted
String#[](idx, length) returns nil if the offset falls outside of self
String#[](idx, length) calls to_int on idx and length
String#[](idx, length) raises TypeError when idx or length can't be converted to an integer
String#[](idx, length) returns subclass instances
String#[](range) always taints resulting strings when self is tainted
String#[](range) returns subclass instances
String#[](range) calls to_int on range arguments
String#[](regexp) always taints resulting strings when self or regexp is tainted
String#[](regexp) returns subclass instances
String#[](regexp, idx) always taints resulting strings when self or regexp is tainted
String#[](regexp, idx) returns nil if there is no capture for idx
String#[](regexp, idx) calls to_int on idx
String#[](regexp, idx) returns subclass instances
String#[](other_str) doesn't call to_str on its argument
String#[](other_str) returns a subclass instance when given a subclass instance
String#slice(idx) calls to_int on idx
String#slice(idx, length) always taints resulting strings when self is tainted
String#slice(idx, length) returns nil if the offset falls outside of self
String#slice(idx, length) calls to_int on idx and length
String#slice(idx, length) raises TypeError when idx or length can't be converted to an integer
String#slice(idx, length) returns subclass instances
String#slice(range) always taints resulting strings when self is tainted
String#slice(range) returns subclass instances
String#slice(range) calls to_int on range arguments
String#slice(regexp) always taints resulting strings when self or regexp is tainted
String#slice(regexp) returns subclass instances
String#slice(regexp, idx) always taints resulting strings when self or regexp is tainted
String#slice(regexp, idx) returns nil if there is no capture for idx
String#slice(regexp, idx) calls to_int on idx
String#slice(regexp, idx) returns subclass instances
String#slice(other_str) doesn't call to_str on its argument
String#slice(other_str) returns a subclass instance when given a subclass instance
String#[idx] = char raises an IndexError without changing self if idx is outside of self
String#[idx] = char calls to_int on idx
String#[idx] = char raises a TypeError when self is frozen
String#[idx] = other_str taints self if other_str is tainted
String#[idx] = other_str raises an IndexError without changing self if idx is outside of self
String#[idx] = other_str calls to_int on idx
String#[idx, count] = other_str taints self if other_str is tainted
String#[idx, count] = other_str raises a TypeError if other_str is a type other than String
String#capitalize returns subclass instances when called on a subclass
String#capitalize! raises a TypeError when self is frozen
String#center(length, padstr) returns a new string of specified length with self centered and padded with padstr
String#center(length, padstr) pads with whitespace if no padstr is given
String#center(length, padstr) taints result when self or padstr is tainted
String#center(length, padstr) tries to convert length to an integer using to_int
String#center(length, padstr) tries to convert padstr to a string using to_str
String#center(length, padstr) raises an ArgumentError if padstr is empty
String#center(length, padstr) returns subclass instances when called on subclasses
String#chomp(separator) uses $/ as the separator when none is given
String#chomp(separator) returns subclass instances when called on a subclass
String#chop returns subclass instances when called on a subclass
String#concat(other) is an alias of String#<<
String#concat(other) taints self if other is tainted
String#count(*sets) counts occurrences of chars from the intersection of the specified sets
String#count(*sets) negates sets starting with ^
String#count(*sets) counts all chars in a sequence
String#delete(*sets) returns a new string with the chars from the intersection of sets removed
String#delete(*sets) negates sets starting with ^
String#delete(*sets) deletes all chars in a sequence
String#delete(*sets) returns subclass instances when called on a subclass
String#downcase returns a subclass instance for subclasses
String#dump taints result when self is tainted
String#dump returns a subclass instance for subclasses
String#each(separator) appends multiple successive newlines together when the separator is an empty string
String#each(separator) yields subclass instances for subclasses
String#each(separator) raises a RuntimeError if the string is modified while substituting
String#each_byte keeps iterating from the old position (to new string end) when self changes
String#each_byte returns self
String#gsub(pattern, replacement) returns a copy of self with all occurrences of pattern replaced with replacement
String#gsub(pattern, replacement) ignores a block if supplied
String#gsub(pattern, replacement) replaces \+ with the last paren that actually matched
String#gsub(pattern, replacement) treats \+ as an empty string if there was no captures
String#gsub(pattern, replacement) maps \\ in replacement to \
String#gsub(pattern, replacement) taints the result if the original string or replacement is tainted
String#gsub(pattern, replacement) tries to convert pattern to a string using to_str
String#gsub(pattern, replacement) raises a TypeError when pattern can't be converted to a string
String#gsub(pattern, replacement) sets $~ to MatchData of last match and nil when there's none
String#gsub(pattern) { block } sets $~ for access from the block
String#gsub(pattern) { block } restores $~ after leaving the block
String#gsub(pattern) { block } sets $~ to MatchData of last match and nil when there's none for access from outside
String#gsub(pattern) { block } converts the block's return value to a string using to_s
String#gsub(pattern) { block } taints the result if the original string or replacement is tainted
String#gsub!(pattern, replacement) raises a TypeError when self is frozen
String#gsub!(pattern) { block } taints self if block's result is tainted
String#gsub!(pattern) { block } raises a TypeError when self is frozen
String#hex treats leading characters of self as a string of hex digits
String#include?(fixnum) uses fixnum % 256
String#index(obj [, start_offset]) tries to convert obj to a string via to_str
String#index(fixnum [, start_offset]) converts start_offset to an integer via to_int
String#index(substring [, start_offset]) returns the index of the first occurrence of the given substring
String#index(substring [, start_offset]) starts the search at the given offset
String#index(substring [, start_offset]) converts start_offset to an integer via to_int
String#index(regexp [, start_offset]) behaves the same as String#index(string) for escaped string regexps
String#index(regexp [, start_offset]) supports \G which matches at the given start offset
String#index(regexp [, start_offset]) converts start_offset to an integer via to_int
String#initialize([str]) is a private method
String#initialize([str]) doesn't change self when str isn't supplied
String#initialize_copy(other) is a private method
String#insert(index, other) converts index to an integer using to_int
String#insert(index, other) taints self if string to insert is tainted
String#inspect produces different output based on $KCODE
String#inspect taints the result if self is tainted
String#ljust(length, padstr) taints result when self or padstr is tainted
String#ljust(length, padstr) tries to convert length to an integer using to_int
String#ljust(length, padstr) tries to convert padstr to a string using to_str
String#ljust(length, padstr) raises an ArgumentError when padstr is empty
String#lstrip returns a copy of self with leading whitespace removed
String#match(pattern) tries to convert pattern to a string via to_str
String#next taints the result if self is tainted
String#next! raises a TypeError if self is frozen
String#oct treats leading characters of self as a string of oct digits
String#rindex(obj [, start_offset]) raises a TypeError if obj isn't a String, Fixnum or Regexp
String#rindex(obj [, start_offset]) doesn't try to convert obj to an integer via to_int
String#rindex(obj [, start_offset]) tries to convert obj to a string via to_str
String#rindex(fixnum [, start_offset]) tries to convert start_offset to an integer via to_int
String#rindex(substring [, start_offset]) behaves the same as String#rindex(char) for one-character strings
String#rindex(substring [, start_offset]) returns the index of the last occurrence of the given substring
String#rindex(substring [, start_offset]) ignores string subclasses
String#rindex(substring [, start_offset]) starts the search at the given offset
String#rindex(substring [, start_offset]) tries to convert start_offset to an integer via to_int
String#rindex(regexp [, start_offset]) behaves the same as String#rindex(string) for escaped string regexps
String#rindex(regexp [, start_offset]) returns the index of the first match from the end of string of regexp
String#rindex(regexp [, start_offset]) sets $~ to MatchData of match and nil when there's none
String#rindex(regexp [, start_offset]) starts the search at the given offset
String#rindex(regexp [, start_offset]) supports \G which matches at the given start offset
String#rindex(regexp [, start_offset]) tries to convert start_offset to an integer via to_int
String#rjust(length, padstr) taints result when self or padstr is tainted
String#rjust(length, padstr) tries to convert length to an integer using to_int
String#rjust(length, padstr) tries to convert padstr to a string using to_str
String#rjust(length, padstr) raises an ArgumentError when padstr is empty
String#rjust(length, padstr) returns subclass instances when called on subclasses
String#scan(pattern) scans for occurrences of the string if pattern is a string
String#scan(pattern) sets $~ to MatchData of last match and nil when there's none
String#scan(pattern) tries to convert pattern to a string via to_str
String#scan(pattern) taints the match strings if self is tainted
String#scan(pattern) { block } returns self
String#scan(pattern) { block } passes groups as to the block as one argument: an array
String#scan(pattern) { block } sets $~ for access from the block
String#scan(pattern) { block } restores $~ after leaving the block
String#scan(pattern) { block } sets $~ to MatchData of last match and nil when there's none for access from outside
String#scan(pattern) { block } taints the match strings if self is tainted
String#slice!(idx) calls to_int on idx
String#slice!(idx, length) always taints resulting strings when self is tainted
String#slice!(idx, length) calls to_int on idx and length
String#slice!(idx, length) returns subclass instances
String#slice!(range) always taints resulting strings when self is tainted
String#slice!(range) returns subclass instances
String#slice!(range) calls to_int on range arguments
String#slice!(regexp) always taints resulting strings when self or regexp is tainted
String#slice!(regexp) returns subclass instances
String#slice!(regexp) sets $~ to MatchData when there is a match and nil when there's none
String#slice!(regexp, idx) always taints resulting strings when self or regexp is tainted
String#slice!(regexp, idx) returns nil if there is no capture for idx
String#slice!(regexp, idx) calls to_int on idx
String#slice!(regexp, idx) returns subclass instances
String#slice!(other_str) taints resulting strings when other is tainted
String#slice!(other_str) doesn't call to_str on its argument
String#slice!(other_str) returns a subclass instance when given a subclass instance
String#split(string [, limit]) suppresses trailing empty fields when limit isn't given or 0
String#split(string [, limit]) returns an array with one entry if limit is 1: the original string
String#split(string [, limit]) returns at most limit fields when limit > 1
String#split(string [, limit]) doesn't suppress or limit fields when limit is negative
String#split(string [, limit]) defaults to $; when string isn't given or nil
String#split(string [, limit]) ignores leading and continuous whitespace when string is a single space
String#split(string [, limit]) splits between characters when its argument is an empty string
String#split(string [, limit]) tries converting its pattern argument to a string via to_str
String#split(string [, limit]) tries converting limit to an integer via to_int
String#split(string [, limit]) returns subclass instances based on self
String#split(string [, limit]) taints the resulting strings if self is tainted
String#split(regexp [, limit]) suppresses trailing empty fields when limit isn't given or 0
String#split(regexp [, limit]) returns an array with one entry if limit is 1: the original string
String#split(regexp [, limit]) returns at most limit fields when limit > 1
String#split(regexp [, limit]) doesn't suppress or limit fields when limit is negative
String#split(regexp [, limit]) defaults to $; when regexp isn't given or nil
String#split(regexp [, limit]) splits between characters when regexp matches a zero-length string
String#split(regexp [, limit]) includes all captures in the result array
String#split(regexp [, limit]) tries converting limit to an integer via to_int
String#split(regexp [, limit]) returns subclass instances based on self
String#split(regexp [, limit]) taints the resulting strings if self is tainted
String#squeeze(*sets) negates sets starting with ^
String#squeeze(*sets) squeezes all chars in a sequence
String#squeeze(*sets) taints the result when self is tainted
String#squeeze(*sets) returns subclass instances when called on a subclass
String#squeeze!([other_strings]) raises a TypeError when self is frozen
String#sub(pattern, replacement) ignores a block if supplied
String#sub(pattern, replacement) treats \1 sequences without corresponding captures as empty strings
String#sub(pattern, replacement) replaces \& and \0 with the complete match
String#sub(pattern, replacement) replaces \` with everything before the current match
String#sub(pattern, replacement) replaces \' with everything after the current match
String#sub(pattern, replacement) replaces \+ with the last paren that actually matched
String#sub(pattern, replacement) treats \+ as an empty string if there was no captures
String#sub(pattern, replacement) maps \\ in replacement to \
String#sub(pattern, replacement) tries to convert pattern to a string using to_str
String#sub(pattern, replacement) raises a TypeError when pattern can't be converted to a string
String#sub(pattern, replacement) returns subclass instances when called on a subclass
String#sub(pattern, replacement) sets $~ to MatchData of match and nil when there's none
String#sub(pattern) { block } restores $~ after leaving the block
String#sub(pattern) { block } sets $~ to MatchData of last match and nil when there's none for access from outside
String#sub(pattern) { block } converts the block's return value to a string using to_s
String#sub(pattern) { block } taints the result if the original string or replacement is tainted
String#sub!(pattern) { block } taints self if block's result is tainted
String#sub!(pattern) { block } raises a RuntimeError if the string is modified while substituting
String#succ increases the next best alphanumeric (jumping over non-alphanumerics) if there is a carry
String#succ adds an additional character (just left to the last increased one) if there is a carry and no character left to increase
String#succ returns subclass instances when called on a subclass
String#succ taints the result if self is tainted
String#succ! is equivalent to succ, but modifies self in place (still returns self)
String#succ! raises a TypeError if self is frozen
String#swapcase returns subclass instances when called on a subclass
String#swapcase! raises a TypeError when self is frozen
String#to_f treats leading characters of self as a floating point number
String#to_f takes an optional sign
String#to_i(base=10) interprets leading characters as a number in the given base
String#to_i(base=10) auto-detects base via base specifiers (default: 10) for base = 0
String#to_i(base=10) doesn't handle foreign base specifiers when base is > 0
String#to_i(base=10) raises ArgumentError for illegal radices (1, < 0 or > 36)
String#to_sym raises an ArgumentError when self can't be converted to symbol
String#=~(obj) raises a TypeError if a obj is a string
Struct class methods new with string as first argument should overwrite previously defined constants
Struct class methods new should call to_str on its first argument (constant name)
Struct class methods new should accept nil first argument for not creating constants
Struct class methods new with symbol as first argument should not create a constant
Struct class methods new with symbol arguments should create a new anonymous class
Struct class methods new should only accept symbols
Struct class methods new should instance_eval a passed block
Struct subclass new should create a constant in subclass' namespace
Struct anonymous class class methods members should return an array of attribute names
Struct class methods new with bad constant name string as first argument should fail
Dir objects Dir#path gives the path that was supplied to .new or .open
Dir objects Dir#read gives the file name in the current seek position
Dir objects Both Dir#pos and Dir#tell give the current dir position
Dir objects Dir#seek can be used to return to a certain position (obtained from #pos or #tell), returns the Dir object
Dir objects Dir#pos= also seeks to a certain position but returns the position number instead
Dir objects Dir#rewind will reset the next read to start from the first entry but *does not reset the pointer to 1*
Dir objects Dir#each will yield each directory entry in succession
Dir objects Dir#each returns the directory which remains open
Dir objects Dir#close will close the stream and fd and returns nil
Dir objects Further attempts to use a dir that has been #closed will result in an error
Hash#merge! processes entries with same order as merge()
Module.constants returns an array of the names of all constants defined
Module.nesting returns the list of Modules nested at the point of call
Module#<(Module) returns true if self is a subclass of or includes the given module
Module#<(Module) returns false if self is the same as the given module
Module#<(Module) returns nil if self is not related to the given module
Module#<(Module) raises a TypeError the argument is no class/module
Module#<=(Module) returns true if self is a subclass of, the same as or includes the given module
Module#<=(Module) returns nil if self is not related to the given module
Module#<=(Module) returns false if self is a superclass of or is included by the given module
Module#<=(Module) raises a TypeError if the argument is no class/module
Module#<=>(Module) returns -1 if self is a subclass of or includes the given module
Module#<=>(Module) returns 0 if self is the same as the given module
Module#<=>(Module) returns +1 if self is a superclas of or included by the given module
Module#<=>(Module) returns nil if self and the given module are not related
Module#<=>(Module) returns nil if the argument is no class/module
Module#===(Object) returns true when the given Object is an instance of self or of self's descendants
Module#===(Object) returns true when the given Object's class includes self or when the given Object is extended by self
Module#>(Module) returns true if self is a superclass of or included by the given module
Module#>(Module) returns false if self is the same as the given module
Module#>(Module) returns nil if self is not related to the given module
Module#>(Module) raises a TypeError the argument is no class/module
Module#>=(Module) returns true if self is a superclass of, the same as or included by given module
Module#>=(Module) returns nil if self is not related to the given module
Module#>=(Module) returns false if self is a subclass of or includes the given module
Module#>=(Module) raises a TypeError if the argument is no class/module
Module#ancestors returns a list of modules included in self (including self)
Module#attr(name, writable) creates a getter for the given attribute name
Module#attr(name, writable) creates a setter for the given attribute name if writable is true
Module#attr(name, writable) converts non string/symbol/fixnum names to strings using to_str
Module#attr(name, writable) raises a TypeError when the given names can't be converted to strings using to_str
Module#attr_accessor(name, ...) creates a getter and setter for each given attribute name
Module#attr_accessor(name, ...) converts non string/symbol/fixnum names to strings using to_str
Module#attr_accessor(name, ...) raises a TypeError when the given names can't be converted to strings using to_str
Module#attr_reader(name, ...) creates a getter for each given attribute name
Module#attr_reader(name, ...) converts non string/symbol/fixnum names to strings using to_str
Module#attr_reader(name, ...) raises a TypeError when the given names can't be converted to strings using to_str
Module#attr_writer(name, ...) creates a setter for each given attribute name
Module#attr_writer(name, ...) converts non string/symbol/fixnum names to strings using to_str
Module#attr_writer(name, ...) raises a TypeError when the given names can't be converted to strings using to_str
Module#autoload(name, filename) raises an ArgumentError when an empty filename is given
Module#class_eval(string, filename, lineno, &block) uses the optional filename and lineno parameters for error messages
Module#class_eval(string, filename, lineno, &block) converts non string eval-string to string using to_str
Module#class_eval(string, filename, lineno, &block) raises a TypeError when the given eval-string can't be converted to string using to_str
Module#class_eval(string, filename, lineno, &block) raises an ArgumentError when more than 3 arguments are given
Module#class_eval(string, filename, lineno, &block) raises an ArgumentError when a block and normal arguments are given
Module#module_eval(string, filename, lineno, &block) uses the optional filename and lineno parameters for error messages
Module#module_eval(string, filename, lineno, &block) converts non string eval-string to string using to_str
Module#module_eval(string, filename, lineno, &block) raises a TypeError when the given eval-string can't be converted to string using to_str
Module#module_eval(string, filename, lineno, &block) raises an ArgumentError when more than 3 arguments are given
Module#module_eval(string, filename, lineno, &block) raises an ArgumentError when a block and normal arguments are given
Module#class_variable_defined?(name) returns true if a class variable with the given name is defined in self
Module#class_variable_defined?(name) raises a NameError when the given name is not allowed
Module#class_variable_defined?(name) converts a non string/symbol/fixnum name to string using to_str
Module#class_variable_defined?(name) raises a TypeError when the given names can't be converted to strings using to_str
Module#class_variable_get(name) returns the value of the class variable with the given name
Module#class_variable_get(name) raises a NameError when an uninitialized class variable is accessed
Module#class_variable_get(name) raises a NameError when the given name is not allowed
Module#class_variable_get(name) converts a non string/symbol/fixnum name to string using to_str
Module#class_variable_get(name) raises a TypeError when the given names can't be converted to strings using to_str
Module#class_variable_set(name, value) sets the class variable with the given name to the given value
Module#class_variable_set(name, value) raises a TypeError when self is frozen
Module#class_variable_set(name, value) raises a NameError when the given name is not allowed
Module#class_variable_set(name, value) converts a non string/symbol/fixnum name to string using to_str
Module#class_variable_set(name, value) raises a TypeError when the given names can't be converted to strings using to_str
Module#class_variables returns an array with the names of class variables of self and self's ancestors
Module#const_defined?(name) returns true if a constant with the given name is defined in self
Module#const_defined?(name) tries to convert the given name to a string using to_str
Module#const_defined?(name) raises a NameError when the given constant name is not allowed
Module#const_defined?(name) raises a TypeError when the given names can't be converted to strings using to_str
Module#const_get(name) returns the value of the constant with the given name
Module#const_get(name) raises a NameError when there is no constant with the given name
Module#const_get(name) tries to convert the given name to a string using to_str
Module#const_get(name) raises a TypeError when the given name can't be converted to string using to_str
Module#const_missing(name) is invoked when an undefined constant is referenced in the scope of self
Module#const_set(name, value) raises a NameError when there is no constant with the given name
Module#const_set(name, value) tries to convert the given name to a string using to_str
Module#const_set(name, value) raises a TypeError when the given name can't be converted to string using to_str
Module#constants returns an array with the names of all constants accessible in the scope of self
Module#define_method(name, Method, &block) defines the given method as an instance method with the given name in self
Module#define_method(name, Method, &block) raises a TypeError when the given method is no Method/Proc
Module#extend_object(object) extends the given object with constants and methods of self
Module#freeze prevents further modifications to self
Module#include?(Module) returns true if the given module is included by self or one of it's ancestors
Module#include?(Module) raises a TypeError when no module was given
Module#included_modules returns a list of modules included in self
NilClass#& returns false
NilClass#^ returns false if other is nil or false, otherwise true
NilClass#| returns false if other is nil or false, otherwise true
Numeric#divmod raise the expected exception
Numeric#quo quo right  floats
Numeric#quo not raise a Exception when quo by 0
Numeric#quo raise the expected exception
Numeric#div raise the expected exception
Numeric#modulo y modulo x should be z (integer - bignum) 
Numeric#modulo y modulo x should be z (bignum -integer) 
Numeric#modulo  should NOT raise ZeroDivisionError if other is zero and is a Float
Numeric#nonzero? return the vaule if number is different to 0
Numeric#remainder remainder the right  integers
Numeric#remainder remainder right  integers and floats
Numeric#remainder remainder right the integers and floats
Numeric#remainder  should remainder right with bignums and integers
Numeric#remainder raise the expected exception
Numeric#step if base < limit > step then it should iterate (base-limit)/step times (floats)
Numeric#step iterate one time if step is bigger than base-limit (floats)
Numeric#step not iterate if base is bigger than limit and step >0 (floats)
Numeric#step iterate backward if base is bigger than limit (floats)
Numeric#step not iterate if base is minor than limit and step <0 (floats)
Numeric#step if base < limit > step then  iterate (base-limit)/step times (floats)
Numeric#step raise the expected exception
Numeric#coerce return the vaule if number is different to 0
Object instance method freeze should prevent self from being further modified
Object#method_missing return the correct value from the method_missing method after call a private instance method
Object#method_missing return the correct value from the method_missing method after call a protected instance method
ObjectSpace class methods _id2ref should convert an object id to a reference to the object
ObjectSpace class methods each_object should call the block once for each living, nonimmediate object in the Ruby process
A Proc instance created using &nil should be nil
A Proc instance should be created from an object responding to :to_proc
A Proc instance should be the same if passed across methods
Regexp class method union with no arguments should return /(?!)/
Regexp class method union with arguments should return a regular expression that will match any part
Regexp instance method === should be true if there is a match
Regexp instance method === should be false if there is no match
Regexp instance method inspect should produce a formatted string
Regexp instance method options should return set of bits for options used
Regexp instance method ~ should match against the contents of $_
String#*(count) always taints the result when self is tainted
String#+(other) doesn't return subclass instances
String#<<(other) works when given a subclass instance
String#<=>(other_string) ignores subclass differences
String#==(other_string) ignores subclass differences
String#casecmp ignores subclass differences
String#crypt doesn't return subclass instances
String#delete(*sets) taints result when self is tainted
String#delete(*sets) tries to convert each set arg to a string using to_str
String#delete!(*sets) modifies self in place and returns self
String#delete!(*sets) returns nil if no modifications were made
String#each_line(separator) is an alias of String#each
String#empty? returns true if the string has a length of zero
String#eql? returns true if two strings have the same length and content
String#include?(other_str) ignores subclass differences
String#index(substring [, start_offset]) ignores string subclasses
String#ljust(length, padstr) returns subclass instances when called on subclasses
String#rindex(substring [, start_offset]) doesn't set $~
String#rindex(substring [, start_offset]) starts the search at offset + self.length if offset is negative
String#rindex(substring [, start_offset]) returns nil if the substring isn't found
String#rindex(regexp [, start_offset]) starts the search at offset + self.length if offset is negative
String#slice!(other_str) removes and returns the first occurrence of other_str from self
String#slice!(other_str) raises a TypeError if self is frozen
String#tr(from_string, to_string) returns a new string with the characters from from_string replaced by the ones in to_string
String#tr(from_string, to_string) accepts c1-c2 notation to denote ranges of characters
String#tr(from_string, to_string) doesn't translate chars negated with a ^ in from_string
String#tr(from_string, to_string) pads to_str with it's last char if it is shorter than from_string
String#tr!(from_string, to_string) modifies self in place
String#tr!(from_string, to_string) returns nil if no modification was made
String#tr_s(from_strin, to_string) returns a string processed according to tr with duplicate characters removed
String#tr_s(from_strin, to_string) accepts c1-c2 notation to denote ranges of characters
String#tr_s(from_strin, to_string) doesn't translate chars negated with a ^ in from_string
String#tr_s(from_strin, to_string) pads to_str with it's last char if it is shorter than from_string
String#tr_s!(from_string, to_string) modifies self in place
String#tr_s!(from_string, to_string) returns nil if no modification was made
Time.at converts to time object
Time.gm creates a time based on given values, interpreted as UTC (GMT)
Time.utc creates a time based on given values, interpreted as UTC (GMT)
Time.local local should create a time based on given values, interpreted in the local time zone
Time.local local should create a time based on given C-style gmtime arguments, interpreted in the local time zone
Time.mktime local should create a time based on given values, interpreted in the local time zone
Time.mktime local should create a time based on given C-style gmtime arguments, interpreted in the local time zone
Time#hour returns the hour of the day (0..23) for time
Time#min returns the minute of the hour (0..59) for time
Time#day returns the day of the month (1..n) for time
Time#mday returns the day of the month (1..n) for time
Time#year returns the four digit year for time as an integer
Time#wday returns an integer representing the day of the week, 0..6, with Sunday being 0
Time#zone returns the time zone used for time
Time#gmt_offset returns the offset in seconds between the timezone of time and UTC
Time#utc_offset returns the offset in seconds between the timezone of time and UTC
Time#gmtoff returns the offset in seconds between the timezone of time and UTC
Time#localtime returns the local representation of time
Time#gmtime returns the utc representation of time
Time#utc returns the utc representation of time
Time#getlocal returns a new time which is the local representation of time
Time#getgm returns a new time which is the utc representation of time
Time#getutc returns a new time which is the utc representation of time
Time#to_a returns a 10 element array representing the deconstructed time
TrueClass#& returns false if other is nil or false, otherwise true
TrueClass#^ returns true if other is nil or false, otherwise false
TrueClass#| returns true
Module const_defined? should return true if the name is defined
Module instance_methods with false should exclude super class instance methods
Module instance_methods should return all instance methods of a module
Configuring the option parser will take individual options with #option, must have short, long and a description
Configuring the option parser also accepts short and long with the leading -'s which are stripped
Getting help from the option parser provides a #usage message constructed from the given options
Parsing options using the configured parser returns a Hash with given options as defined keys
Parsing options using the configured parser makes given option available both as long and short version
Parsing options using the configured parser sets the value of any given option without a parameter to true
Parsing options using the configured parser places any given arguments in :args if they do not belong to options
Parsing short options without arguments takes short options separately
Parsing short options without arguments takes short options combined
Parsing short options without arguments takes short options interspersed with nonoption-arguments
Parsing short options with arguments defaults to :none specified arguments which means no following argument is captured
Parsing short options with arguments stores the argument(s) in an Array stored as the value of the option name
Parsing short options with arguments accepts :one to denote a single argument
Parsing short options with arguments ignores more than one argument when :one defined
Parsing short options with arguments accepts :many to indicate as many nonoption args as follow before the following option
Parsing short options with arguments accepts :maybe to indicate zero or as many as possible arguments
Parsing short options with arguments fails if :one and no arguments given
Parsing short options with arguments fails if :many and one or no arguments given
Parsing short options with arguments assigns arguments only to the last in a set of combined short options 
Parsing long options without arguments takes long options separately
Parsing long options without arguments takes long options interspersed with nonoption-arguments
Parsing long options with arguments defaults to :none specified arguments which means no following argument is captured
Parsing long options with arguments stores the argument(s) in an Array stored as the value of the option name
Parsing long options with arguments accepts :one to denote a single argument
Parsing long options with arguments ignores more than one argument when :one defined
Parsing long options with arguments accepts :many to indicate as many nonoption args as follow before the following option
Parsing long options with arguments accepts :maybe to indicate zero or as many as possible arguments
Parsing long options with arguments fails if :one and no arguments given
Parsing long options with arguments fails if :many and one or no arguments given
A Proc instance created using Proc.given should be nil if no block given
A Proc instance created using Proc.given should reference the same block
A Proc instance created using Proc.given should be able to call the block
A Proc instance created using Proc.given using a MethodContext should do the mind trick
String instance method % format float (e) values should return a string resulting from applying the format
File.blockdev? should return true/false depending if the named file is a block device
File.chardev? should return true/false depending if the named file is a char device
File.zero? zero? should return false if the named file exists and is not of zero size.
File.zero? zero? should return true if the named file exists and has a zero size
File.executable_real? should return true if named file is readable by the real user id of the process, otherwise false
File.executable? should return true if named file is readable by the effective user id of the process, otherwise false
File.readable_real? should return true if named file is readable by the real user id of the process, otherwise false
File.readable? should return true if named file is readable by the effective user id of the process, otherwise false
File.writable_real? should return true if named file is writable by the real user id of the process, otherwise false
File.writable? should return true if named file is writable by the effective user id of the process, otherwise false
File.delete should delete a file and return the number of names passed as arguments
File.unlink should delete a file and return the number of names passed as arguments
File.umask should return the current umask value for the process
File.split should split the given string into a directory and a file component and returns them in a 2 element array
File.size? should return nil if file_name doesn't exist or has zero size, the size of the file otherwise
File.size should return the size of the file
File.ftype should return the type of the named file
File.identical? should return true if both named files are identical
File.join should return a new string formed by joining the strings using File::SEPARATOR
File#path should return the pathname used to create file as a string
File.delete deletes the named files
File.delete return the number of names passed as arguments (multiple arguments)
File.delete raise an exception its the arguments are the wrong type or number
File.delete should coerce a given parameter into a string if possible
File.executable_real? raise an exception if the argument is not from the correct type or are missing
File.chmod should return the number of files modified
File.chmod should modify the permission bits of the files specified
File#chmod should modify the permission bits of the files specified
File::Constants the separator constant
String#tr!(from_string, to_string) raises a TypeError if self is frozen
