Executing a Continuation
Kernel.at_exit should fire after all other code
Kernel.at_exit should fire in reverse order of registration
Kernel.rand is seeded uniquely at startup
Kernel#puts ignores the $/ separator global
Kernel#exec should raise a SystemCallError if cmd cannot execute
IO#puts ignores the $/ separator global
Module#autoload does not autoload when the specified constant was already set
Module#class_variables returns an array with the names of class variables of self and self
Module#extend_object extends the given object with constants and methods of self
Module#extend_object is called when an object gets extended with self
Module#extended is called when an object gets extended with self
Module#extended is called after Module#extend_object
Module#module_function makes the instance method versions private
Module#autoload registers the given filename to be loaded the first time that the Module with the given name is accessed
Thread#join raises any exceptions encountered in the thread body
The loop expression restarts the current iteration with redo
IO#gets raises IOError if the stream is not opened for reading
File#open raise an IO exception when read in a block opened with 'w' mode
File#open raise an IO exception when read in a block opened with 'a' mode
Kernel#callcc should be possible to exit a loop like a break
Kernel#callcc should be possible to call a continuation multiple times
Kernel#callcc should return the arguments to call
