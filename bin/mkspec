#! /usr/bin/env ruby
#
# mkspec - utility to create spec stubs

require 'optparse'
require File.dirname(__FILE__) + '/name_map'

class MkSpec
  VERSION = '0.0.1'

  def self.process_args(argv)
    modules = []
    base = nil

    opts = OptionParser.new do |opts|
      opts.version = VERSION
      opts.banner = "mkspec [options]"
      opts.separator ""

      opts.on("-c", "--constant CONSTANT",
              "Class or Module to generate spec stubs for") do |name|
        constant = NameMap.get_class_or_module(name)

        if constant.nil? then
          raise OptionParser::InvalidArgument, "#{name} is not a constant"
        end

        modules << constant
      end

      opts.on("-b", "--base BASE",
              "Directory to generate specs into") do |directory|
        base = File.expand_path directory
      end

      opts.on("-r", "--require LIBRARY",
              "A library to require") do |file|
        begin
          require file
        rescue LoadError
          raise OptionParser::InvalidArgument, "#{file} could not be required"
        end
      end

      opts.parse argv
    end

    if modules.empty? then
      Object.constants.map { |const| NameMap.get_class_or_module(const) }
    end

    modules = modules.compact

    return base, modules
  rescue OptionParser::ParseError => e
    puts opts
    puts
    puts e
    exit 1
  end

  def self.run(argv = ARGV)
    base, modules = process_args argv

    mkspec = new base
    mkspec.generate base, modules
  end

  def initialize(base)
    @base = base
  end

  def create_file(dir, name)
    file = File.join dir, name

    unless File.exist? file then
      /\A#{Regexp.escape @base}\/?(.*)/ =~ dir

      parent_dirs = '../' * ($1.split('/').length + 1)

      File.open file, 'w' do |f|
        f.puts "require File.dirname(__FILE__) + '/#{parent_dirs}spec_helper'"
      end

      puts file
    end
  end

  def generate(dir, modules)
    modules.each do |mod|
      subdir = NameMap.get_dir_name mod, dir
      if File.exist? subdir then
        unless File.directory? subdir then
          puts "A file named #{subdir} already exists and is not a directory."
          exit 1
        end
      else
        Dir.mkdir subdir
      end

      methods = [
        mod.methods(false),
        mod.public_instance_methods(false),
        mod.private_instance_methods(false),
        mod.protected_instance_methods(false),
      ].flatten.uniq.sort

      methods.each do |method|
        name = NameMap.get_spec_name method, mod.name
        create_file subdir, name unless File.exist? name
      end

      sub_mods = mod.constants.sort.map do |constant_name|
        NameMap.get_class_or_module "#{mod}::#{constant_name}"
      end.compact

      generate subdir, sub_mods
    end
  end

end

MkSpec.run if __FILE__ == $0

