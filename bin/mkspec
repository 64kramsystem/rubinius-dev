#! /usr/bin/env ruby
#
# mkspec - utility to create the appropriate file
# for specs for Ruby core library class/module methods

require 'optparse'
require File.dirname(__FILE__) + '/name_map'

module MkSpec
  VERSION = '0.0.1'
end

target = 'ruby'
constant_names = []
constants = []
requires = []
base = nil

opts = OptionParser.new("", 24, '   ') do |opts|
  opts.banner = "mkspec [options]"
  opts.separator ""

  opts.on("-c", "--constant CONSTANT", String,
          "Name of a Class or Module") do |c|
    constant_names << c
  end
  opts.on("-b", "--base BASE", String,
          "Set base directory to BASE") do |b|
    base = b
  end
  opts.on("-r", "--require LIBRARY", String, "Name of library to require") do |f|
    requires << f
  end
  opts.on("-t", "--target TARGET", String, 
          "Implementation to create spec files for (default ruby): r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      target = 'ruby'
    when 'r19', 'ruby19'
      target = 'ruby19'
    when 'x', 'rbx', 'rubinius'
      target = 'shotgun/rubinius'
    when 'j', 'jruby'
      target = 'jruby'
    else
      target = t
    end
  end
  opts.on("-v", "--version", "Show version") do
    puts "Make Spec File Utility #{MkSpec::VERSION}"
    exit
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
  opts.parse ARGV
end

requires.each { |r| require r }

create_file = lambda do |dir, name|
  file = File.join(dir, name)
  unless File.exist?(file)
    File.open(file, 'w') do |f|
      f.puts("require File.dirname(__FILE__) + '/../../spec_helper'\n")
    end
  end
end

constants = constant_names.map { |c| NameMap.get_class_or_module(c) }
if constants.empty?
  constants = Object.constants.map { |c| NameMap.get_class_or_module(c) }
end

constants.compact.each do |c|
  dir = NameMap.get_dir_name(c, base)
  if File.exist?(dir)
    unless File.directory?(dir)
      puts "A file named #{dir} already exists and is not a directory."
      exit 1
    end
  else
    Dir.mkdir dir
  end
  
  (c.methods(false) +
      c.public_instance_methods(false) +
      c.private_instance_methods(false) +
      c.protected_instance_methods(false)).uniq.sort.each do |m|
    name = NameMap.get_spec_name(m, c.name)
    create_file.call(dir, name) unless File.exist?(name)
  end
end
