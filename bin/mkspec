#! /usr/bin/env ruby
#
# mkspec - utility to create the appropriate file
# for specs for Ruby core library class/module methods

require 'optparse'

module MkSpec
  VERSION = '0.0.1'
end

get_class_or_module = lambda do |c|
  const = Object.const_get(c)
  return const if (const.is_a?(Module) or const.is_a?(Class)) and 
    not ['OptionParser', 'ParseError', 'SystemExit'].include?(const.name)
end

target = 'ruby'
constants = []

opts = OptionParser.new("", 24, '   ') do |opts|
  opts.banner = "mkspec [options]"
  opts.separator ""

  opts.on("-c", "--constant CONSTANT", String,
          "Name of a Class or Module") do |c|
    constants << get_class_or_module.call(c)
  end
  opts.on("-t", "--target TARGET", String, 
          "Implementation to create spec files for (default ruby): r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      target = 'ruby'
    when 'r19', 'ruby19'
      target = 'ruby19'
    when 'x', 'rbx', 'rubinius'
      target = 'shotgun/rubinius'
    when 'j', 'jruby'
      target = 'jruby'
    else
      target = t
    end
  end
  opts.on("-v", "--version", "Show version") do
    puts "Make Spec File Utility #{MkSpec::VERSION}"
    exit
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  
  opts.parse ARGV
end

map = {
  '`'   => 'backtick',
  '+'   => 'plus',
  '-'   => 'minus',
  '+@'  => 'uplus',
  '-@'  => 'uminus',
  '*'   => 'multiply',
  '/'   => 'divide',
  '%'   => 'modulo',
  '<<'  => {'Bignum' => 'left_shift', 
            'Fixnum' => 'left_shift',
            'Array'  => 'append',
            'IO'     => 'output',
            'String' => 'append' },
  '>>'  => 'right_shift',
  '<'   => 'lt',
  '<='  => 'lte',
  '>'   => 'gt',
  '>='  => 'gte',
  '='   => 'assignment',
  '=='  => 'equal_value',
  '===' => 'case_compare',
  '<=>' => 'comparison',
  '[]'  => 'element_reference',
  '[]=' => 'element_set',
  '**'  => 'exponent',
  '!'   => 'not',
  '~'   => {'Bignum' => 'complement',
            'Fixnum' => 'complement',
            'Regexp' => 'match',
            'String' => 'match' },
  '!='  => 'not_equal',
  '!~'  => 'not_match',
  '=~'  => 'match',
  '&'   => {'Bignum'     => 'bit_and',
            'Fixnum'     => 'bit_and',
            'Array'      => 'intersection',
            'TrueClass'  => 'and',
            'FalseClass' => 'and', 
            'NilClass'   => 'and' },
  '|'   => {'Bignum'     => 'bit_or',
            'Fixnum'     => 'bit_or',
            'Array'      => 'union',
            'TrueClass'  => 'or',
            'FalseClass' => 'or',
            'NilClass'   => 'or' },
  '^'   => {'Bignum'     => 'bit_xor',
            'Fixnum'     => 'bit_xor',
            'TrueClass'  => 'xor',
            'FalseClass' => 'xor',
            'NilClass'   => 'xor'}
}

get_dir_name = lambda do |c|
  base = 'spec/core/'
  if (c.name.include?('Error') or c.name == 'Errno') and c.ancestors.include?(Exception)
    base + 'exception'
  elsif c == Class
    base + c.name.downcase
  else
    base + c.name.gsub(/Class/, '').downcase
  end
end

get_spec_name = lambda do |m, c, map|
  "#{map.key?(m) ? (map[m].is_a?(Hash) ? map[m][c] : map[m]) : m.gsub(/[?!=]/, '')}_spec.rb"
end

create_file = lambda do |dir, name|
  file = File.join(dir, name)
  unless File.exist?(file)
    File.open(file, 'w') do |f|
      f.puts("require File.dirname(__FILE__) + '/../../spec_helper'\n")
    end
  end
end

if constants.empty?
  constants = Object.constants.map { |c| get_class_or_module.call(c) }
end

constants.compact.each do |c|
  dir = get_dir_name.call(c)
  if File.exist?(dir)
    unless File.directory?(dir)
      puts "A file named #{dir} already exists and is not a directory."
      exit 1
    end
  else
    Dir.mkdir dir
  end
  
  (c.methods(false) +
      c.public_instance_methods(false) +
      c.private_instance_methods(false) +
      c.protected_instance_methods(false)).uniq.sort.each do |m|
    name = get_spec_name.call(m, c.name, map)
    create_file.call(dir, name) unless File.exist?(name)
  end
end
