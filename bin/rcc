#!/usr/bin/env ruby
$:.unshift "lib"
require 'rubygems'
require 'bytecode/compiler'
require 'bytecode/constructor'

if ARGV.first.index("-") == 0
  option = ARGV.shift
end


con = Bytecode::Constructor.new(nil)
com = Bytecode::Compiler.new

if option == "-t"
  require 'translation/to_c'
  require 'pp'
  
  file = ARGV.shift
  input = ARGV.shift

  info = TypeInfo.new("rbs_")
  
  if File.exists?(file)
    data =  Marshal.load(File.read(file))
    info.types = data.shift
    info.classes = data.shift
    info.consts = data.shift
  end
  
  puts "Loaded type information from #{file}..."
  
  ty = RsTyper.new(info)
  Dir["lib/translation/types/*.rb"].each do |path|
    info.load_file path
  end
  
  puts "Learning type info of #{input}."
  
  io = File.open(input)
  syd = SydneyParser.load_file io
  sx = syd.sexp
  io.close

  norm = com.fully_normalize(sx)
  pass1 = ty.process(norm)
  pass2 = ty.process(pass1)
  
  pp pass2
    
  File.open(file, "w") do |f|
    f << Marshal.dump([info.types, info.classes, info.consts])
  end
  
  puts "Saved type info to #{file}."
  
  # toc = TypeToC.new(info)
  # toc.generate
  
  # pp pass2
  exit 0
end



file = ARGV.shift
fd = File.open(file)
sx = con.convert_to_sexp(fd)
fd.close

if option == "-x"
  require 'pp'
  begin
    pp com.fully_normalize(sx)
  rescue Object => e
    puts e.backtrace
  end
  exit 0
end

begin
  meth = com.compile_as_script sx, :__script__
rescue Object => e
  puts e.backtrace
  raise
end

def iputs(str, indent)
  print " " * indent
  puts str
end

def show_method(m, indent=0)
  prim = CPU::Primitives.name_to_index(m.primitive)
  iputs "=== Method Description: #{m.name}, primitive: #{m.primitive.inspect} (#{prim})", indent
  iputs "   From: #{m.file}", indent
  iputs "Assembly:", indent
  m.assembly.split("\n").each do |line|
    iputs line, indent + 2
  end
  iputs "Literals:", indent
  meths = m.literals.select { |mo| 
    Bytecode::MethodDescription === mo
  }
  others = m.literals - meths
  others.each do |lit|
    iputs lit.inspect, indent + 2
  end
  
  meths.each do |lit|
    show_method(lit, indent + 1)
  end
  
  
  iputs "=== done with #{m.name}", indent
end

show_method(meth)
