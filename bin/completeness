#!/usr/bin/env ruby
#
# Generate a completeness report from MRI classes and modules
# based on the specs.

require 'optparse'

module Completeness
  VERSION = '0.0.1'
end

get_class_or_module = lambda do |const|
  constant = const.split('::').inject(nil) { |c,s| c ? c.const_get(s) : Object.const_get(s) }
  return constant if (constant.is_a?(Module) or constant.is_a?(Class)) and
    not ['DTracer', 'OptionParser', 'SystemExit'].include?(constant.name)
end

target = 'shotgun/rubinius'
base = nil
constants = []
except = []
requires = []
constant_names = []
report_failures = false
use_color = false
verbose = false
quiet = false

opts = OptionParser.new("", 24, '   ') do |opts|
  opts.banner = "completeness [options]"
  opts.separator ""

  opts.on("-r", "--require LIBRARY", String, "Name of library to require") do |f|
    requires << f
  end
  opts.on("-c", "--constant CONSTANT", String,
          "Name of a Class or Module") do |c|
    constant_names << c
  end
  opts.on("-b", "--base BASE", String,
          "Set base directory to BASE") do |b|
    base = b
  end
  opts.on("-t", "--target TARGET", String,
          "Implementation to test for completeness: r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      target = 'ruby'
    when 'r19', 'ruby19'
      target = 'ruby19'
    when 'x', 'rbx', 'rubinius'
      target = 'shotgun/rubinius'
    when 'j', 'jruby'
      target = 'jruby'
    else
      target = t
    end
  end
  opts.on("-x", "--exclude STRING|FILE", String,
          "Exclude example(s) with descriptions matching STRING or each line of FILE") do |r|
    except << r
  end
  opts.on("-v", "--version", "Show version") do
    puts "Completeness Reporter #{Completeness::VERSION}"
    exit
  end
  opts.on("-F", "--report-failures", "Report spec failure locations") do
    report_failures = true
  end
  opts.on("-o", "--color", "Use colors green=NoFailures yellow=WithFailures red=NoExamples") do
    use_color = true
  end
  opts.on("-V", "--verbose", "Show mspec command being executed") do
    verbose = true
  end
  opts.on("-q", "--quiet", "Suppress output except for final summary") do
    quiet = true
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.parse ARGV
end

requires.each { |r| require r }

dir_map = {
  'NilClass' => 'nil',
  'TrueClass' => 'true',
  'FalseClass' => 'false',
}

## from mkspec
method_map = {
  '`'   => 'backtick',
  '+'   => 'plus',
  '-'   => 'minus',
  '+@'  => 'uplus',
  '-@'  => 'uminus',
  '*'   => 'multiply',
  '/'   => 'divide',
  '%'   => 'modulo',
  '<<'  => {'Bignum' => 'left_shift', 
            'Fixnum' => 'left_shift',
            'Array'  => 'append',
            'IO'     => 'output',
            'String' => 'append' },
  '>>'  => 'right_shift',
  '<'   => 'lt',
  '<='  => 'lte',
  '>'   => 'gt',
  '>='  => 'gte',
  '='   => 'assignment',
  '=='  => 'equal_value',
  '===' => 'case_compare',
  '<=>' => 'comparison',
  '[]'  => 'element_reference',
  '[]=' => 'element_set',
  '**'  => 'exponent',
  '!'   => 'not',
  '~'   => {'Bignum' => 'complement',
            'Fixnum' => 'complement',
            'Regexp' => 'match',
            'String' => 'match' },
  '!='  => 'not_equal',
  '!~'  => 'not_match',
  '=~'  => 'match',
  '&'   => {'Bignum'     => 'bit_and',
            'Fixnum'     => 'bit_and',
            'Array'      => 'intersection',
            'TrueClass'  => 'and',
            'FalseClass' => 'and', 
            'NilClass'   => 'and' },
  '|'   => {'Bignum'     => 'bit_or',
            'Fixnum'     => 'bit_or',
            'Array'      => 'union',
            'TrueClass'  => 'or',
            'FalseClass' => 'or',
            'NilClass'   => 'or' },
  '^'   => {'Bignum'     => 'bit_xor',
            'Fixnum'     => 'bit_xor',
            'TrueClass'  => 'xor',
            'FalseClass' => 'xor',
            'NilClass'   => 'xor'},
}

cmd = lambda do |name|
  spec_file = "spec"
  const, meth = *name.split(/[#\.]/)
  if method_map.key? meth
    meth = method_map[meth]
    meth = meth[const] if meth.kind_of? Hash
  elsif meth =~ /[\?!=]$/
    meth = meth[0..-2]
  end
  dir = dir_map[const] || const.downcase
  base = 'spec/core' unless base
  spec_file = "#{base}/#{dir}/#{meth}_spec.rb"
  mspec_cmd =  %(bin/mspec -t #{target} #{requires.map { |r| "-r#{r}" }.join(" ")} -e '#{name} ' #{except.map { |x| "-x #{x}" }.join(' ')} -f d #{spec_file} 2> /dev/null)
  puts mspec_cmd if verbose
  %x{#{mspec_cmd}}
end

colors = {
  :clear => "\033[0m",
  :red => "\033[0;31m",
  :green => "\033[0;32m",
  :yellow => "\033[0;33m",
  :blue => "\033[0;34m",
}

print_summary = lambda do |str, name, tab|
  examples, failures = 0, 0
  failure_messages = []
  str.scan(/(\d+) examples, (\d+) failures/) do |e, f|
    examples += e.to_i
    failures += f.to_i
  end
  str.scan(/\n(\d+\)\n)(([^\n]+\n)+)/) do |number, error|
    failure_messages << error
  end
  summary = if examples > 0
    "#{examples} examples, #{failures} failures"
  else
    "No examples found"
  end
  unless quiet
    if use_color
      color = if examples == 0
                colors[:red]
              elsif failures == 0
                colors[:green]
              else
                colors[:yellow]
              end
      name = color + name + colors[:clear]
    end
    puts "#{name}\n    #{summary}"
  end
  tab.add(examples, failures, failure_messages)
end

constants = constant_names.map { |c| get_class_or_module.call(c) }
if constants.empty?
  constants = Object.constants.map { |c| get_class_or_module.call(c) }
end
constants.sort! { |a,b| a.to_s <=> b.to_s }

class Tabulator
  def initialize
    @methods = @examples = @failures = @missing = 0
    @failure_messages = []
    @start = Time.now
  end

  def add(examples, failures, failure_messages = [])
    @methods += 1
    @examples += examples
    @failures += failures
    @failure_messages.push *failure_messages
    @missing += 1 if examples == 0
  end

  def summarize(list_failures=false)
    puts "\nFinished in #{Time.now - @start} seconds\n\n"
    puts "#{@methods} methods, #{@examples} examples, #{@failures} failures, #{@missing} methods with no examples"
    if list_failures && @failure_messages.size > 0
      puts "\nFailed specs:\n\n"
      @failure_messages.each_with_index do |message, number|
        puts "#{number+1})\n#{message}\n\n"
      end
    end
  end

end

tabulator = Tabulator.new

constants.compact.each do |c|
  (c.methods(false) + c.singleton_methods).uniq.sort.each do |m|
    name = "#{c}.#{m}"
    print_summary.call(cmd[name], name, tabulator)
  end

  (c.public_instance_methods(false) +
      c.private_instance_methods(false) +
      c.protected_instance_methods(false)).sort.each do |m|
    name = "#{c}\##{m}"
    print_summary.call(cmd[name], name, tabulator)
  end
end

tabulator.summarize(!quiet && report_failures)
