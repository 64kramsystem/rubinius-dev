#!/usr/bin/env ruby

require 'benchmark'
include Benchmark

INTERPRETERS = ['ruby','shotgun/rubinius']
WIDTH = 42

def pretty_file(file)
  file =~ %r{/([^/]+)$}
  $1
end

def pretty_interpreter(interpreter)
  interpreter =~ %r{(ruby|rubinius)}
  $1
end

def quiet_command(command)
  command + ' > /dev/null 2>&1'
end

def label(interpreter,file)
  pretty_interpreter(interpreter) + ': ' + pretty_file(file)
end

labels = []

results = Benchmark.bmbm do |x|
  INTERPRETERS.each do |interpreter|
    if interpreter =~ /rubinius/ then
      Dir['test/benchmark/*/bm*.rbc'].each do |file|
        File.unlink file
      end
    end

    Dir['test/benchmark/*/bm*.rb'].each do |file|
      command = "#{interpreter} #{file}"

      case file
        when /wycats\/bm_string[.]rb/
          command += %{ -x "String#unpack"}
        when /borasky\/bm_MatrixBenchmark[.]rb/
          command += %{ 64}
      end

      labels << label(interpreter,file)

      x.report(labels.last + ' ' * (WIDTH - labels.last.length)) do
        if not system quiet_command(command) then
          system command
        end
      end
    end
  end
end

INTERPRETERS.each do |interpreter|
  local_labels = labels.clone

  puts pretty_interpreter(interpreter)

  total = Benchmark::Tms.new

  results.each do |result|
    next unless local_labels.shift =~ /#{pretty_interpreter(interpreter)}/
    total += result
    puts result.real.to_s
  end

  puts 'Total time: ' + total.real.to_s
end
