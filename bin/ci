#! /usr/bin/env ruby
#
# ci - continuous integration tool
#

require 'optparse'

module CI
  VERSION = '0.5.0'
end

action = :run
patterns = []
target = 'shotgun/rubinius'
format = 'ci'
clean = false

opts = OptionParser.new("", 24, '   ') do |opts|
  opts.banner = "ci [options] (FILE|DIRECTORY|GLOB)+"
  opts.separator ""

  opts.on("-c", "--create", "Create the exclude file for failing specs") do
    action = :create
  end
  opts.on("-r", "--run", "Run the specs excluding the expected failures") do
    action = :run
  end
  opts.on("-i", "--invert", "Run the specs using only the expected failures") do
    action = :invert
  end
  opts.on("-t", "--target TARGET", String, 
          "Implementation that will run the specs: r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      target = 'ruby'
    when 'r19', 'ruby19'
      target = 'ruby19'
    when 'x', 'rbx', 'rubinius'
      target = 'shotgun/rubinius'
    when 'j', 'jruby'
      target = 'jruby'
    else
      target = t
    end
  end
  opts.on("-f", "--format FORMAT", String, 
          "Formatter for reporting: s:specdox|d:dotted|c:CI|h:html|i:immediate") do |f|
    format = f
  end
  opts.on("-C", "--clean", "Remove all compiled spec files first") do
    clean = true
  end
  opts.on("-v", "--version", "Show version") do
    puts "Continuous Integration Tool #{CI::VERSION}"
    exit
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  patterns = opts.parse ARGV
end

# remove all compiled spec files to catch compiler bugs
Dir['spec/**/*_spec.rbc'].each { |name| File.delete name } if clean

# only these directories are included because other directories have specs
# that cause compilation to fail. ideally, spec/**/*_spec.rb would be run.
patterns = ['spec/compiler', 'spec/core', 'spec/mspec', 'spec/parser'] if patterns.empty?
files = []
patterns.each do |item|
  stat = File.stat(File.expand_path(item))
  files << item if stat.file?
  files.concat(Dir[item+"/**/*_spec.rb"]) if stat.directory?
end

case action
when :create
  cmd = <<-EOC
bin/mspec -t #{target} -x spec/reports/critical-excludes.txt -f ci %s \
>> spec/reports/ci-excludes.txt \
2> /dev/null
EOC
  system("rm -f spec/reports/ci-excludes.txt")
  files.each do |file|
    system(cmd % file)
  end
  system("cat spec/reports/critical-excludes.txt >> spec/reports/ci-excludes.txt")
when :run
  system("bin/mspec -t #{target} -x spec/reports/ci-excludes.txt -f #{format} #{files.join(' ')} 2> /dev/null")
when :invert
  files.each do |file|
    system("bin/mspec -t #{target} -e spec/reports/ci-excludes.txt -f #{format} #{file}")
  end
else
  puts "Unknown action: #{action}"
  puts opts
  exit
end
