#!/usr/bin/env ruby

require 'optparse'
require 'spec/spec_helper'
require 'mspec/bin/options'

opts = SpecOptions.new "run", "", 28, "   "

options = opts.options
options.separator " Ask yourself:"
options.separator "  1. What specs to run?"
options.separator "  2. How to display the output?"
options.separator "  3. What action to perform?"
options.separator "  4. When to perform it?"

options.separator "\n What specs to run"
opts.add_filters
opts.add_pretend
opts.add_interrupt

options.separator "\n How to display their output"
opts.add_formatters
opts.add_verbose

options.separator "\n What action to perform"
opts.add_actions
opts.add_verify

options.separator "\n When to perform it"
opts.add_action_filters

options.separator "\n Help!"
opts.add_help

options.separator "\n How might this work in the real world?"
options.separator "\n   1. To simply run some specs"
options.separator "\n     mspec path/to/specs"
options.separator "     mspec path/to/the_file_spec.rb"
options.separator "\n   2. To run specs tagged with 'fails'"
options.separator "\n     mspec -g fails path/to/the_file_spec.rb"
options.separator "\n   3. To start the debugger before the spec matching 'this crashes'"
options.separator "\n     mspec --spec-debug -S 'this crashes' path/to/the_file_spec.rb"
options.separator ""

patterns = opts.parse
opts.config.register

if patterns.empty?
  puts "No files specified."
  puts opts.options
  exit 1
end

files = []
patterns.each do |item|
  stat = File.stat(File.expand_path(item))
  files << item if stat.file?
  files.concat(Dir[item+"/**/*_spec.rb"].sort) if stat.directory?
end

MSpec.register_tags_path ENV["TAGS_DIR"]
MSpec.register_files files

MSpec.process
exit MSpec.exit_code
