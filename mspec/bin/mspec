#!/usr/bin/env ruby

require 'optparse'
require 'mspec/version'
require 'mspec/bin/options'

includes = []
requires = []
name = nil
target = 'shotgun/rubinius'
flags = []
command = nil
options = []

if ["ci", "run", "tag"].include? ARGV[0]
  command = ARGV.shift
  options << "-h" if ARGV.delete("-h") || ARGV.delete("--help")
end

opts = OptionParser.new("", 24, '   ') do |opts|
  opts.banner = "mspec [COMMAND] [options] (FILE|DIRECTORY|GLOB)+"
  opts.separator ""

  opts.on("-t", "--target TARGET", String, 
          "Implementation to run the specs: r:ruby|r19:ruby19|x:rbx|j:jruby") do |t|
    case t
    when 'r', 'ruby'
      target = 'ruby'
    when 'r19', 'ruby19'
      target = 'ruby19'
    when 'x', 'rbx', 'rubinius'
      target = 'shotgun/rubinius'
    when 'j', 'jruby'
      target = 'jruby'
    else
      target = t
    end
  end
  opts.on("-T", "--target-opt OPT", String,
          "Pass OPT as a flag to the target implementation") do |t|
    flags <<  t
  end
  opts.on("-I", "--include DIR", String,
          "Pass DIR through as the -I option to the target") do |d|
    includes << "-I#{d}"
  end
  opts.on("-r", "--require LIBRARY", String,
          "Pass LIBRARY through as the -r option to the target") do |f|
    requires << "-r#{f}"
  end
  opts.on("-n", "--name RUBY_NAME", String,
          "Override the name used to determine the implementation") do |n|
    name = "RUBY_NAME = \"#{n}\";"
  end
  opts.on("-D", "--gdb", "Run under gdb") do
    flags << '--gdb'
  end
  opts.on("-A", "--valgrind", "Run under valgrind") do
    flags << '--valgrind'
  end
  opts.on("-w", "--warnings", "Don't supress warnings") do
    flags << '-w'
    ENV['OUTPUT_WARNINGS'] = '1'
  end
  opts.on("-v", "--version", "Show version") do
    puts "MSpec #{MSpec::VERSION}"
    exit
  end
  opts.on("-h", "--help", "Show this message") do
    puts opts
    puts %[
  where COMMAND is one of:
  
    run - Run the specified specs (default)
    ci  - Run the known good spec
    tag - Add or remove tags
    
  mspec COMMAND -h for more options
]
    exit
  end
end

options += opts.filter! ARGV
opts.parse ARGV

ENV['MSPEC_RUNNER'] = '1'
ENV['MSPEC_OPTIONS'] = options.join("\n")
exec %[#{target} \
  #{flags.join(" ")}    \
  #{includes.join(" ")} \
  #{requires.join(" ")} \
  mspec/bin/mspec-#{command || "run"}
]
