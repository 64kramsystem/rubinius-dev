#!/usr/bin/env ruby

require 'optparse'
require 'mspec/bin/options'
require 'mspec/bin/script'


class MSpecScript
  def initialize
    Config[:includes] = []
    Config[:requires] = []
    Config[:target]   = 'ruby'
    Config[:flags]    = []
    Config[:command]  = nil
    Config[:options]  = []

    if ["ci", "run", "tag"].include? ARGV[0]
      Config[:command] = ARGV.shift
      Config[:options] << "-h" if ARGV.delete("-h") || ARGV.delete("--help")
      Config[:options] << "-v" if ARGV.delete("-v") || ARGV.delete("--version")
    end
  end

  def options(argv=ARGV)
    options = MSpecOptions.new Config, "[COMMAND]", "", 28, "   "

    options.separator ""
    options.separator "  The mspec command sets up and invokes the sub-commands"
    options.separator "  (see below) to enable, for instance, running the specs"
    options.separator "  with different implementations like ruby, jruby, rbx, etc.\n"

    options.add_config do |f|
      Config[:options] << '-B' << f
      config f
    end

    options.add_targets

    options.on("-D", "--gdb", "Run under gdb") do
      Config[:flags] << '--gdb'
    end
    options.on("-A", "--valgrind", "Run under valgrind") do
      Config[:flags] << '--valgrind'
    end
    options.on("-w", "--warnings", "Don't supress warnings") do
      Config[:flags] << '-w'
      ENV['OUTPUT_WARNINGS'] = '1'
    end
    options.add_version
    options.on("-h", "--help", <<-EOH) do
Show this message

   where COMMAND is one of:

     run - Run the specified specs (default)
     ci  - Run the known good specs
     tag - Add or remove tags

   mspec COMMAND -h for more options
EOH
      puts options.parser
      exit
    end

    Config[:options] += options.parser.filter! argv
    options.parse
  end

  def register; end

  def run
    ENV['MSPEC_RUNNER'] = '1'

    argv = Config[:flags]
    argv.concat Config[:includes]
    argv.concat Config[:requires]
    argv << "mspec/bin/mspec-#{ Config[:command] || "run" }"
    argv.concat Config[:options]

    exec Config[:target], *argv
  end
end

MSpecScript.main if __FILE__ == $0
