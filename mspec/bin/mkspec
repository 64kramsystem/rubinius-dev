#! /usr/bin/env ruby
#
# mkspec - utility to create spec stubs

require 'optparse'
require 'mspec/version'
require 'mspec/bin/name_map'

class MkSpec
  attr_reader :config

  def initialize
    @config = {
      :constants => [],
      :requires  => [],
      :base      => "spec/ruby/1.8/core"
    }
    @map = NameMap.new
  end

  def options(argv=ARGV)
    options = OptionParser.new
    options.version = MSpec::VERSION
    options.banner = "mkspec [options]"
    options.separator ""

    options.on("-c", "--constant CONSTANT", String,
               "Class or Module to generate spec stubs for") do |name|
      config[:constants] << name
    end
    options.on("-b", "--base DIR", String,
               "Directory to generate specs into") do |directory|
      config[:base] = File.expand_path directory
    end
    options.on("-r", "--require LIBRARY", String,
               "A library to require") do |file|
      config[:requires] << file
    end

    options.separator "\n How might this work in the real world?\n"
    options.separator "   1. To create spec stubs for every class or module in Object\n"
    options.separator "     mkspec\n"
    options.separator "   2. To create spec stubs for Fixnum\n"
    options.separator "     mkspec -c Fixnum\n"
    options.separator "   3. To create spec stubs for Complex in 'superspec/complex'\n"
    options.separator "     mkspec -c Complex -rcomplex -b superspec"
    options.separator ""

    options.parse argv
  rescue OptionParser::ParseError => e
    puts options
    puts
    puts e
    exit 1
  end

  def map_constants(constants, mod=nil)
    constants.inject([]) do |list, const|
      name = mod ? "#{mod}::#{const}" : const.to_s
      m = @map.get_class_or_module name
      puts "#{name} is not a class or module, ignoring" unless m
      list << m
    end.compact
  end

  def create_directory(mod, dir)
    subdir = @map.get_dir_name mod, dir

    if File.exist? subdir
      unless File.directory? subdir
        puts "#{subdir} already exists and is not a directory."
      end
    else
      Dir.mkdir subdir
    end

    subdir
  end

  def write_requires(dir, file)
    /\A#{Regexp.escape config[:base]}\/?(.*)/ =~ dir
    parents = '../' * ($1.split('/').length + 1)

    File.open file, 'w' do |f|
      f.puts "require File.dirname(__FILE__) + '/#{parents}spec_helper'"
      config[:requires].each do |lib|
        f.puts "require '#{lib}'"
      end
    end
  end

  def write_spec(file, meth, exists)
    if exists
      out = `mspec/bin/mspec-run --dry-run -fs -e '#{meth}' #{file}`
      return if out =~ /#{Regexp.escape meth}/
    end

    File.open file, 'a' do |f|
      f.puts <<-EOS

describe "#{meth}" do
  it "needs to be reviewed for spec completeness" do
  end
end
EOS
    end

    puts file
  end

  def create_file(dir, mod, meth, instance=true)
    file = File.join(dir, @map.get_spec_name(meth, mod.name))
    exists = File.exist? file

    write_requires dir, file unless exists

    name = "#{mod}#{instance ? '#' : '.'}#{meth}"
    write_spec file, name, exists
  end

  def generate(modules, dir)
    modules.each do |mod|
      subdir = create_directory mod, dir

      mod.methods(false).sort.each do |method|
        create_file subdir, mod, method, false
      end

      methods = [
        mod.public_instance_methods(false),
        mod.private_instance_methods(false),
        mod.protected_instance_methods(false),
      ].flatten.uniq.sort

      methods.each do |method|
        create_file subdir, mod, method
      end

      generate map_constants(mod.constants, mod), subdir
    end
  end

  def run
    config[:requires].each { |lib| require lib }

    constants = config[:constants].empty? ? Object.constants : config[:constants]
    generate map_constants(constants), config[:base]
  end

  def self.main
    script = new
    script.options
    script.run
  end
end

MkSpec.main if __FILE__ == $0
