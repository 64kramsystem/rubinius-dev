
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of Array#pack.
 *
 * vim: filetype=cpp
 */

#include "vm.hpp"
#include "object_utils.hpp"
#include "on_stack.hpp"

#include "builtin/array.hpp"
#include "builtin/exception.hpp"
#include "builtin/module.hpp"
#include "builtin/object.hpp"
#include "builtin/string.hpp"

namespace rubinius {
  namespace pack {
    static Object* integer(STATE, CallFrame* call_frame, Object* obj) {
      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      return G(rubinius)->send(state, call_frame, state->symbol("pack_to_int"), args);
    }
  }

#define PACK_ELEMENTS(T, coerce, format)      \
  for(; index < stop; index++) {              \
    Object* item = self->get(state, index);   \
    T* value = try_as<T>(item);               \
    if(!value) {                              \
      item = coerce(state, call_frame, item); \
      if(!item) return 0;                     \
      value = as<T>(item);                    \
    }                                         \
    str.push_back(format(value));             \
  }

#define MASK_BYTE(x) ((x)->to_native() & 0xff)

  String* Array::pack(STATE, String* directives, CallFrame* call_frame) {
    // Ragel-specific variables
    std::string d(directives->c_str(), directives->size());
    const char *p  = d.c_str();
    const char *pe = p + d.size();
    const char *eof = pe;
    int cs;

    // pack-specific variables
    Array* self = this;
    OnStack<1> sv(state, self);

    size_t index = 0;
    size_t count = 0;
    size_t stop = 0;
    bool rest = false;
    std::string str("");


static const int pack_start = 1;
static const int pack_first_final = 2;
static const int pack_error = 0;

static const int pack_en_main = 1;


	{
	cs = pack_start;
	}

	{
	if ( p == pe )
		goto _test_eof;
	switch ( cs )
	{
case 1:
	switch( (*p) ) {
		case 67: goto tr0;
		case 99: goto tr0;
	}
	goto st0;
st0:
cs = 0;
	goto _out;
tr0:
	{
    count = 1;
    rest = false;
  }
	goto st2;
tr6:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	{
    count = 1;
    rest = false;
  }
	goto st2;
tr9:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	{
    count = 1;
    rest = false;
  }
	goto st2;
st2:
	if ( ++p == pe )
		goto _test_eof2;
case 2:
	switch( (*p) ) {
		case 0: goto tr2;
		case 32: goto tr2;
		case 33: goto tr3;
		case 42: goto st5;
		case 67: goto tr6;
		case 95: goto tr3;
		case 99: goto tr6;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr5;
	} else if ( (*p) >= 9 )
		goto tr2;
	goto st0;
tr2:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	goto st3;
tr8:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	goto st3;
st3:
	if ( ++p == pe )
		goto _test_eof3;
case 3:
	switch( (*p) ) {
		case 0: goto st3;
		case 32: goto st3;
		case 67: goto tr0;
		case 99: goto tr0;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto st3;
	goto st0;
tr3:
	{
#define NON_NATIVE_ERROR_SIZE 36

    char non_native_msg[NON_NATIVE_ERROR_SIZE];
    snprintf(non_native_msg, NON_NATIVE_ERROR_SIZE,
             "'%c' allowed only after types sSiIlL", *p);
    Exception::argument_error(state, non_native_msg);
  }
	goto st4;
st4:
	if ( ++p == pe )
		goto _test_eof4;
case 4:
	switch( (*p) ) {
		case 0: goto tr2;
		case 32: goto tr2;
		case 67: goto tr6;
		case 99: goto tr6;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr2;
	goto st0;
st5:
	if ( ++p == pe )
		goto _test_eof5;
case 5:
	switch( (*p) ) {
		case 0: goto tr8;
		case 32: goto tr8;
		case 67: goto tr9;
		case 99: goto tr9;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr8;
	goto st0;
tr5:
	{
    count = (*p) - '0';
  }
	goto st6;
tr10:
	{
    count = count * 10 + ((*p) - '0');
  }
	goto st6;
st6:
	if ( ++p == pe )
		goto _test_eof6;
case 6:
	switch( (*p) ) {
		case 0: goto tr2;
		case 32: goto tr2;
		case 67: goto tr6;
		case 99: goto tr6;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr10;
	} else if ( (*p) >= 9 )
		goto tr2;
	goto st0;
	}
	_test_eof2: cs = 2; goto _test_eof; 
	_test_eof3: cs = 3; goto _test_eof; 
	_test_eof4: cs = 4; goto _test_eof; 
	_test_eof5: cs = 5; goto _test_eof; 
	_test_eof6: cs = 6; goto _test_eof; 

	_test_eof: {}
	if ( p == eof )
	{
	switch ( cs ) {
	case 3: 
	{
    return String::create(state, str.c_str(), str.size());
  }
	break;
	case 2: 
	case 4: 
	case 6: 
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	{
    return String::create(state, str.c_str(), str.size());
  }
	break;
	case 5: 
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_ELEMENTS(Integer, pack::integer, MASK_BYTE);
  }
	{
    return String::create(state, str.c_str(), str.size());
  }
	break;
	}
	}

	_out: {}
	}



    if(pack_first_final && pack_error && pack_en_main) {
      // do nothing
    }

    return force_as<String>(Primitives::failure());
  }
}
