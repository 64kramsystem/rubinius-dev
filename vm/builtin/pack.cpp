
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of Array#pack.
 *
 * vim: filetype=cpp
 */

#include "vm/config.h"

#include "vm.hpp"
#include "object_utils.hpp"
#include "on_stack.hpp"

#include "builtin/array.hpp"
#include "builtin/exception.hpp"
#include "builtin/module.hpp"
#include "builtin/object.hpp"
#include "builtin/string.hpp"

namespace rubinius {
  namespace pack {
    static Object* integer(STATE, CallFrame* call_frame, Object* obj) {
      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      return G(rubinius)->send(state, call_frame, state->symbol("pack_to_int"), args);
    }

    static String* string_or_nil(STATE, CallFrame* call_frame, Object* obj) {
      Array* args = Array::create(state, 1);
      args->set(state, 0, obj);

      Object* result = G(rubinius)->send(state, call_frame,
            state->symbol("pack_to_str_or_nil"), args);

      if(!result) return 0;
      return as<String>(result);
    }
  }

#define BITS_LONG   (RBX_SIZEOF_LONG * 8)
#define BITS_64     (64)

#define CONVERT(T, v, m, b, n)    \
  if((n)->fixnum_p()) {           \
    v = (T)STRIP_FIXNUM_TAG(n);   \
  } else {                        \
    Bignum* big = as<Bignum>(n);  \
    big->verify_size(state, b);   \
    v = big->m();                 \
  }

#define CONVERT_TO_INT(n)   CONVERT(int, int_value, to_int, BITS_LONG, n)
#define CONVERT_TO_LONG(n)  CONVERT(long long, long_value, to_long_long, BITS_64, n)

#define PACK_INT_ELEMENTS(mask)   PACK_ELEMENTS(Integer, pack::integer, INT, mask)
#define PACK_LONG_ELEMENTS(mask)  PACK_ELEMENTS(Integer, pack::integer, LONG, mask)

#define PACK_ELEMENTS(T, coerce, size, format)  \
  for(; index < stop; index++) {                \
    Object* item = self->get(state, index);     \
    T* value = try_as<T>(item);                 \
    if(!value) {                                \
      item = coerce(state, call_frame, item);   \
      if(!item) return 0;                       \
      value = as<T>(item);                      \
    }                                           \
    CONVERT_TO_ ## size(value);                 \
    format;                                     \
  }

#define PACK_STRING_ELEMENT(coerce)  {                      \
  Object* item = self->get(state, index);                   \
  String* value = try_as<String>(item);                     \
  if(!value) {                                              \
    value = coerce(state, call_frame, item);                \
    if(!value) return 0;                                    \
  }                                                         \
  if(RTEST(value->tainted_p(state))) tainted = true;        \
  size_t size = value->size();                              \
  if(rest) count = size;                                    \
  if(count <= size) {                                       \
    str.append((const char*)value->byte_address(), count);  \
    count = 0;                                              \
  } else {                                                  \
    str.append((const char*)value->byte_address(), size);   \
    count = count - size;                                   \
  }                                                         \
  index++;                                                  \
}

#define BYTE1(x)        (((x) & 0x00000000000000ff))
#define BYTE2(x)        (((x) & 0x000000000000ff00) >> 8)
#define BYTE3(x)        (((x) & 0x0000000000ff0000) >> 16)
#define BYTE4(x)        (((x) & 0x00000000ff000000) >> 24)

#define BYTE5(x)        (((x) & 0x000000ff00000000LL) >> 32)
#define BYTE6(x)        (((x) & 0x0000ff0000000000LL) >> 40)
#define BYTE7(x)        (((x) & 0x00ff000000000000LL) >> 48)
#define BYTE8(x)        (((x) & 0xff00000000000000LL) >> 56)

#ifdef RBX_LITTLE_ENDIAN
# define MASK_16BITS     LE_MASK_16BITS
# define MASK_32BITS     LE_MASK_32BITS
# define MASK_64BITS     LE_MASK_64BITS
#else
# define MASK_16BITS     BE_MASK_16BITS
# define MASK_32BITS     BE_MASK_32BITS
# define MASK_64BITS     BE_MASK_64BITS
#endif

#define LE_MASK_64BITS              \
  str.push_back(BYTE1(long_value)); \
  str.push_back(BYTE2(long_value)); \
  str.push_back(BYTE3(long_value)); \
  str.push_back(BYTE4(long_value)); \
  str.push_back(BYTE5(long_value)); \
  str.push_back(BYTE6(long_value)); \
  str.push_back(BYTE7(long_value)); \
  str.push_back(BYTE8(long_value)); \

#define BE_MASK_64BITS              \
  str.push_back(BYTE8(long_value)); \
  str.push_back(BYTE7(long_value)); \
  str.push_back(BYTE6(long_value)); \
  str.push_back(BYTE5(long_value)); \
  str.push_back(BYTE4(long_value)); \
  str.push_back(BYTE3(long_value)); \
  str.push_back(BYTE2(long_value)); \
  str.push_back(BYTE1(long_value)); \

#define LE_MASK_32BITS             \
  str.push_back(BYTE1(int_value)); \
  str.push_back(BYTE2(int_value)); \
  str.push_back(BYTE3(int_value)); \
  str.push_back(BYTE4(int_value)); \

#define BE_MASK_32BITS             \
  str.push_back(BYTE4(int_value)); \
  str.push_back(BYTE3(int_value)); \
  str.push_back(BYTE2(int_value)); \
  str.push_back(BYTE1(int_value)); \

#define LE_MASK_16BITS             \
  str.push_back(BYTE1(int_value)); \
  str.push_back(BYTE2(int_value)); \

#define BE_MASK_16BITS             \
  str.push_back(BYTE2(int_value)); \
  str.push_back(BYTE1(int_value)); \

#define MASK_BYTE                  \
  str.push_back(BYTE1(int_value));

  String* Array::pack(STATE, String* directives, CallFrame* call_frame) {
    // Ragel-specific variables
    std::string d(directives->c_str(), directives->size());
    const char *p  = d.c_str();
    const char *pe = p + d.size();
    const char *eof = pe;
    int cs;

    // pack-specific variables
    Array* self = this;
    OnStack<1> sv(state, self);

    size_t index = 0;
    size_t count = 0;
    size_t stop = 0;
    bool rest = false;
    bool platform = false;
    bool tainted = false;

    int int_value = 0;
    long long long_value = 0;
    std::string str("");


static const short _pack_eof_actions[] = {
	0, 0, 2, 7, 8, 8, 11, 11, 
	14, 17, 22, 25, 28, 31, 34, 34, 
	37, 37, 40, 43, 46, 49, 49, 52, 
	52, 55, 55, 58, 58, 61, 61, 64, 
	64, 67, 67, 70, 67, 74, 64, 77, 
	61, 80, 58, 83, 55, 86, 52, 89, 
	49, 40, 92, 37, 95, 34, 25, 14, 
	98, 11, 101, 8, 2, 104, 2
};

static const int pack_start = 1;
static const int pack_first_final = 2;
static const int pack_error = 0;

static const int pack_en_main = 1;


	{
	cs = pack_start;
	}

	{
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	switch ( cs ) {
case 1:
	switch( (*p) ) {
		case 64: goto tr0;
		case 65: goto tr2;
		case 67: goto tr3;
		case 73: goto tr4;
		case 76: goto tr5;
		case 78: goto tr6;
		case 81: goto tr7;
		case 83: goto tr8;
		case 86: goto tr9;
		case 88: goto tr10;
		case 90: goto tr11;
		case 97: goto tr12;
		case 99: goto tr3;
		case 105: goto tr4;
		case 108: goto tr5;
		case 110: goto tr13;
		case 113: goto tr7;
		case 115: goto tr8;
		case 118: goto tr14;
		case 120: goto tr15;
	}
	goto tr1;
case 0:
	goto _out;
case 2:
	switch( (*p) ) {
		case 0: goto tr16;
		case 32: goto tr16;
		case 33: goto tr17;
		case 42: goto tr18;
		case 64: goto tr20;
		case 65: goto tr21;
		case 67: goto tr22;
		case 73: goto tr23;
		case 76: goto tr24;
		case 78: goto tr25;
		case 81: goto tr26;
		case 83: goto tr27;
		case 86: goto tr28;
		case 88: goto tr29;
		case 90: goto tr30;
		case 95: goto tr17;
		case 97: goto tr31;
		case 99: goto tr22;
		case 105: goto tr23;
		case 108: goto tr24;
		case 110: goto tr32;
		case 113: goto tr26;
		case 115: goto tr27;
		case 118: goto tr33;
		case 120: goto tr34;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr19;
	} else if ( (*p) >= 9 )
		goto tr16;
	goto tr1;
case 3:
	switch( (*p) ) {
		case 0: goto tr35;
		case 32: goto tr35;
		case 64: goto tr0;
		case 65: goto tr2;
		case 67: goto tr3;
		case 73: goto tr4;
		case 76: goto tr5;
		case 78: goto tr6;
		case 81: goto tr7;
		case 83: goto tr8;
		case 86: goto tr9;
		case 88: goto tr10;
		case 90: goto tr11;
		case 97: goto tr12;
		case 99: goto tr3;
		case 105: goto tr4;
		case 108: goto tr5;
		case 110: goto tr13;
		case 113: goto tr7;
		case 115: goto tr8;
		case 118: goto tr14;
		case 120: goto tr15;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr35;
	goto tr1;
case 4:
	switch( (*p) ) {
		case 0: goto tr36;
		case 32: goto tr36;
		case 33: goto tr37;
		case 42: goto tr38;
		case 64: goto tr40;
		case 65: goto tr41;
		case 67: goto tr42;
		case 73: goto tr43;
		case 76: goto tr44;
		case 78: goto tr45;
		case 81: goto tr46;
		case 83: goto tr47;
		case 86: goto tr48;
		case 88: goto tr49;
		case 90: goto tr50;
		case 95: goto tr37;
		case 97: goto tr51;
		case 99: goto tr42;
		case 105: goto tr43;
		case 108: goto tr44;
		case 110: goto tr52;
		case 113: goto tr46;
		case 115: goto tr47;
		case 118: goto tr53;
		case 120: goto tr54;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr39;
	} else if ( (*p) >= 9 )
		goto tr36;
	goto tr1;
case 5:
	switch( (*p) ) {
		case 0: goto tr36;
		case 32: goto tr36;
		case 64: goto tr40;
		case 65: goto tr41;
		case 67: goto tr42;
		case 73: goto tr43;
		case 76: goto tr44;
		case 78: goto tr45;
		case 81: goto tr46;
		case 83: goto tr47;
		case 86: goto tr48;
		case 88: goto tr49;
		case 90: goto tr50;
		case 97: goto tr51;
		case 99: goto tr42;
		case 105: goto tr43;
		case 108: goto tr44;
		case 110: goto tr52;
		case 113: goto tr46;
		case 115: goto tr47;
		case 118: goto tr53;
		case 120: goto tr54;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr36;
	goto tr1;
case 6:
	switch( (*p) ) {
		case 0: goto tr55;
		case 32: goto tr55;
		case 33: goto tr56;
		case 42: goto tr57;
		case 64: goto tr59;
		case 65: goto tr60;
		case 67: goto tr61;
		case 73: goto tr62;
		case 76: goto tr63;
		case 78: goto tr64;
		case 81: goto tr65;
		case 83: goto tr66;
		case 86: goto tr67;
		case 88: goto tr68;
		case 90: goto tr69;
		case 95: goto tr56;
		case 97: goto tr70;
		case 99: goto tr61;
		case 105: goto tr62;
		case 108: goto tr63;
		case 110: goto tr71;
		case 113: goto tr65;
		case 115: goto tr66;
		case 118: goto tr72;
		case 120: goto tr73;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr58;
	} else if ( (*p) >= 9 )
		goto tr55;
	goto tr1;
case 7:
	switch( (*p) ) {
		case 0: goto tr55;
		case 32: goto tr55;
		case 64: goto tr59;
		case 65: goto tr60;
		case 67: goto tr61;
		case 73: goto tr62;
		case 76: goto tr63;
		case 78: goto tr64;
		case 81: goto tr65;
		case 83: goto tr66;
		case 86: goto tr67;
		case 88: goto tr68;
		case 90: goto tr69;
		case 97: goto tr70;
		case 99: goto tr61;
		case 105: goto tr62;
		case 108: goto tr63;
		case 110: goto tr71;
		case 113: goto tr65;
		case 115: goto tr66;
		case 118: goto tr72;
		case 120: goto tr73;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr55;
	goto tr1;
case 8:
	switch( (*p) ) {
		case 0: goto tr74;
		case 32: goto tr74;
		case 33: goto tr75;
		case 42: goto tr76;
		case 64: goto tr78;
		case 65: goto tr79;
		case 67: goto tr80;
		case 73: goto tr81;
		case 76: goto tr82;
		case 78: goto tr83;
		case 81: goto tr84;
		case 83: goto tr85;
		case 86: goto tr86;
		case 88: goto tr87;
		case 90: goto tr88;
		case 95: goto tr75;
		case 97: goto tr89;
		case 99: goto tr80;
		case 105: goto tr81;
		case 108: goto tr82;
		case 110: goto tr90;
		case 113: goto tr84;
		case 115: goto tr85;
		case 118: goto tr91;
		case 120: goto tr92;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr77;
	} else if ( (*p) >= 9 )
		goto tr74;
	goto tr1;
case 9:
	switch( (*p) ) {
		case 0: goto tr93;
		case 32: goto tr93;
		case 42: goto tr94;
		case 64: goto tr96;
		case 65: goto tr97;
		case 67: goto tr98;
		case 73: goto tr99;
		case 76: goto tr100;
		case 78: goto tr101;
		case 81: goto tr102;
		case 83: goto tr103;
		case 86: goto tr104;
		case 88: goto tr105;
		case 90: goto tr106;
		case 97: goto tr107;
		case 99: goto tr98;
		case 105: goto tr99;
		case 108: goto tr100;
		case 110: goto tr108;
		case 113: goto tr102;
		case 115: goto tr103;
		case 118: goto tr109;
		case 120: goto tr110;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr95;
	} else if ( (*p) >= 9 )
		goto tr93;
	goto tr1;
case 10:
	switch( (*p) ) {
		case 0: goto tr111;
		case 32: goto tr111;
		case 64: goto tr112;
		case 65: goto tr113;
		case 67: goto tr114;
		case 73: goto tr115;
		case 76: goto tr116;
		case 78: goto tr117;
		case 81: goto tr118;
		case 83: goto tr119;
		case 86: goto tr120;
		case 88: goto tr121;
		case 90: goto tr122;
		case 97: goto tr123;
		case 99: goto tr114;
		case 105: goto tr115;
		case 108: goto tr116;
		case 110: goto tr124;
		case 113: goto tr118;
		case 115: goto tr119;
		case 118: goto tr125;
		case 120: goto tr126;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr111;
	goto tr1;
case 11:
	switch( (*p) ) {
		case 0: goto tr127;
		case 32: goto tr127;
		case 33: goto tr128;
		case 42: goto tr129;
		case 64: goto tr131;
		case 65: goto tr132;
		case 67: goto tr133;
		case 73: goto tr134;
		case 76: goto tr135;
		case 78: goto tr136;
		case 81: goto tr137;
		case 83: goto tr138;
		case 86: goto tr139;
		case 88: goto tr140;
		case 90: goto tr141;
		case 95: goto tr128;
		case 97: goto tr142;
		case 99: goto tr133;
		case 105: goto tr134;
		case 108: goto tr135;
		case 110: goto tr143;
		case 113: goto tr137;
		case 115: goto tr138;
		case 118: goto tr144;
		case 120: goto tr145;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr130;
	} else if ( (*p) >= 9 )
		goto tr127;
	goto tr1;
case 12:
	switch( (*p) ) {
		case 0: goto tr146;
		case 32: goto tr146;
		case 42: goto tr147;
		case 64: goto tr149;
		case 65: goto tr150;
		case 67: goto tr151;
		case 73: goto tr152;
		case 76: goto tr153;
		case 78: goto tr154;
		case 81: goto tr155;
		case 83: goto tr156;
		case 86: goto tr157;
		case 88: goto tr158;
		case 90: goto tr159;
		case 97: goto tr160;
		case 99: goto tr151;
		case 105: goto tr152;
		case 108: goto tr153;
		case 110: goto tr161;
		case 113: goto tr155;
		case 115: goto tr156;
		case 118: goto tr162;
		case 120: goto tr163;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr148;
	} else if ( (*p) >= 9 )
		goto tr146;
	goto tr1;
case 13:
	switch( (*p) ) {
		case 0: goto tr164;
		case 32: goto tr164;
		case 64: goto tr165;
		case 65: goto tr166;
		case 67: goto tr167;
		case 73: goto tr168;
		case 76: goto tr169;
		case 78: goto tr170;
		case 81: goto tr171;
		case 83: goto tr172;
		case 86: goto tr173;
		case 88: goto tr174;
		case 90: goto tr175;
		case 97: goto tr176;
		case 99: goto tr167;
		case 105: goto tr168;
		case 108: goto tr169;
		case 110: goto tr177;
		case 113: goto tr171;
		case 115: goto tr172;
		case 118: goto tr178;
		case 120: goto tr179;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr164;
	goto tr1;
case 14:
	switch( (*p) ) {
		case 0: goto tr180;
		case 32: goto tr180;
		case 33: goto tr181;
		case 42: goto tr182;
		case 64: goto tr184;
		case 65: goto tr185;
		case 67: goto tr186;
		case 73: goto tr187;
		case 76: goto tr188;
		case 78: goto tr189;
		case 81: goto tr190;
		case 83: goto tr191;
		case 86: goto tr192;
		case 88: goto tr193;
		case 90: goto tr194;
		case 95: goto tr181;
		case 97: goto tr195;
		case 99: goto tr186;
		case 105: goto tr187;
		case 108: goto tr188;
		case 110: goto tr196;
		case 113: goto tr190;
		case 115: goto tr191;
		case 118: goto tr197;
		case 120: goto tr198;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr183;
	} else if ( (*p) >= 9 )
		goto tr180;
	goto tr1;
case 15:
	switch( (*p) ) {
		case 0: goto tr180;
		case 32: goto tr180;
		case 64: goto tr184;
		case 65: goto tr185;
		case 67: goto tr186;
		case 73: goto tr187;
		case 76: goto tr188;
		case 78: goto tr189;
		case 81: goto tr190;
		case 83: goto tr191;
		case 86: goto tr192;
		case 88: goto tr193;
		case 90: goto tr194;
		case 97: goto tr195;
		case 99: goto tr186;
		case 105: goto tr187;
		case 108: goto tr188;
		case 110: goto tr196;
		case 113: goto tr190;
		case 115: goto tr191;
		case 118: goto tr197;
		case 120: goto tr198;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr180;
	goto tr1;
case 16:
	switch( (*p) ) {
		case 0: goto tr199;
		case 32: goto tr199;
		case 33: goto tr200;
		case 42: goto tr201;
		case 64: goto tr203;
		case 65: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 90: goto tr213;
		case 95: goto tr200;
		case 97: goto tr214;
		case 99: goto tr205;
		case 105: goto tr206;
		case 108: goto tr207;
		case 110: goto tr215;
		case 113: goto tr209;
		case 115: goto tr210;
		case 118: goto tr216;
		case 120: goto tr217;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr202;
	} else if ( (*p) >= 9 )
		goto tr199;
	goto tr1;
case 17:
	switch( (*p) ) {
		case 0: goto tr199;
		case 32: goto tr199;
		case 64: goto tr203;
		case 65: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 90: goto tr213;
		case 97: goto tr214;
		case 99: goto tr205;
		case 105: goto tr206;
		case 108: goto tr207;
		case 110: goto tr215;
		case 113: goto tr209;
		case 115: goto tr210;
		case 118: goto tr216;
		case 120: goto tr217;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr199;
	goto tr1;
case 18:
	switch( (*p) ) {
		case 0: goto tr218;
		case 32: goto tr218;
		case 33: goto tr219;
		case 42: goto tr220;
		case 64: goto tr222;
		case 65: goto tr223;
		case 67: goto tr224;
		case 73: goto tr225;
		case 76: goto tr226;
		case 78: goto tr227;
		case 81: goto tr228;
		case 83: goto tr229;
		case 86: goto tr230;
		case 88: goto tr231;
		case 90: goto tr232;
		case 95: goto tr219;
		case 97: goto tr233;
		case 99: goto tr224;
		case 105: goto tr225;
		case 108: goto tr226;
		case 110: goto tr234;
		case 113: goto tr228;
		case 115: goto tr229;
		case 118: goto tr235;
		case 120: goto tr236;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr221;
	} else if ( (*p) >= 9 )
		goto tr218;
	goto tr1;
case 19:
	switch( (*p) ) {
		case 0: goto tr237;
		case 32: goto tr237;
		case 42: goto tr238;
		case 64: goto tr240;
		case 65: goto tr241;
		case 67: goto tr242;
		case 73: goto tr243;
		case 76: goto tr244;
		case 78: goto tr245;
		case 81: goto tr246;
		case 83: goto tr247;
		case 86: goto tr248;
		case 88: goto tr249;
		case 90: goto tr250;
		case 97: goto tr251;
		case 99: goto tr242;
		case 105: goto tr243;
		case 108: goto tr244;
		case 110: goto tr252;
		case 113: goto tr246;
		case 115: goto tr247;
		case 118: goto tr253;
		case 120: goto tr254;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr239;
	} else if ( (*p) >= 9 )
		goto tr237;
	goto tr1;
case 20:
	switch( (*p) ) {
		case 0: goto tr255;
		case 32: goto tr255;
		case 64: goto tr256;
		case 65: goto tr257;
		case 67: goto tr258;
		case 73: goto tr259;
		case 76: goto tr260;
		case 78: goto tr261;
		case 81: goto tr262;
		case 83: goto tr263;
		case 86: goto tr264;
		case 88: goto tr265;
		case 90: goto tr266;
		case 97: goto tr267;
		case 99: goto tr258;
		case 105: goto tr259;
		case 108: goto tr260;
		case 110: goto tr268;
		case 113: goto tr262;
		case 115: goto tr263;
		case 118: goto tr269;
		case 120: goto tr270;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr255;
	goto tr1;
case 21:
	switch( (*p) ) {
		case 0: goto tr271;
		case 32: goto tr271;
		case 33: goto tr272;
		case 42: goto tr273;
		case 64: goto tr275;
		case 65: goto tr276;
		case 67: goto tr277;
		case 73: goto tr278;
		case 76: goto tr279;
		case 78: goto tr280;
		case 81: goto tr281;
		case 83: goto tr282;
		case 86: goto tr283;
		case 88: goto tr284;
		case 90: goto tr285;
		case 95: goto tr272;
		case 97: goto tr286;
		case 99: goto tr277;
		case 105: goto tr278;
		case 108: goto tr279;
		case 110: goto tr287;
		case 113: goto tr281;
		case 115: goto tr282;
		case 118: goto tr288;
		case 120: goto tr289;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr274;
	} else if ( (*p) >= 9 )
		goto tr271;
	goto tr1;
case 22:
	switch( (*p) ) {
		case 0: goto tr271;
		case 32: goto tr271;
		case 64: goto tr275;
		case 65: goto tr276;
		case 67: goto tr277;
		case 73: goto tr278;
		case 76: goto tr279;
		case 78: goto tr280;
		case 81: goto tr281;
		case 83: goto tr282;
		case 86: goto tr283;
		case 88: goto tr284;
		case 90: goto tr285;
		case 97: goto tr286;
		case 99: goto tr277;
		case 105: goto tr278;
		case 108: goto tr279;
		case 110: goto tr287;
		case 113: goto tr281;
		case 115: goto tr282;
		case 118: goto tr288;
		case 120: goto tr289;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr271;
	goto tr1;
case 23:
	switch( (*p) ) {
		case 0: goto tr290;
		case 32: goto tr290;
		case 33: goto tr291;
		case 42: goto tr292;
		case 64: goto tr294;
		case 65: goto tr295;
		case 67: goto tr296;
		case 73: goto tr297;
		case 76: goto tr298;
		case 78: goto tr299;
		case 81: goto tr300;
		case 83: goto tr301;
		case 86: goto tr302;
		case 88: goto tr303;
		case 90: goto tr304;
		case 95: goto tr291;
		case 97: goto tr305;
		case 99: goto tr296;
		case 105: goto tr297;
		case 108: goto tr298;
		case 110: goto tr306;
		case 113: goto tr300;
		case 115: goto tr301;
		case 118: goto tr307;
		case 120: goto tr308;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr293;
	} else if ( (*p) >= 9 )
		goto tr290;
	goto tr1;
case 24:
	switch( (*p) ) {
		case 0: goto tr290;
		case 32: goto tr290;
		case 64: goto tr294;
		case 65: goto tr295;
		case 67: goto tr296;
		case 73: goto tr297;
		case 76: goto tr298;
		case 78: goto tr299;
		case 81: goto tr300;
		case 83: goto tr301;
		case 86: goto tr302;
		case 88: goto tr303;
		case 90: goto tr304;
		case 97: goto tr305;
		case 99: goto tr296;
		case 105: goto tr297;
		case 108: goto tr298;
		case 110: goto tr306;
		case 113: goto tr300;
		case 115: goto tr301;
		case 118: goto tr307;
		case 120: goto tr308;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr290;
	goto tr1;
case 25:
	switch( (*p) ) {
		case 0: goto tr309;
		case 32: goto tr309;
		case 33: goto tr310;
		case 42: goto tr311;
		case 64: goto tr313;
		case 65: goto tr314;
		case 67: goto tr315;
		case 73: goto tr316;
		case 76: goto tr317;
		case 78: goto tr318;
		case 81: goto tr319;
		case 83: goto tr320;
		case 86: goto tr321;
		case 88: goto tr322;
		case 90: goto tr323;
		case 95: goto tr310;
		case 97: goto tr324;
		case 99: goto tr315;
		case 105: goto tr316;
		case 108: goto tr317;
		case 110: goto tr325;
		case 113: goto tr319;
		case 115: goto tr320;
		case 118: goto tr326;
		case 120: goto tr327;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr312;
	} else if ( (*p) >= 9 )
		goto tr309;
	goto tr1;
case 26:
	switch( (*p) ) {
		case 0: goto tr309;
		case 32: goto tr309;
		case 64: goto tr313;
		case 65: goto tr314;
		case 67: goto tr315;
		case 73: goto tr316;
		case 76: goto tr317;
		case 78: goto tr318;
		case 81: goto tr319;
		case 83: goto tr320;
		case 86: goto tr321;
		case 88: goto tr322;
		case 90: goto tr323;
		case 97: goto tr324;
		case 99: goto tr315;
		case 105: goto tr316;
		case 108: goto tr317;
		case 110: goto tr325;
		case 113: goto tr319;
		case 115: goto tr320;
		case 118: goto tr326;
		case 120: goto tr327;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr309;
	goto tr1;
case 27:
	switch( (*p) ) {
		case 0: goto tr328;
		case 32: goto tr328;
		case 33: goto tr329;
		case 42: goto tr330;
		case 64: goto tr332;
		case 65: goto tr333;
		case 67: goto tr334;
		case 73: goto tr335;
		case 76: goto tr336;
		case 78: goto tr337;
		case 81: goto tr338;
		case 83: goto tr339;
		case 86: goto tr340;
		case 88: goto tr341;
		case 90: goto tr342;
		case 95: goto tr329;
		case 97: goto tr343;
		case 99: goto tr334;
		case 105: goto tr335;
		case 108: goto tr336;
		case 110: goto tr344;
		case 113: goto tr338;
		case 115: goto tr339;
		case 118: goto tr345;
		case 120: goto tr346;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr331;
	} else if ( (*p) >= 9 )
		goto tr328;
	goto tr1;
case 28:
	switch( (*p) ) {
		case 0: goto tr328;
		case 32: goto tr328;
		case 64: goto tr332;
		case 65: goto tr333;
		case 67: goto tr334;
		case 73: goto tr335;
		case 76: goto tr336;
		case 78: goto tr337;
		case 81: goto tr338;
		case 83: goto tr339;
		case 86: goto tr340;
		case 88: goto tr341;
		case 90: goto tr342;
		case 97: goto tr343;
		case 99: goto tr334;
		case 105: goto tr335;
		case 108: goto tr336;
		case 110: goto tr344;
		case 113: goto tr338;
		case 115: goto tr339;
		case 118: goto tr345;
		case 120: goto tr346;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr328;
	goto tr1;
case 29:
	switch( (*p) ) {
		case 0: goto tr347;
		case 32: goto tr347;
		case 33: goto tr348;
		case 42: goto tr349;
		case 64: goto tr351;
		case 65: goto tr352;
		case 67: goto tr353;
		case 73: goto tr354;
		case 76: goto tr355;
		case 78: goto tr356;
		case 81: goto tr357;
		case 83: goto tr358;
		case 86: goto tr359;
		case 88: goto tr360;
		case 90: goto tr361;
		case 95: goto tr348;
		case 97: goto tr362;
		case 99: goto tr353;
		case 105: goto tr354;
		case 108: goto tr355;
		case 110: goto tr363;
		case 113: goto tr357;
		case 115: goto tr358;
		case 118: goto tr364;
		case 120: goto tr365;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr350;
	} else if ( (*p) >= 9 )
		goto tr347;
	goto tr1;
case 30:
	switch( (*p) ) {
		case 0: goto tr347;
		case 32: goto tr347;
		case 64: goto tr351;
		case 65: goto tr352;
		case 67: goto tr353;
		case 73: goto tr354;
		case 76: goto tr355;
		case 78: goto tr356;
		case 81: goto tr357;
		case 83: goto tr358;
		case 86: goto tr359;
		case 88: goto tr360;
		case 90: goto tr361;
		case 97: goto tr362;
		case 99: goto tr353;
		case 105: goto tr354;
		case 108: goto tr355;
		case 110: goto tr363;
		case 113: goto tr357;
		case 115: goto tr358;
		case 118: goto tr364;
		case 120: goto tr365;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr347;
	goto tr1;
case 31:
	switch( (*p) ) {
		case 0: goto tr366;
		case 32: goto tr366;
		case 33: goto tr367;
		case 42: goto tr368;
		case 64: goto tr370;
		case 65: goto tr371;
		case 67: goto tr372;
		case 73: goto tr373;
		case 76: goto tr374;
		case 78: goto tr375;
		case 81: goto tr376;
		case 83: goto tr377;
		case 86: goto tr378;
		case 88: goto tr379;
		case 90: goto tr380;
		case 95: goto tr367;
		case 97: goto tr381;
		case 99: goto tr372;
		case 105: goto tr373;
		case 108: goto tr374;
		case 110: goto tr382;
		case 113: goto tr376;
		case 115: goto tr377;
		case 118: goto tr383;
		case 120: goto tr384;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr369;
	} else if ( (*p) >= 9 )
		goto tr366;
	goto tr1;
case 32:
	switch( (*p) ) {
		case 0: goto tr366;
		case 32: goto tr366;
		case 64: goto tr370;
		case 65: goto tr371;
		case 67: goto tr372;
		case 73: goto tr373;
		case 76: goto tr374;
		case 78: goto tr375;
		case 81: goto tr376;
		case 83: goto tr377;
		case 86: goto tr378;
		case 88: goto tr379;
		case 90: goto tr380;
		case 97: goto tr381;
		case 99: goto tr372;
		case 105: goto tr373;
		case 108: goto tr374;
		case 110: goto tr382;
		case 113: goto tr376;
		case 115: goto tr377;
		case 118: goto tr383;
		case 120: goto tr384;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr366;
	goto tr1;
case 33:
	switch( (*p) ) {
		case 0: goto tr385;
		case 32: goto tr385;
		case 33: goto tr386;
		case 42: goto tr387;
		case 64: goto tr389;
		case 65: goto tr390;
		case 67: goto tr391;
		case 73: goto tr392;
		case 76: goto tr393;
		case 78: goto tr394;
		case 81: goto tr395;
		case 83: goto tr396;
		case 86: goto tr397;
		case 88: goto tr398;
		case 90: goto tr399;
		case 95: goto tr386;
		case 97: goto tr400;
		case 99: goto tr391;
		case 105: goto tr392;
		case 108: goto tr393;
		case 110: goto tr401;
		case 113: goto tr395;
		case 115: goto tr396;
		case 118: goto tr402;
		case 120: goto tr403;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr388;
	} else if ( (*p) >= 9 )
		goto tr385;
	goto tr1;
case 34:
	switch( (*p) ) {
		case 0: goto tr385;
		case 32: goto tr385;
		case 64: goto tr389;
		case 65: goto tr390;
		case 67: goto tr391;
		case 73: goto tr392;
		case 76: goto tr393;
		case 78: goto tr394;
		case 81: goto tr395;
		case 83: goto tr396;
		case 86: goto tr397;
		case 88: goto tr398;
		case 90: goto tr399;
		case 97: goto tr400;
		case 99: goto tr391;
		case 105: goto tr392;
		case 108: goto tr393;
		case 110: goto tr401;
		case 113: goto tr395;
		case 115: goto tr396;
		case 118: goto tr402;
		case 120: goto tr403;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr385;
	goto tr1;
case 35:
	switch( (*p) ) {
		case 0: goto tr404;
		case 32: goto tr404;
		case 64: goto tr405;
		case 65: goto tr406;
		case 67: goto tr407;
		case 73: goto tr408;
		case 76: goto tr409;
		case 78: goto tr410;
		case 81: goto tr411;
		case 83: goto tr412;
		case 86: goto tr413;
		case 88: goto tr414;
		case 90: goto tr415;
		case 97: goto tr416;
		case 99: goto tr407;
		case 105: goto tr408;
		case 108: goto tr409;
		case 110: goto tr417;
		case 113: goto tr411;
		case 115: goto tr412;
		case 118: goto tr418;
		case 120: goto tr419;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr404;
	goto tr1;
case 36:
	switch( (*p) ) {
		case 0: goto tr385;
		case 32: goto tr385;
		case 64: goto tr389;
		case 65: goto tr390;
		case 67: goto tr391;
		case 73: goto tr392;
		case 76: goto tr393;
		case 78: goto tr394;
		case 81: goto tr395;
		case 83: goto tr396;
		case 86: goto tr397;
		case 88: goto tr398;
		case 90: goto tr399;
		case 97: goto tr400;
		case 99: goto tr391;
		case 105: goto tr392;
		case 108: goto tr393;
		case 110: goto tr401;
		case 113: goto tr395;
		case 115: goto tr396;
		case 118: goto tr402;
		case 120: goto tr403;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr420;
	} else if ( (*p) >= 9 )
		goto tr385;
	goto tr1;
case 37:
	switch( (*p) ) {
		case 0: goto tr421;
		case 32: goto tr421;
		case 64: goto tr422;
		case 65: goto tr423;
		case 67: goto tr424;
		case 73: goto tr425;
		case 76: goto tr426;
		case 78: goto tr427;
		case 81: goto tr428;
		case 83: goto tr429;
		case 86: goto tr430;
		case 88: goto tr431;
		case 90: goto tr432;
		case 97: goto tr433;
		case 99: goto tr424;
		case 105: goto tr425;
		case 108: goto tr426;
		case 110: goto tr434;
		case 113: goto tr428;
		case 115: goto tr429;
		case 118: goto tr435;
		case 120: goto tr436;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr421;
	goto tr1;
case 38:
	switch( (*p) ) {
		case 0: goto tr366;
		case 32: goto tr366;
		case 64: goto tr370;
		case 65: goto tr371;
		case 67: goto tr372;
		case 73: goto tr373;
		case 76: goto tr374;
		case 78: goto tr375;
		case 81: goto tr376;
		case 83: goto tr377;
		case 86: goto tr378;
		case 88: goto tr379;
		case 90: goto tr380;
		case 97: goto tr381;
		case 99: goto tr372;
		case 105: goto tr373;
		case 108: goto tr374;
		case 110: goto tr382;
		case 113: goto tr376;
		case 115: goto tr377;
		case 118: goto tr383;
		case 120: goto tr384;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr437;
	} else if ( (*p) >= 9 )
		goto tr366;
	goto tr1;
case 39:
	switch( (*p) ) {
		case 0: goto tr438;
		case 32: goto tr438;
		case 64: goto tr439;
		case 65: goto tr440;
		case 67: goto tr441;
		case 73: goto tr442;
		case 76: goto tr443;
		case 78: goto tr444;
		case 81: goto tr445;
		case 83: goto tr446;
		case 86: goto tr447;
		case 88: goto tr448;
		case 90: goto tr449;
		case 97: goto tr450;
		case 99: goto tr441;
		case 105: goto tr442;
		case 108: goto tr443;
		case 110: goto tr451;
		case 113: goto tr445;
		case 115: goto tr446;
		case 118: goto tr452;
		case 120: goto tr453;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr438;
	goto tr1;
case 40:
	switch( (*p) ) {
		case 0: goto tr347;
		case 32: goto tr347;
		case 64: goto tr351;
		case 65: goto tr352;
		case 67: goto tr353;
		case 73: goto tr354;
		case 76: goto tr355;
		case 78: goto tr356;
		case 81: goto tr357;
		case 83: goto tr358;
		case 86: goto tr359;
		case 88: goto tr360;
		case 90: goto tr361;
		case 97: goto tr362;
		case 99: goto tr353;
		case 105: goto tr354;
		case 108: goto tr355;
		case 110: goto tr363;
		case 113: goto tr357;
		case 115: goto tr358;
		case 118: goto tr364;
		case 120: goto tr365;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr454;
	} else if ( (*p) >= 9 )
		goto tr347;
	goto tr1;
case 41:
	switch( (*p) ) {
		case 0: goto tr455;
		case 32: goto tr455;
		case 64: goto tr456;
		case 65: goto tr457;
		case 67: goto tr458;
		case 73: goto tr459;
		case 76: goto tr460;
		case 78: goto tr461;
		case 81: goto tr462;
		case 83: goto tr463;
		case 86: goto tr464;
		case 88: goto tr465;
		case 90: goto tr466;
		case 97: goto tr467;
		case 99: goto tr458;
		case 105: goto tr459;
		case 108: goto tr460;
		case 110: goto tr468;
		case 113: goto tr462;
		case 115: goto tr463;
		case 118: goto tr469;
		case 120: goto tr470;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr455;
	goto tr1;
case 42:
	switch( (*p) ) {
		case 0: goto tr328;
		case 32: goto tr328;
		case 64: goto tr332;
		case 65: goto tr333;
		case 67: goto tr334;
		case 73: goto tr335;
		case 76: goto tr336;
		case 78: goto tr337;
		case 81: goto tr338;
		case 83: goto tr339;
		case 86: goto tr340;
		case 88: goto tr341;
		case 90: goto tr342;
		case 97: goto tr343;
		case 99: goto tr334;
		case 105: goto tr335;
		case 108: goto tr336;
		case 110: goto tr344;
		case 113: goto tr338;
		case 115: goto tr339;
		case 118: goto tr345;
		case 120: goto tr346;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr471;
	} else if ( (*p) >= 9 )
		goto tr328;
	goto tr1;
case 43:
	switch( (*p) ) {
		case 0: goto tr472;
		case 32: goto tr472;
		case 64: goto tr473;
		case 65: goto tr474;
		case 67: goto tr475;
		case 73: goto tr476;
		case 76: goto tr477;
		case 78: goto tr478;
		case 81: goto tr479;
		case 83: goto tr480;
		case 86: goto tr481;
		case 88: goto tr482;
		case 90: goto tr483;
		case 97: goto tr484;
		case 99: goto tr475;
		case 105: goto tr476;
		case 108: goto tr477;
		case 110: goto tr485;
		case 113: goto tr479;
		case 115: goto tr480;
		case 118: goto tr486;
		case 120: goto tr487;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr472;
	goto tr1;
case 44:
	switch( (*p) ) {
		case 0: goto tr309;
		case 32: goto tr309;
		case 64: goto tr313;
		case 65: goto tr314;
		case 67: goto tr315;
		case 73: goto tr316;
		case 76: goto tr317;
		case 78: goto tr318;
		case 81: goto tr319;
		case 83: goto tr320;
		case 86: goto tr321;
		case 88: goto tr322;
		case 90: goto tr323;
		case 97: goto tr324;
		case 99: goto tr315;
		case 105: goto tr316;
		case 108: goto tr317;
		case 110: goto tr325;
		case 113: goto tr319;
		case 115: goto tr320;
		case 118: goto tr326;
		case 120: goto tr327;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr488;
	} else if ( (*p) >= 9 )
		goto tr309;
	goto tr1;
case 45:
	switch( (*p) ) {
		case 0: goto tr489;
		case 32: goto tr489;
		case 64: goto tr490;
		case 65: goto tr491;
		case 67: goto tr492;
		case 73: goto tr493;
		case 76: goto tr494;
		case 78: goto tr495;
		case 81: goto tr496;
		case 83: goto tr497;
		case 86: goto tr498;
		case 88: goto tr499;
		case 90: goto tr500;
		case 97: goto tr501;
		case 99: goto tr492;
		case 105: goto tr493;
		case 108: goto tr494;
		case 110: goto tr502;
		case 113: goto tr496;
		case 115: goto tr497;
		case 118: goto tr503;
		case 120: goto tr504;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr489;
	goto tr1;
case 46:
	switch( (*p) ) {
		case 0: goto tr290;
		case 32: goto tr290;
		case 64: goto tr294;
		case 65: goto tr295;
		case 67: goto tr296;
		case 73: goto tr297;
		case 76: goto tr298;
		case 78: goto tr299;
		case 81: goto tr300;
		case 83: goto tr301;
		case 86: goto tr302;
		case 88: goto tr303;
		case 90: goto tr304;
		case 97: goto tr305;
		case 99: goto tr296;
		case 105: goto tr297;
		case 108: goto tr298;
		case 110: goto tr306;
		case 113: goto tr300;
		case 115: goto tr301;
		case 118: goto tr307;
		case 120: goto tr308;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr505;
	} else if ( (*p) >= 9 )
		goto tr290;
	goto tr1;
case 47:
	switch( (*p) ) {
		case 0: goto tr506;
		case 32: goto tr506;
		case 64: goto tr507;
		case 65: goto tr508;
		case 67: goto tr509;
		case 73: goto tr510;
		case 76: goto tr511;
		case 78: goto tr512;
		case 81: goto tr513;
		case 83: goto tr514;
		case 86: goto tr515;
		case 88: goto tr516;
		case 90: goto tr517;
		case 97: goto tr518;
		case 99: goto tr509;
		case 105: goto tr510;
		case 108: goto tr511;
		case 110: goto tr519;
		case 113: goto tr513;
		case 115: goto tr514;
		case 118: goto tr520;
		case 120: goto tr521;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr506;
	goto tr1;
case 48:
	switch( (*p) ) {
		case 0: goto tr271;
		case 32: goto tr271;
		case 64: goto tr275;
		case 65: goto tr276;
		case 67: goto tr277;
		case 73: goto tr278;
		case 76: goto tr279;
		case 78: goto tr280;
		case 81: goto tr281;
		case 83: goto tr282;
		case 86: goto tr283;
		case 88: goto tr284;
		case 90: goto tr285;
		case 97: goto tr286;
		case 99: goto tr277;
		case 105: goto tr278;
		case 108: goto tr279;
		case 110: goto tr287;
		case 113: goto tr281;
		case 115: goto tr282;
		case 118: goto tr288;
		case 120: goto tr289;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr522;
	} else if ( (*p) >= 9 )
		goto tr271;
	goto tr1;
case 49:
	switch( (*p) ) {
		case 0: goto tr218;
		case 32: goto tr218;
		case 64: goto tr222;
		case 65: goto tr223;
		case 67: goto tr224;
		case 73: goto tr225;
		case 76: goto tr226;
		case 78: goto tr227;
		case 81: goto tr228;
		case 83: goto tr229;
		case 86: goto tr230;
		case 88: goto tr231;
		case 90: goto tr232;
		case 97: goto tr233;
		case 99: goto tr224;
		case 105: goto tr225;
		case 108: goto tr226;
		case 110: goto tr234;
		case 113: goto tr228;
		case 115: goto tr229;
		case 118: goto tr235;
		case 120: goto tr236;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr523;
	} else if ( (*p) >= 9 )
		goto tr218;
	goto tr1;
case 50:
	switch( (*p) ) {
		case 0: goto tr524;
		case 32: goto tr524;
		case 64: goto tr525;
		case 65: goto tr526;
		case 67: goto tr527;
		case 73: goto tr528;
		case 76: goto tr529;
		case 78: goto tr530;
		case 81: goto tr531;
		case 83: goto tr532;
		case 86: goto tr533;
		case 88: goto tr534;
		case 90: goto tr535;
		case 97: goto tr536;
		case 99: goto tr527;
		case 105: goto tr528;
		case 108: goto tr529;
		case 110: goto tr537;
		case 113: goto tr531;
		case 115: goto tr532;
		case 118: goto tr538;
		case 120: goto tr539;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr524;
	goto tr1;
case 51:
	switch( (*p) ) {
		case 0: goto tr199;
		case 32: goto tr199;
		case 64: goto tr203;
		case 65: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 90: goto tr213;
		case 97: goto tr214;
		case 99: goto tr205;
		case 105: goto tr206;
		case 108: goto tr207;
		case 110: goto tr215;
		case 113: goto tr209;
		case 115: goto tr210;
		case 118: goto tr216;
		case 120: goto tr217;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr540;
	} else if ( (*p) >= 9 )
		goto tr199;
	goto tr1;
case 52:
	switch( (*p) ) {
		case 0: goto tr541;
		case 32: goto tr541;
		case 64: goto tr542;
		case 65: goto tr543;
		case 67: goto tr544;
		case 73: goto tr545;
		case 76: goto tr546;
		case 78: goto tr547;
		case 81: goto tr548;
		case 83: goto tr549;
		case 86: goto tr550;
		case 88: goto tr551;
		case 90: goto tr552;
		case 97: goto tr553;
		case 99: goto tr544;
		case 105: goto tr545;
		case 108: goto tr546;
		case 110: goto tr554;
		case 113: goto tr548;
		case 115: goto tr549;
		case 118: goto tr555;
		case 120: goto tr556;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr541;
	goto tr1;
case 53:
	switch( (*p) ) {
		case 0: goto tr180;
		case 32: goto tr180;
		case 64: goto tr184;
		case 65: goto tr185;
		case 67: goto tr186;
		case 73: goto tr187;
		case 76: goto tr188;
		case 78: goto tr189;
		case 81: goto tr190;
		case 83: goto tr191;
		case 86: goto tr192;
		case 88: goto tr193;
		case 90: goto tr194;
		case 97: goto tr195;
		case 99: goto tr186;
		case 105: goto tr187;
		case 108: goto tr188;
		case 110: goto tr196;
		case 113: goto tr190;
		case 115: goto tr191;
		case 118: goto tr197;
		case 120: goto tr198;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr557;
	} else if ( (*p) >= 9 )
		goto tr180;
	goto tr1;
case 54:
	switch( (*p) ) {
		case 0: goto tr127;
		case 32: goto tr127;
		case 64: goto tr131;
		case 65: goto tr132;
		case 67: goto tr133;
		case 73: goto tr134;
		case 76: goto tr135;
		case 78: goto tr136;
		case 81: goto tr137;
		case 83: goto tr138;
		case 86: goto tr139;
		case 88: goto tr140;
		case 90: goto tr141;
		case 97: goto tr142;
		case 99: goto tr133;
		case 105: goto tr134;
		case 108: goto tr135;
		case 110: goto tr143;
		case 113: goto tr137;
		case 115: goto tr138;
		case 118: goto tr144;
		case 120: goto tr145;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr558;
	} else if ( (*p) >= 9 )
		goto tr127;
	goto tr1;
case 55:
	switch( (*p) ) {
		case 0: goto tr74;
		case 32: goto tr74;
		case 64: goto tr78;
		case 65: goto tr79;
		case 67: goto tr80;
		case 73: goto tr81;
		case 76: goto tr82;
		case 78: goto tr83;
		case 81: goto tr84;
		case 83: goto tr85;
		case 86: goto tr86;
		case 88: goto tr87;
		case 90: goto tr88;
		case 97: goto tr89;
		case 99: goto tr80;
		case 105: goto tr81;
		case 108: goto tr82;
		case 110: goto tr90;
		case 113: goto tr84;
		case 115: goto tr85;
		case 118: goto tr91;
		case 120: goto tr92;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr559;
	} else if ( (*p) >= 9 )
		goto tr74;
	goto tr1;
case 56:
	switch( (*p) ) {
		case 0: goto tr560;
		case 32: goto tr560;
		case 64: goto tr561;
		case 65: goto tr562;
		case 67: goto tr563;
		case 73: goto tr564;
		case 76: goto tr565;
		case 78: goto tr566;
		case 81: goto tr567;
		case 83: goto tr568;
		case 86: goto tr569;
		case 88: goto tr570;
		case 90: goto tr571;
		case 97: goto tr572;
		case 99: goto tr563;
		case 105: goto tr564;
		case 108: goto tr565;
		case 110: goto tr573;
		case 113: goto tr567;
		case 115: goto tr568;
		case 118: goto tr574;
		case 120: goto tr575;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr560;
	goto tr1;
case 57:
	switch( (*p) ) {
		case 0: goto tr55;
		case 32: goto tr55;
		case 64: goto tr59;
		case 65: goto tr60;
		case 67: goto tr61;
		case 73: goto tr62;
		case 76: goto tr63;
		case 78: goto tr64;
		case 81: goto tr65;
		case 83: goto tr66;
		case 86: goto tr67;
		case 88: goto tr68;
		case 90: goto tr69;
		case 97: goto tr70;
		case 99: goto tr61;
		case 105: goto tr62;
		case 108: goto tr63;
		case 110: goto tr71;
		case 113: goto tr65;
		case 115: goto tr66;
		case 118: goto tr72;
		case 120: goto tr73;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr576;
	} else if ( (*p) >= 9 )
		goto tr55;
	goto tr1;
case 58:
	switch( (*p) ) {
		case 0: goto tr577;
		case 32: goto tr577;
		case 64: goto tr578;
		case 65: goto tr579;
		case 67: goto tr580;
		case 73: goto tr581;
		case 76: goto tr582;
		case 78: goto tr583;
		case 81: goto tr584;
		case 83: goto tr585;
		case 86: goto tr586;
		case 88: goto tr587;
		case 90: goto tr588;
		case 97: goto tr589;
		case 99: goto tr580;
		case 105: goto tr581;
		case 108: goto tr582;
		case 110: goto tr590;
		case 113: goto tr584;
		case 115: goto tr585;
		case 118: goto tr591;
		case 120: goto tr592;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr577;
	goto tr1;
case 59:
	switch( (*p) ) {
		case 0: goto tr36;
		case 32: goto tr36;
		case 64: goto tr40;
		case 65: goto tr41;
		case 67: goto tr42;
		case 73: goto tr43;
		case 76: goto tr44;
		case 78: goto tr45;
		case 81: goto tr46;
		case 83: goto tr47;
		case 86: goto tr48;
		case 88: goto tr49;
		case 90: goto tr50;
		case 97: goto tr51;
		case 99: goto tr42;
		case 105: goto tr43;
		case 108: goto tr44;
		case 110: goto tr52;
		case 113: goto tr46;
		case 115: goto tr47;
		case 118: goto tr53;
		case 120: goto tr54;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr593;
	} else if ( (*p) >= 9 )
		goto tr36;
	goto tr1;
case 60:
	switch( (*p) ) {
		case 0: goto tr16;
		case 32: goto tr16;
		case 64: goto tr20;
		case 65: goto tr21;
		case 67: goto tr22;
		case 73: goto tr23;
		case 76: goto tr24;
		case 78: goto tr25;
		case 81: goto tr26;
		case 83: goto tr27;
		case 86: goto tr28;
		case 88: goto tr29;
		case 90: goto tr30;
		case 97: goto tr31;
		case 99: goto tr22;
		case 105: goto tr23;
		case 108: goto tr24;
		case 110: goto tr32;
		case 113: goto tr26;
		case 115: goto tr27;
		case 118: goto tr33;
		case 120: goto tr34;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr16;
	goto tr1;
case 61:
	switch( (*p) ) {
		case 0: goto tr594;
		case 32: goto tr594;
		case 64: goto tr595;
		case 65: goto tr596;
		case 67: goto tr597;
		case 73: goto tr598;
		case 76: goto tr599;
		case 78: goto tr600;
		case 81: goto tr601;
		case 83: goto tr602;
		case 86: goto tr603;
		case 88: goto tr604;
		case 90: goto tr605;
		case 97: goto tr606;
		case 99: goto tr597;
		case 105: goto tr598;
		case 108: goto tr599;
		case 110: goto tr607;
		case 113: goto tr601;
		case 115: goto tr602;
		case 118: goto tr608;
		case 120: goto tr609;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr594;
	goto tr1;
case 62:
	switch( (*p) ) {
		case 0: goto tr16;
		case 32: goto tr16;
		case 64: goto tr20;
		case 65: goto tr21;
		case 67: goto tr22;
		case 73: goto tr23;
		case 76: goto tr24;
		case 78: goto tr25;
		case 81: goto tr26;
		case 83: goto tr27;
		case 86: goto tr28;
		case 88: goto tr29;
		case 90: goto tr30;
		case 97: goto tr31;
		case 99: goto tr22;
		case 105: goto tr23;
		case 108: goto tr24;
		case 110: goto tr32;
		case 113: goto tr26;
		case 115: goto tr27;
		case 118: goto tr33;
		case 120: goto tr34;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr610;
	} else if ( (*p) >= 9 )
		goto tr16;
	goto tr1;
	}

	tr1: cs = 0; goto _again;
	tr0: cs = 2; goto f0;
	tr20: cs = 2; goto f5;
	tr40: cs = 2; goto f9;
	tr59: cs = 2; goto f12;
	tr78: cs = 2; goto f15;
	tr96: cs = 2; goto f20;
	tr112: cs = 2; goto f23;
	tr131: cs = 2; goto f26;
	tr149: cs = 2; goto f29;
	tr165: cs = 2; goto f32;
	tr184: cs = 2; goto f35;
	tr203: cs = 2; goto f38;
	tr222: cs = 2; goto f41;
	tr240: cs = 2; goto f44;
	tr256: cs = 2; goto f47;
	tr275: cs = 2; goto f50;
	tr294: cs = 2; goto f53;
	tr313: cs = 2; goto f56;
	tr332: cs = 2; goto f59;
	tr351: cs = 2; goto f62;
	tr370: cs = 2; goto f65;
	tr389: cs = 2; goto f68;
	tr405: cs = 2; goto f71;
	tr422: cs = 2; goto f75;
	tr439: cs = 2; goto f78;
	tr456: cs = 2; goto f81;
	tr473: cs = 2; goto f84;
	tr490: cs = 2; goto f87;
	tr507: cs = 2; goto f90;
	tr525: cs = 2; goto f93;
	tr542: cs = 2; goto f96;
	tr561: cs = 2; goto f99;
	tr578: cs = 2; goto f102;
	tr595: cs = 2; goto f105;
	tr35: cs = 3; goto _again;
	tr16: cs = 3; goto f2;
	tr36: cs = 3; goto f8;
	tr55: cs = 3; goto f11;
	tr74: cs = 3; goto f14;
	tr93: cs = 3; goto f17;
	tr111: cs = 3; goto f22;
	tr127: cs = 3; goto f25;
	tr146: cs = 3; goto f28;
	tr164: cs = 3; goto f31;
	tr180: cs = 3; goto f34;
	tr199: cs = 3; goto f37;
	tr218: cs = 3; goto f40;
	tr237: cs = 3; goto f43;
	tr255: cs = 3; goto f46;
	tr271: cs = 3; goto f49;
	tr290: cs = 3; goto f52;
	tr309: cs = 3; goto f55;
	tr328: cs = 3; goto f58;
	tr347: cs = 3; goto f61;
	tr366: cs = 3; goto f64;
	tr385: cs = 3; goto f67;
	tr404: cs = 3; goto f70;
	tr421: cs = 3; goto f74;
	tr438: cs = 3; goto f77;
	tr455: cs = 3; goto f80;
	tr472: cs = 3; goto f83;
	tr489: cs = 3; goto f86;
	tr506: cs = 3; goto f89;
	tr524: cs = 3; goto f92;
	tr541: cs = 3; goto f95;
	tr560: cs = 3; goto f98;
	tr577: cs = 3; goto f101;
	tr594: cs = 3; goto f104;
	tr2: cs = 4; goto f0;
	tr21: cs = 4; goto f5;
	tr41: cs = 4; goto f9;
	tr60: cs = 4; goto f12;
	tr79: cs = 4; goto f15;
	tr97: cs = 4; goto f20;
	tr113: cs = 4; goto f23;
	tr132: cs = 4; goto f26;
	tr150: cs = 4; goto f29;
	tr166: cs = 4; goto f32;
	tr185: cs = 4; goto f35;
	tr204: cs = 4; goto f38;
	tr223: cs = 4; goto f41;
	tr241: cs = 4; goto f44;
	tr257: cs = 4; goto f47;
	tr276: cs = 4; goto f50;
	tr295: cs = 4; goto f53;
	tr314: cs = 4; goto f56;
	tr333: cs = 4; goto f59;
	tr352: cs = 4; goto f62;
	tr371: cs = 4; goto f65;
	tr390: cs = 4; goto f68;
	tr406: cs = 4; goto f71;
	tr423: cs = 4; goto f75;
	tr440: cs = 4; goto f78;
	tr457: cs = 4; goto f81;
	tr474: cs = 4; goto f84;
	tr491: cs = 4; goto f87;
	tr508: cs = 4; goto f90;
	tr526: cs = 4; goto f93;
	tr543: cs = 4; goto f96;
	tr562: cs = 4; goto f99;
	tr579: cs = 4; goto f102;
	tr596: cs = 4; goto f105;
	tr37: cs = 5; goto f3;
	tr3: cs = 6; goto f0;
	tr22: cs = 6; goto f5;
	tr42: cs = 6; goto f9;
	tr61: cs = 6; goto f12;
	tr80: cs = 6; goto f15;
	tr98: cs = 6; goto f20;
	tr114: cs = 6; goto f23;
	tr133: cs = 6; goto f26;
	tr151: cs = 6; goto f29;
	tr167: cs = 6; goto f32;
	tr186: cs = 6; goto f35;
	tr205: cs = 6; goto f38;
	tr224: cs = 6; goto f41;
	tr242: cs = 6; goto f44;
	tr258: cs = 6; goto f47;
	tr277: cs = 6; goto f50;
	tr296: cs = 6; goto f53;
	tr315: cs = 6; goto f56;
	tr334: cs = 6; goto f59;
	tr353: cs = 6; goto f62;
	tr372: cs = 6; goto f65;
	tr391: cs = 6; goto f68;
	tr407: cs = 6; goto f71;
	tr424: cs = 6; goto f75;
	tr441: cs = 6; goto f78;
	tr458: cs = 6; goto f81;
	tr475: cs = 6; goto f84;
	tr492: cs = 6; goto f87;
	tr509: cs = 6; goto f90;
	tr527: cs = 6; goto f93;
	tr544: cs = 6; goto f96;
	tr563: cs = 6; goto f99;
	tr580: cs = 6; goto f102;
	tr597: cs = 6; goto f105;
	tr56: cs = 7; goto f3;
	tr4: cs = 8; goto f0;
	tr23: cs = 8; goto f5;
	tr43: cs = 8; goto f9;
	tr62: cs = 8; goto f12;
	tr81: cs = 8; goto f15;
	tr99: cs = 8; goto f20;
	tr115: cs = 8; goto f23;
	tr134: cs = 8; goto f26;
	tr152: cs = 8; goto f29;
	tr168: cs = 8; goto f32;
	tr187: cs = 8; goto f35;
	tr206: cs = 8; goto f38;
	tr225: cs = 8; goto f41;
	tr243: cs = 8; goto f44;
	tr259: cs = 8; goto f47;
	tr278: cs = 8; goto f50;
	tr297: cs = 8; goto f53;
	tr316: cs = 8; goto f56;
	tr335: cs = 8; goto f59;
	tr354: cs = 8; goto f62;
	tr373: cs = 8; goto f65;
	tr392: cs = 8; goto f68;
	tr408: cs = 8; goto f71;
	tr425: cs = 8; goto f75;
	tr442: cs = 8; goto f78;
	tr459: cs = 8; goto f81;
	tr476: cs = 8; goto f84;
	tr493: cs = 8; goto f87;
	tr510: cs = 8; goto f90;
	tr528: cs = 8; goto f93;
	tr545: cs = 8; goto f96;
	tr564: cs = 8; goto f99;
	tr581: cs = 8; goto f102;
	tr598: cs = 8; goto f105;
	tr75: cs = 9; goto _again;
	tr76: cs = 10; goto _again;
	tr94: cs = 10; goto f18;
	tr5: cs = 11; goto f0;
	tr24: cs = 11; goto f5;
	tr44: cs = 11; goto f9;
	tr63: cs = 11; goto f12;
	tr82: cs = 11; goto f15;
	tr100: cs = 11; goto f20;
	tr116: cs = 11; goto f23;
	tr135: cs = 11; goto f26;
	tr153: cs = 11; goto f29;
	tr169: cs = 11; goto f32;
	tr188: cs = 11; goto f35;
	tr207: cs = 11; goto f38;
	tr226: cs = 11; goto f41;
	tr244: cs = 11; goto f44;
	tr260: cs = 11; goto f47;
	tr279: cs = 11; goto f50;
	tr298: cs = 11; goto f53;
	tr317: cs = 11; goto f56;
	tr336: cs = 11; goto f59;
	tr355: cs = 11; goto f62;
	tr374: cs = 11; goto f65;
	tr393: cs = 11; goto f68;
	tr409: cs = 11; goto f71;
	tr426: cs = 11; goto f75;
	tr443: cs = 11; goto f78;
	tr460: cs = 11; goto f81;
	tr477: cs = 11; goto f84;
	tr494: cs = 11; goto f87;
	tr511: cs = 11; goto f90;
	tr529: cs = 11; goto f93;
	tr546: cs = 11; goto f96;
	tr565: cs = 11; goto f99;
	tr582: cs = 11; goto f102;
	tr599: cs = 11; goto f105;
	tr128: cs = 12; goto _again;
	tr129: cs = 13; goto _again;
	tr147: cs = 13; goto f18;
	tr6: cs = 14; goto f0;
	tr25: cs = 14; goto f5;
	tr45: cs = 14; goto f9;
	tr64: cs = 14; goto f12;
	tr83: cs = 14; goto f15;
	tr101: cs = 14; goto f20;
	tr117: cs = 14; goto f23;
	tr136: cs = 14; goto f26;
	tr154: cs = 14; goto f29;
	tr170: cs = 14; goto f32;
	tr189: cs = 14; goto f35;
	tr208: cs = 14; goto f38;
	tr227: cs = 14; goto f41;
	tr245: cs = 14; goto f44;
	tr261: cs = 14; goto f47;
	tr280: cs = 14; goto f50;
	tr299: cs = 14; goto f53;
	tr318: cs = 14; goto f56;
	tr337: cs = 14; goto f59;
	tr356: cs = 14; goto f62;
	tr375: cs = 14; goto f65;
	tr394: cs = 14; goto f68;
	tr410: cs = 14; goto f71;
	tr427: cs = 14; goto f75;
	tr444: cs = 14; goto f78;
	tr461: cs = 14; goto f81;
	tr478: cs = 14; goto f84;
	tr495: cs = 14; goto f87;
	tr512: cs = 14; goto f90;
	tr530: cs = 14; goto f93;
	tr547: cs = 14; goto f96;
	tr566: cs = 14; goto f99;
	tr583: cs = 14; goto f102;
	tr600: cs = 14; goto f105;
	tr181: cs = 15; goto f3;
	tr7: cs = 16; goto f0;
	tr26: cs = 16; goto f5;
	tr46: cs = 16; goto f9;
	tr65: cs = 16; goto f12;
	tr84: cs = 16; goto f15;
	tr102: cs = 16; goto f20;
	tr118: cs = 16; goto f23;
	tr137: cs = 16; goto f26;
	tr155: cs = 16; goto f29;
	tr171: cs = 16; goto f32;
	tr190: cs = 16; goto f35;
	tr209: cs = 16; goto f38;
	tr228: cs = 16; goto f41;
	tr246: cs = 16; goto f44;
	tr262: cs = 16; goto f47;
	tr281: cs = 16; goto f50;
	tr300: cs = 16; goto f53;
	tr319: cs = 16; goto f56;
	tr338: cs = 16; goto f59;
	tr357: cs = 16; goto f62;
	tr376: cs = 16; goto f65;
	tr395: cs = 16; goto f68;
	tr411: cs = 16; goto f71;
	tr428: cs = 16; goto f75;
	tr445: cs = 16; goto f78;
	tr462: cs = 16; goto f81;
	tr479: cs = 16; goto f84;
	tr496: cs = 16; goto f87;
	tr513: cs = 16; goto f90;
	tr531: cs = 16; goto f93;
	tr548: cs = 16; goto f96;
	tr567: cs = 16; goto f99;
	tr584: cs = 16; goto f102;
	tr601: cs = 16; goto f105;
	tr200: cs = 17; goto f3;
	tr8: cs = 18; goto f0;
	tr27: cs = 18; goto f5;
	tr47: cs = 18; goto f9;
	tr66: cs = 18; goto f12;
	tr85: cs = 18; goto f15;
	tr103: cs = 18; goto f20;
	tr119: cs = 18; goto f23;
	tr138: cs = 18; goto f26;
	tr156: cs = 18; goto f29;
	tr172: cs = 18; goto f32;
	tr191: cs = 18; goto f35;
	tr210: cs = 18; goto f38;
	tr229: cs = 18; goto f41;
	tr247: cs = 18; goto f44;
	tr263: cs = 18; goto f47;
	tr282: cs = 18; goto f50;
	tr301: cs = 18; goto f53;
	tr320: cs = 18; goto f56;
	tr339: cs = 18; goto f59;
	tr358: cs = 18; goto f62;
	tr377: cs = 18; goto f65;
	tr396: cs = 18; goto f68;
	tr412: cs = 18; goto f71;
	tr429: cs = 18; goto f75;
	tr446: cs = 18; goto f78;
	tr463: cs = 18; goto f81;
	tr480: cs = 18; goto f84;
	tr497: cs = 18; goto f87;
	tr514: cs = 18; goto f90;
	tr532: cs = 18; goto f93;
	tr549: cs = 18; goto f96;
	tr568: cs = 18; goto f99;
	tr585: cs = 18; goto f102;
	tr602: cs = 18; goto f105;
	tr219: cs = 19; goto _again;
	tr220: cs = 20; goto _again;
	tr238: cs = 20; goto f18;
	tr9: cs = 21; goto f0;
	tr28: cs = 21; goto f5;
	tr48: cs = 21; goto f9;
	tr67: cs = 21; goto f12;
	tr86: cs = 21; goto f15;
	tr104: cs = 21; goto f20;
	tr120: cs = 21; goto f23;
	tr139: cs = 21; goto f26;
	tr157: cs = 21; goto f29;
	tr173: cs = 21; goto f32;
	tr192: cs = 21; goto f35;
	tr211: cs = 21; goto f38;
	tr230: cs = 21; goto f41;
	tr248: cs = 21; goto f44;
	tr264: cs = 21; goto f47;
	tr283: cs = 21; goto f50;
	tr302: cs = 21; goto f53;
	tr321: cs = 21; goto f56;
	tr340: cs = 21; goto f59;
	tr359: cs = 21; goto f62;
	tr378: cs = 21; goto f65;
	tr397: cs = 21; goto f68;
	tr413: cs = 21; goto f71;
	tr430: cs = 21; goto f75;
	tr447: cs = 21; goto f78;
	tr464: cs = 21; goto f81;
	tr481: cs = 21; goto f84;
	tr498: cs = 21; goto f87;
	tr515: cs = 21; goto f90;
	tr533: cs = 21; goto f93;
	tr550: cs = 21; goto f96;
	tr569: cs = 21; goto f99;
	tr586: cs = 21; goto f102;
	tr603: cs = 21; goto f105;
	tr272: cs = 22; goto f3;
	tr10: cs = 23; goto f0;
	tr29: cs = 23; goto f5;
	tr49: cs = 23; goto f9;
	tr68: cs = 23; goto f12;
	tr87: cs = 23; goto f15;
	tr105: cs = 23; goto f20;
	tr121: cs = 23; goto f23;
	tr140: cs = 23; goto f26;
	tr158: cs = 23; goto f29;
	tr174: cs = 23; goto f32;
	tr193: cs = 23; goto f35;
	tr212: cs = 23; goto f38;
	tr231: cs = 23; goto f41;
	tr249: cs = 23; goto f44;
	tr265: cs = 23; goto f47;
	tr284: cs = 23; goto f50;
	tr303: cs = 23; goto f53;
	tr322: cs = 23; goto f56;
	tr341: cs = 23; goto f59;
	tr360: cs = 23; goto f62;
	tr379: cs = 23; goto f65;
	tr398: cs = 23; goto f68;
	tr414: cs = 23; goto f71;
	tr431: cs = 23; goto f75;
	tr448: cs = 23; goto f78;
	tr465: cs = 23; goto f81;
	tr482: cs = 23; goto f84;
	tr499: cs = 23; goto f87;
	tr516: cs = 23; goto f90;
	tr534: cs = 23; goto f93;
	tr551: cs = 23; goto f96;
	tr570: cs = 23; goto f99;
	tr587: cs = 23; goto f102;
	tr604: cs = 23; goto f105;
	tr291: cs = 24; goto f3;
	tr11: cs = 25; goto f0;
	tr30: cs = 25; goto f5;
	tr50: cs = 25; goto f9;
	tr69: cs = 25; goto f12;
	tr88: cs = 25; goto f15;
	tr106: cs = 25; goto f20;
	tr122: cs = 25; goto f23;
	tr141: cs = 25; goto f26;
	tr159: cs = 25; goto f29;
	tr175: cs = 25; goto f32;
	tr194: cs = 25; goto f35;
	tr213: cs = 25; goto f38;
	tr232: cs = 25; goto f41;
	tr250: cs = 25; goto f44;
	tr266: cs = 25; goto f47;
	tr285: cs = 25; goto f50;
	tr304: cs = 25; goto f53;
	tr323: cs = 25; goto f56;
	tr342: cs = 25; goto f59;
	tr361: cs = 25; goto f62;
	tr380: cs = 25; goto f65;
	tr399: cs = 25; goto f68;
	tr415: cs = 25; goto f71;
	tr432: cs = 25; goto f75;
	tr449: cs = 25; goto f78;
	tr466: cs = 25; goto f81;
	tr483: cs = 25; goto f84;
	tr500: cs = 25; goto f87;
	tr517: cs = 25; goto f90;
	tr535: cs = 25; goto f93;
	tr552: cs = 25; goto f96;
	tr571: cs = 25; goto f99;
	tr588: cs = 25; goto f102;
	tr605: cs = 25; goto f105;
	tr310: cs = 26; goto f3;
	tr12: cs = 27; goto f0;
	tr31: cs = 27; goto f5;
	tr51: cs = 27; goto f9;
	tr70: cs = 27; goto f12;
	tr89: cs = 27; goto f15;
	tr107: cs = 27; goto f20;
	tr123: cs = 27; goto f23;
	tr142: cs = 27; goto f26;
	tr160: cs = 27; goto f29;
	tr176: cs = 27; goto f32;
	tr195: cs = 27; goto f35;
	tr214: cs = 27; goto f38;
	tr233: cs = 27; goto f41;
	tr251: cs = 27; goto f44;
	tr267: cs = 27; goto f47;
	tr286: cs = 27; goto f50;
	tr305: cs = 27; goto f53;
	tr324: cs = 27; goto f56;
	tr343: cs = 27; goto f59;
	tr362: cs = 27; goto f62;
	tr381: cs = 27; goto f65;
	tr400: cs = 27; goto f68;
	tr416: cs = 27; goto f71;
	tr433: cs = 27; goto f75;
	tr450: cs = 27; goto f78;
	tr467: cs = 27; goto f81;
	tr484: cs = 27; goto f84;
	tr501: cs = 27; goto f87;
	tr518: cs = 27; goto f90;
	tr536: cs = 27; goto f93;
	tr553: cs = 27; goto f96;
	tr572: cs = 27; goto f99;
	tr589: cs = 27; goto f102;
	tr606: cs = 27; goto f105;
	tr329: cs = 28; goto f3;
	tr13: cs = 29; goto f0;
	tr32: cs = 29; goto f5;
	tr52: cs = 29; goto f9;
	tr71: cs = 29; goto f12;
	tr90: cs = 29; goto f15;
	tr108: cs = 29; goto f20;
	tr124: cs = 29; goto f23;
	tr143: cs = 29; goto f26;
	tr161: cs = 29; goto f29;
	tr177: cs = 29; goto f32;
	tr196: cs = 29; goto f35;
	tr215: cs = 29; goto f38;
	tr234: cs = 29; goto f41;
	tr252: cs = 29; goto f44;
	tr268: cs = 29; goto f47;
	tr287: cs = 29; goto f50;
	tr306: cs = 29; goto f53;
	tr325: cs = 29; goto f56;
	tr344: cs = 29; goto f59;
	tr363: cs = 29; goto f62;
	tr382: cs = 29; goto f65;
	tr401: cs = 29; goto f68;
	tr417: cs = 29; goto f71;
	tr434: cs = 29; goto f75;
	tr451: cs = 29; goto f78;
	tr468: cs = 29; goto f81;
	tr485: cs = 29; goto f84;
	tr502: cs = 29; goto f87;
	tr519: cs = 29; goto f90;
	tr537: cs = 29; goto f93;
	tr554: cs = 29; goto f96;
	tr573: cs = 29; goto f99;
	tr590: cs = 29; goto f102;
	tr607: cs = 29; goto f105;
	tr348: cs = 30; goto f3;
	tr14: cs = 31; goto f0;
	tr33: cs = 31; goto f5;
	tr53: cs = 31; goto f9;
	tr72: cs = 31; goto f12;
	tr91: cs = 31; goto f15;
	tr109: cs = 31; goto f20;
	tr125: cs = 31; goto f23;
	tr144: cs = 31; goto f26;
	tr162: cs = 31; goto f29;
	tr178: cs = 31; goto f32;
	tr197: cs = 31; goto f35;
	tr216: cs = 31; goto f38;
	tr235: cs = 31; goto f41;
	tr253: cs = 31; goto f44;
	tr269: cs = 31; goto f47;
	tr288: cs = 31; goto f50;
	tr307: cs = 31; goto f53;
	tr326: cs = 31; goto f56;
	tr345: cs = 31; goto f59;
	tr364: cs = 31; goto f62;
	tr383: cs = 31; goto f65;
	tr402: cs = 31; goto f68;
	tr418: cs = 31; goto f71;
	tr435: cs = 31; goto f75;
	tr452: cs = 31; goto f78;
	tr469: cs = 31; goto f81;
	tr486: cs = 31; goto f84;
	tr503: cs = 31; goto f87;
	tr520: cs = 31; goto f90;
	tr538: cs = 31; goto f93;
	tr555: cs = 31; goto f96;
	tr574: cs = 31; goto f99;
	tr591: cs = 31; goto f102;
	tr608: cs = 31; goto f105;
	tr367: cs = 32; goto f3;
	tr15: cs = 33; goto f0;
	tr34: cs = 33; goto f5;
	tr54: cs = 33; goto f9;
	tr73: cs = 33; goto f12;
	tr92: cs = 33; goto f15;
	tr110: cs = 33; goto f20;
	tr126: cs = 33; goto f23;
	tr145: cs = 33; goto f26;
	tr163: cs = 33; goto f29;
	tr179: cs = 33; goto f32;
	tr198: cs = 33; goto f35;
	tr217: cs = 33; goto f38;
	tr236: cs = 33; goto f41;
	tr254: cs = 33; goto f44;
	tr270: cs = 33; goto f47;
	tr289: cs = 33; goto f50;
	tr308: cs = 33; goto f53;
	tr327: cs = 33; goto f56;
	tr346: cs = 33; goto f59;
	tr365: cs = 33; goto f62;
	tr384: cs = 33; goto f65;
	tr403: cs = 33; goto f68;
	tr419: cs = 33; goto f71;
	tr436: cs = 33; goto f75;
	tr453: cs = 33; goto f78;
	tr470: cs = 33; goto f81;
	tr487: cs = 33; goto f84;
	tr504: cs = 33; goto f87;
	tr521: cs = 33; goto f90;
	tr539: cs = 33; goto f93;
	tr556: cs = 33; goto f96;
	tr575: cs = 33; goto f99;
	tr592: cs = 33; goto f102;
	tr609: cs = 33; goto f105;
	tr386: cs = 34; goto f3;
	tr387: cs = 35; goto _again;
	tr388: cs = 36; goto f4;
	tr420: cs = 36; goto f72;
	tr368: cs = 37; goto _again;
	tr369: cs = 38; goto f4;
	tr437: cs = 38; goto f72;
	tr349: cs = 39; goto _again;
	tr350: cs = 40; goto f4;
	tr454: cs = 40; goto f72;
	tr330: cs = 41; goto _again;
	tr331: cs = 42; goto f4;
	tr471: cs = 42; goto f72;
	tr311: cs = 43; goto _again;
	tr312: cs = 44; goto f4;
	tr488: cs = 44; goto f72;
	tr292: cs = 45; goto _again;
	tr293: cs = 46; goto f4;
	tr505: cs = 46; goto f72;
	tr273: cs = 47; goto _again;
	tr274: cs = 48; goto f4;
	tr522: cs = 48; goto f72;
	tr221: cs = 49; goto f4;
	tr239: cs = 49; goto f19;
	tr523: cs = 49; goto f72;
	tr201: cs = 50; goto _again;
	tr202: cs = 51; goto f4;
	tr540: cs = 51; goto f72;
	tr182: cs = 52; goto _again;
	tr183: cs = 53; goto f4;
	tr557: cs = 53; goto f72;
	tr130: cs = 54; goto f4;
	tr148: cs = 54; goto f19;
	tr558: cs = 54; goto f72;
	tr77: cs = 55; goto f4;
	tr95: cs = 55; goto f19;
	tr559: cs = 55; goto f72;
	tr57: cs = 56; goto _again;
	tr58: cs = 57; goto f4;
	tr576: cs = 57; goto f72;
	tr38: cs = 58; goto _again;
	tr39: cs = 59; goto f4;
	tr593: cs = 59; goto f72;
	tr17: cs = 60; goto f3;
	tr18: cs = 61; goto _again;
	tr19: cs = 62; goto f4;
	tr610: cs = 62; goto f72;

f0:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f4:
	{
    count = (*p) - '0';
  }
	goto _again;
f72:
	{
    count = count * 10 + ((*p) - '0');
  }
	goto _again;
f18:
	{
    platform = true;
  }
	goto _again;
f52:
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	goto _again;
f67:
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	goto _again;
f2:
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	goto _again;
f3:
	{
#define NON_NATIVE_ERROR_SIZE 36

    char non_native_msg[NON_NATIVE_ERROR_SIZE];
    snprintf(non_native_msg, NON_NATIVE_ERROR_SIZE,
             "'%c' allowed only after types sSiIlL", *p);
    Exception::argument_error(state, non_native_msg);
  }
	goto _again;
f86:
	{
    rest = true;
  }
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	goto _again;
f70:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	goto _again;
f104:
	{
    rest = true;
  }
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	goto _again;
f19:
	{
    platform = true;
  }
	{
    count = (*p) - '0';
  }
	goto _again;
f11:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	goto _again;
f40:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	goto _again;
f14:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	goto _again;
f25:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	goto _again;
f61:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	goto _again;
f34:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	goto _again;
f64:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	goto _again;
f49:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	goto _again;
f37:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	goto _again;
f8:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	goto _again;
f58:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	goto _again;
f55:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	goto _again;
f53:
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f68:
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f5:
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f98:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	goto _again;
f46:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	goto _again;
f22:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	goto _again;
f31:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	goto _again;
f77:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	goto _again;
f95:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	goto _again;
f74:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	goto _again;
f89:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	goto _again;
f92:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	goto _again;
f101:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	goto _again;
f80:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	goto _again;
f83:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	goto _again;
f87:
	{
    rest = true;
  }
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f71:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f105:
	{
    rest = true;
  }
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f43:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	goto _again;
f17:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	goto _again;
f28:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	goto _again;
f12:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f41:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f15:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f26:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f62:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f35:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f65:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f50:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f38:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f9:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f59:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f56:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f99:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f47:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f23:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f32:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f78:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f96:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f75:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f90:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f93:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f102:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f81:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f84:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f44:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f20:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f29:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _pack_eof_actions[cs] ) {
	case 7:
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 52:
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 67:
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 2:
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 86:
	{
    rest = true;
  }
	{
#define INVALID_MOVE_ERROR_SIZE 48

    if(rest) count = 0;

    if(count > str.size()) {
      char invalid_move_msg[INVALID_MOVE_ERROR_SIZE];
      snprintf(invalid_move_msg, INVALID_MOVE_ERROR_SIZE,
               "X%d exceeds length of string", (int)count);
      Exception::argument_error(state, invalid_move_msg);
    }

    str.resize(str.size() - count);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 70:
	{
    rest = true;
  }
	{
    if(rest) count = 0;

    str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 104:
	{
    rest = true;
  }
	{
    if(rest) count = 1;

    if(count > str.size()) {
      str.append(count - str.size(), '\0');
    } else {
      str.resize(count);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 11:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 40:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 14:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 25:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 61:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 34:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 64:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 49:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 37:
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 8:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 58:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 55:
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 98:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_BYTE);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 46:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 22:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 31:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 77:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 95:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(BE_MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 74:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 89:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(LE_MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 92:
	{
    rest = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_LONG_ELEMENTS(MASK_64BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 101:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, ' ');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 80:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(count > 0) str.append(count, '\0');
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 83:
	{
    rest = true;
  }
	{
    if(index >= size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_STRING_ELEMENT(pack::string_or_nil);
    if(rest) {
      if(count == 0) str.append(1, '\0');
    } else {
      if(count > 0) str.append(count, '\0');
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 43:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_16BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 17:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    PACK_INT_ELEMENTS(MASK_32BITS);
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	case 28:
	{
    platform = true;
  }
	{
    stop = rest ? size() : index + count;
    if(stop > size()) {
      Exception::argument_error(state, "too few arguments");
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      PACK_INT_ELEMENTS(MASK_32BITS);
#else
      PACK_LONG_ELEMENTS(MASK_64BITS);
#endif
    } else {
      PACK_INT_ELEMENTS(MASK_32BITS);
    }
  }
	{
    String* result = String::create(state, str.c_str(), str.size());
    if(tainted) {
      result->taint(state);
      tainted = false;
    }
    return result;
  }
	break;
	}
	}

	_out: {}
	}



    if(pack_first_final && pack_error && pack_en_main) {
      // do nothing
    }

    return force_as<String>(Primitives::failure());
  }
}
