
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of String#unpack.
 *
 * vim: filetype=cpp
 */

#include "vm.hpp"
#include "object_utils.hpp"
#include "vm/config.h"

#include "builtin/array.hpp"
#include "builtin/exception.hpp"
#include "builtin/string.hpp"

namespace rubinius {

  namespace unpack {
    uint16_t swap16(uint16_t x) {
      return ((((x)&0xff)<<8) | (((x)>>8)&0xff));
    }

    uint32_t swap32(uint32_t x) {
      return ((((x)&0xff)<<24)
             |(((x)>>24)&0xff)
             |(((x)&0x0000ff00)<<8)
             |(((x)&0x00ff0000)>>8));
    }

    uint64_t swap64(uint64_t x) {
      return ((((x)&0x00000000000000ffLL)<<56)
             |(((x)&0xff00000000000000LL)>>56)
             |(((x)&0x000000000000ff00LL)<<40)
             |(((x)&0x00ff000000000000LL)>>40)
             |(((x)&0x0000000000ff0000LL)<<24)
             |(((x)&0x0000ff0000000000LL)>>24)
             |(((x)&0x00000000ff000000LL)<<8)
             |(((x)&0x000000ff00000000LL)>>8));
    }
  }

#define UNPACK_ELEMENTS(format, bits)                   \
  for(; index < stop; count--, index += width) {        \
    array->append(state, format(bits(bytes + index)));  \
  }

#define FIXNUM(b)         (Fixnum::from(b))
#define INTEGER(b)        (Integer::from(state, b))

#define SBYTE(p)          (*(int8_t*)(p))
#define UBYTE(p)          (*(uint8_t*)(p))

#define S16BITS(p)        (*(int16_t*)(p))
#define U16BITS(p)        (*(uint16_t*)(p))

#define S32BITS(p)        (*(int32_t*)(p))
#define U32BITS(p)        (*(uint32_t*)(p))

#define S64BITS(p)        (*(int64_t*)(p))
#define U64BITS(p)        (*(uint64_t*)(p))

#ifdef RBX_LITTLE_ENDIAN
# define LE_S16BITS(p)     (S16BITS(p))
# define LE_U16BITS(p)     (U16BITS(p))
# define LE_S32BITS(p)     (S32BITS(p))
# define LE_U32BITS(p)     (U32BITS(p))
# define LE_S64BITS(p)     (S64BITS(p))
# define LE_U64BITS(p)     (U64BITS(p))

# define BE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define BE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define BE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define BE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define BE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define BE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))
#else
# define LE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define LE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define LE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define LE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define LE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define LE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))

# define BE_S16BITS(p)     (S16BITS(p))
# define BE_U16BITS(p)     (U16BITS(p))
# define BE_S32BITS(p)     (S32BITS(p))
# define BE_U32BITS(p)     (U32BITS(p))
# define BE_S64BITS(p)     (S64BITS(p))
# define BE_U64BITS(p)     (U64BITS(p))
#endif

  Array* String::unpack(STATE, String* directives) {
    // Ragel-specific variables
    const char *p  = directives->c_str();
    const char *pe = p + directives->size();
    const char *eof = pe;
    int cs;

    // pack-specific variables
    uint8_t* bytes = byte_address();
    size_t index = 0;
    size_t stop = 0;
    size_t width = 0;
    int count = 0;
    bool rest = false;
    bool platform = false;
    Array* array = Array::create(state, 0);


static const short _unpack_eof_actions[] = {
	0, 0, 3, 9, 10, 10, 14, 18, 
	24, 28, 32, 36, 40, 40, 44, 44, 
	48, 52, 56, 60, 60, 64, 64, 68, 
	68, 72, 76, 80, 84, 88, 92, 96, 
	96, 100, 100, 104, 108, 112, 116, 116, 
	120, 120, 124, 120, 129, 116, 104, 133, 
	100, 137, 96, 84, 72, 141, 68, 145, 
	64, 149, 60, 48, 153, 44, 157, 40, 
	28, 14, 161, 10, 3, 165, 3
};

static const int unpack_start = 1;
static const int unpack_first_final = 2;
static const int unpack_error = 0;

static const int unpack_en_main = 1;


	{
	cs = unpack_start;
	}

	{
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	switch ( cs ) {
case 1:
	switch( (*p) ) {
		case 64: goto tr0;
		case 67: goto tr2;
		case 73: goto tr3;
		case 76: goto tr4;
		case 78: goto tr5;
		case 81: goto tr6;
		case 83: goto tr7;
		case 86: goto tr8;
		case 88: goto tr9;
		case 99: goto tr10;
		case 105: goto tr11;
		case 108: goto tr12;
		case 110: goto tr13;
		case 113: goto tr14;
		case 115: goto tr15;
		case 118: goto tr16;
		case 120: goto tr17;
	}
	goto tr1;
case 0:
	goto _out;
case 2:
	switch( (*p) ) {
		case 0: goto tr18;
		case 32: goto tr18;
		case 33: goto tr19;
		case 42: goto tr20;
		case 64: goto tr22;
		case 67: goto tr23;
		case 73: goto tr24;
		case 76: goto tr25;
		case 78: goto tr26;
		case 81: goto tr27;
		case 83: goto tr28;
		case 86: goto tr29;
		case 88: goto tr30;
		case 95: goto tr19;
		case 99: goto tr31;
		case 105: goto tr32;
		case 108: goto tr33;
		case 110: goto tr34;
		case 113: goto tr35;
		case 115: goto tr36;
		case 118: goto tr37;
		case 120: goto tr38;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr21;
	} else if ( (*p) >= 9 )
		goto tr18;
	goto tr1;
case 3:
	switch( (*p) ) {
		case 0: goto tr39;
		case 32: goto tr39;
		case 64: goto tr0;
		case 67: goto tr2;
		case 73: goto tr3;
		case 76: goto tr4;
		case 78: goto tr5;
		case 81: goto tr6;
		case 83: goto tr7;
		case 86: goto tr8;
		case 88: goto tr9;
		case 99: goto tr10;
		case 105: goto tr11;
		case 108: goto tr12;
		case 110: goto tr13;
		case 113: goto tr14;
		case 115: goto tr15;
		case 118: goto tr16;
		case 120: goto tr17;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr39;
	goto tr1;
case 4:
	switch( (*p) ) {
		case 0: goto tr40;
		case 32: goto tr40;
		case 33: goto tr41;
		case 42: goto tr42;
		case 64: goto tr44;
		case 67: goto tr45;
		case 73: goto tr46;
		case 76: goto tr47;
		case 78: goto tr48;
		case 81: goto tr49;
		case 83: goto tr50;
		case 86: goto tr51;
		case 88: goto tr52;
		case 95: goto tr41;
		case 99: goto tr53;
		case 105: goto tr54;
		case 108: goto tr55;
		case 110: goto tr56;
		case 113: goto tr57;
		case 115: goto tr58;
		case 118: goto tr59;
		case 120: goto tr60;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr43;
	} else if ( (*p) >= 9 )
		goto tr40;
	goto tr1;
case 5:
	switch( (*p) ) {
		case 0: goto tr40;
		case 32: goto tr40;
		case 64: goto tr44;
		case 67: goto tr45;
		case 73: goto tr46;
		case 76: goto tr47;
		case 78: goto tr48;
		case 81: goto tr49;
		case 83: goto tr50;
		case 86: goto tr51;
		case 88: goto tr52;
		case 99: goto tr53;
		case 105: goto tr54;
		case 108: goto tr55;
		case 110: goto tr56;
		case 113: goto tr57;
		case 115: goto tr58;
		case 118: goto tr59;
		case 120: goto tr60;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr40;
	goto tr1;
case 6:
	switch( (*p) ) {
		case 0: goto tr61;
		case 32: goto tr61;
		case 33: goto tr62;
		case 42: goto tr63;
		case 64: goto tr65;
		case 67: goto tr66;
		case 73: goto tr67;
		case 76: goto tr68;
		case 78: goto tr69;
		case 81: goto tr70;
		case 83: goto tr71;
		case 86: goto tr72;
		case 88: goto tr73;
		case 95: goto tr62;
		case 99: goto tr74;
		case 105: goto tr75;
		case 108: goto tr76;
		case 110: goto tr77;
		case 113: goto tr78;
		case 115: goto tr79;
		case 118: goto tr80;
		case 120: goto tr81;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr64;
	} else if ( (*p) >= 9 )
		goto tr61;
	goto tr1;
case 7:
	switch( (*p) ) {
		case 0: goto tr82;
		case 32: goto tr82;
		case 42: goto tr83;
		case 64: goto tr85;
		case 67: goto tr86;
		case 73: goto tr87;
		case 76: goto tr88;
		case 78: goto tr89;
		case 81: goto tr90;
		case 83: goto tr91;
		case 86: goto tr92;
		case 88: goto tr93;
		case 99: goto tr94;
		case 105: goto tr95;
		case 108: goto tr96;
		case 110: goto tr97;
		case 113: goto tr98;
		case 115: goto tr99;
		case 118: goto tr100;
		case 120: goto tr101;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr84;
	} else if ( (*p) >= 9 )
		goto tr82;
	goto tr1;
case 8:
	switch( (*p) ) {
		case 0: goto tr102;
		case 32: goto tr102;
		case 64: goto tr103;
		case 67: goto tr104;
		case 73: goto tr105;
		case 76: goto tr106;
		case 78: goto tr107;
		case 81: goto tr108;
		case 83: goto tr109;
		case 86: goto tr110;
		case 88: goto tr111;
		case 99: goto tr112;
		case 105: goto tr113;
		case 108: goto tr114;
		case 110: goto tr115;
		case 113: goto tr116;
		case 115: goto tr117;
		case 118: goto tr118;
		case 120: goto tr119;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr102;
	goto tr1;
case 9:
	switch( (*p) ) {
		case 0: goto tr120;
		case 32: goto tr120;
		case 33: goto tr121;
		case 42: goto tr122;
		case 64: goto tr124;
		case 67: goto tr125;
		case 73: goto tr126;
		case 76: goto tr127;
		case 78: goto tr128;
		case 81: goto tr129;
		case 83: goto tr130;
		case 86: goto tr131;
		case 88: goto tr132;
		case 95: goto tr121;
		case 99: goto tr133;
		case 105: goto tr134;
		case 108: goto tr135;
		case 110: goto tr136;
		case 113: goto tr137;
		case 115: goto tr138;
		case 118: goto tr139;
		case 120: goto tr140;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr123;
	} else if ( (*p) >= 9 )
		goto tr120;
	goto tr1;
case 10:
	switch( (*p) ) {
		case 0: goto tr141;
		case 32: goto tr141;
		case 42: goto tr142;
		case 64: goto tr144;
		case 67: goto tr145;
		case 73: goto tr146;
		case 76: goto tr147;
		case 78: goto tr148;
		case 81: goto tr149;
		case 83: goto tr150;
		case 86: goto tr151;
		case 88: goto tr152;
		case 99: goto tr153;
		case 105: goto tr154;
		case 108: goto tr155;
		case 110: goto tr156;
		case 113: goto tr157;
		case 115: goto tr158;
		case 118: goto tr159;
		case 120: goto tr160;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr143;
	} else if ( (*p) >= 9 )
		goto tr141;
	goto tr1;
case 11:
	switch( (*p) ) {
		case 0: goto tr161;
		case 32: goto tr161;
		case 64: goto tr162;
		case 67: goto tr163;
		case 73: goto tr164;
		case 76: goto tr165;
		case 78: goto tr166;
		case 81: goto tr167;
		case 83: goto tr168;
		case 86: goto tr169;
		case 88: goto tr170;
		case 99: goto tr171;
		case 105: goto tr172;
		case 108: goto tr173;
		case 110: goto tr174;
		case 113: goto tr175;
		case 115: goto tr176;
		case 118: goto tr177;
		case 120: goto tr178;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr161;
	goto tr1;
case 12:
	switch( (*p) ) {
		case 0: goto tr179;
		case 32: goto tr179;
		case 33: goto tr180;
		case 42: goto tr181;
		case 64: goto tr183;
		case 67: goto tr184;
		case 73: goto tr185;
		case 76: goto tr186;
		case 78: goto tr187;
		case 81: goto tr188;
		case 83: goto tr189;
		case 86: goto tr190;
		case 88: goto tr191;
		case 95: goto tr180;
		case 99: goto tr192;
		case 105: goto tr193;
		case 108: goto tr194;
		case 110: goto tr195;
		case 113: goto tr196;
		case 115: goto tr197;
		case 118: goto tr198;
		case 120: goto tr199;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr182;
	} else if ( (*p) >= 9 )
		goto tr179;
	goto tr1;
case 13:
	switch( (*p) ) {
		case 0: goto tr179;
		case 32: goto tr179;
		case 64: goto tr183;
		case 67: goto tr184;
		case 73: goto tr185;
		case 76: goto tr186;
		case 78: goto tr187;
		case 81: goto tr188;
		case 83: goto tr189;
		case 86: goto tr190;
		case 88: goto tr191;
		case 99: goto tr192;
		case 105: goto tr193;
		case 108: goto tr194;
		case 110: goto tr195;
		case 113: goto tr196;
		case 115: goto tr197;
		case 118: goto tr198;
		case 120: goto tr199;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr179;
	goto tr1;
case 14:
	switch( (*p) ) {
		case 0: goto tr200;
		case 32: goto tr200;
		case 33: goto tr201;
		case 42: goto tr202;
		case 64: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 95: goto tr201;
		case 99: goto tr213;
		case 105: goto tr214;
		case 108: goto tr215;
		case 110: goto tr216;
		case 113: goto tr217;
		case 115: goto tr218;
		case 118: goto tr219;
		case 120: goto tr220;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr203;
	} else if ( (*p) >= 9 )
		goto tr200;
	goto tr1;
case 15:
	switch( (*p) ) {
		case 0: goto tr200;
		case 32: goto tr200;
		case 64: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 99: goto tr213;
		case 105: goto tr214;
		case 108: goto tr215;
		case 110: goto tr216;
		case 113: goto tr217;
		case 115: goto tr218;
		case 118: goto tr219;
		case 120: goto tr220;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr200;
	goto tr1;
case 16:
	switch( (*p) ) {
		case 0: goto tr221;
		case 32: goto tr221;
		case 33: goto tr222;
		case 42: goto tr223;
		case 64: goto tr225;
		case 67: goto tr226;
		case 73: goto tr227;
		case 76: goto tr228;
		case 78: goto tr229;
		case 81: goto tr230;
		case 83: goto tr231;
		case 86: goto tr232;
		case 88: goto tr233;
		case 95: goto tr222;
		case 99: goto tr234;
		case 105: goto tr235;
		case 108: goto tr236;
		case 110: goto tr237;
		case 113: goto tr238;
		case 115: goto tr239;
		case 118: goto tr240;
		case 120: goto tr241;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr224;
	} else if ( (*p) >= 9 )
		goto tr221;
	goto tr1;
case 17:
	switch( (*p) ) {
		case 0: goto tr242;
		case 32: goto tr242;
		case 42: goto tr243;
		case 64: goto tr245;
		case 67: goto tr246;
		case 73: goto tr247;
		case 76: goto tr248;
		case 78: goto tr249;
		case 81: goto tr250;
		case 83: goto tr251;
		case 86: goto tr252;
		case 88: goto tr253;
		case 99: goto tr254;
		case 105: goto tr255;
		case 108: goto tr256;
		case 110: goto tr257;
		case 113: goto tr258;
		case 115: goto tr259;
		case 118: goto tr260;
		case 120: goto tr261;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr244;
	} else if ( (*p) >= 9 )
		goto tr242;
	goto tr1;
case 18:
	switch( (*p) ) {
		case 0: goto tr262;
		case 32: goto tr262;
		case 64: goto tr263;
		case 67: goto tr264;
		case 73: goto tr265;
		case 76: goto tr266;
		case 78: goto tr267;
		case 81: goto tr268;
		case 83: goto tr269;
		case 86: goto tr270;
		case 88: goto tr271;
		case 99: goto tr272;
		case 105: goto tr273;
		case 108: goto tr274;
		case 110: goto tr275;
		case 113: goto tr276;
		case 115: goto tr277;
		case 118: goto tr278;
		case 120: goto tr279;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr262;
	goto tr1;
case 19:
	switch( (*p) ) {
		case 0: goto tr280;
		case 32: goto tr280;
		case 33: goto tr281;
		case 42: goto tr282;
		case 64: goto tr284;
		case 67: goto tr285;
		case 73: goto tr286;
		case 76: goto tr287;
		case 78: goto tr288;
		case 81: goto tr289;
		case 83: goto tr290;
		case 86: goto tr291;
		case 88: goto tr292;
		case 95: goto tr281;
		case 99: goto tr293;
		case 105: goto tr294;
		case 108: goto tr295;
		case 110: goto tr296;
		case 113: goto tr297;
		case 115: goto tr298;
		case 118: goto tr299;
		case 120: goto tr300;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr283;
	} else if ( (*p) >= 9 )
		goto tr280;
	goto tr1;
case 20:
	switch( (*p) ) {
		case 0: goto tr280;
		case 32: goto tr280;
		case 64: goto tr284;
		case 67: goto tr285;
		case 73: goto tr286;
		case 76: goto tr287;
		case 78: goto tr288;
		case 81: goto tr289;
		case 83: goto tr290;
		case 86: goto tr291;
		case 88: goto tr292;
		case 99: goto tr293;
		case 105: goto tr294;
		case 108: goto tr295;
		case 110: goto tr296;
		case 113: goto tr297;
		case 115: goto tr298;
		case 118: goto tr299;
		case 120: goto tr300;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr280;
	goto tr1;
case 21:
	switch( (*p) ) {
		case 0: goto tr301;
		case 32: goto tr301;
		case 33: goto tr302;
		case 42: goto tr303;
		case 64: goto tr305;
		case 67: goto tr306;
		case 73: goto tr307;
		case 76: goto tr308;
		case 78: goto tr309;
		case 81: goto tr310;
		case 83: goto tr311;
		case 86: goto tr312;
		case 88: goto tr313;
		case 95: goto tr302;
		case 99: goto tr314;
		case 105: goto tr315;
		case 108: goto tr316;
		case 110: goto tr317;
		case 113: goto tr318;
		case 115: goto tr319;
		case 118: goto tr320;
		case 120: goto tr321;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr304;
	} else if ( (*p) >= 9 )
		goto tr301;
	goto tr1;
case 22:
	switch( (*p) ) {
		case 0: goto tr301;
		case 32: goto tr301;
		case 64: goto tr305;
		case 67: goto tr306;
		case 73: goto tr307;
		case 76: goto tr308;
		case 78: goto tr309;
		case 81: goto tr310;
		case 83: goto tr311;
		case 86: goto tr312;
		case 88: goto tr313;
		case 99: goto tr314;
		case 105: goto tr315;
		case 108: goto tr316;
		case 110: goto tr317;
		case 113: goto tr318;
		case 115: goto tr319;
		case 118: goto tr320;
		case 120: goto tr321;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr301;
	goto tr1;
case 23:
	switch( (*p) ) {
		case 0: goto tr322;
		case 32: goto tr322;
		case 33: goto tr323;
		case 42: goto tr324;
		case 64: goto tr326;
		case 67: goto tr327;
		case 73: goto tr328;
		case 76: goto tr329;
		case 78: goto tr330;
		case 81: goto tr331;
		case 83: goto tr332;
		case 86: goto tr333;
		case 88: goto tr334;
		case 95: goto tr323;
		case 99: goto tr335;
		case 105: goto tr336;
		case 108: goto tr337;
		case 110: goto tr338;
		case 113: goto tr339;
		case 115: goto tr340;
		case 118: goto tr341;
		case 120: goto tr342;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr325;
	} else if ( (*p) >= 9 )
		goto tr322;
	goto tr1;
case 24:
	switch( (*p) ) {
		case 0: goto tr322;
		case 32: goto tr322;
		case 64: goto tr326;
		case 67: goto tr327;
		case 73: goto tr328;
		case 76: goto tr329;
		case 78: goto tr330;
		case 81: goto tr331;
		case 83: goto tr332;
		case 86: goto tr333;
		case 88: goto tr334;
		case 99: goto tr335;
		case 105: goto tr336;
		case 108: goto tr337;
		case 110: goto tr338;
		case 113: goto tr339;
		case 115: goto tr340;
		case 118: goto tr341;
		case 120: goto tr342;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr322;
	goto tr1;
case 25:
	switch( (*p) ) {
		case 0: goto tr343;
		case 32: goto tr343;
		case 33: goto tr344;
		case 42: goto tr345;
		case 64: goto tr347;
		case 67: goto tr348;
		case 73: goto tr349;
		case 76: goto tr350;
		case 78: goto tr351;
		case 81: goto tr352;
		case 83: goto tr353;
		case 86: goto tr354;
		case 88: goto tr355;
		case 95: goto tr344;
		case 99: goto tr356;
		case 105: goto tr357;
		case 108: goto tr358;
		case 110: goto tr359;
		case 113: goto tr360;
		case 115: goto tr361;
		case 118: goto tr362;
		case 120: goto tr363;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr346;
	} else if ( (*p) >= 9 )
		goto tr343;
	goto tr1;
case 26:
	switch( (*p) ) {
		case 0: goto tr364;
		case 32: goto tr364;
		case 42: goto tr365;
		case 64: goto tr367;
		case 67: goto tr368;
		case 73: goto tr369;
		case 76: goto tr370;
		case 78: goto tr371;
		case 81: goto tr372;
		case 83: goto tr373;
		case 86: goto tr374;
		case 88: goto tr375;
		case 99: goto tr376;
		case 105: goto tr377;
		case 108: goto tr378;
		case 110: goto tr379;
		case 113: goto tr380;
		case 115: goto tr381;
		case 118: goto tr382;
		case 120: goto tr383;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr366;
	} else if ( (*p) >= 9 )
		goto tr364;
	goto tr1;
case 27:
	switch( (*p) ) {
		case 0: goto tr384;
		case 32: goto tr384;
		case 64: goto tr385;
		case 67: goto tr386;
		case 73: goto tr387;
		case 76: goto tr388;
		case 78: goto tr389;
		case 81: goto tr390;
		case 83: goto tr391;
		case 86: goto tr392;
		case 88: goto tr393;
		case 99: goto tr394;
		case 105: goto tr395;
		case 108: goto tr396;
		case 110: goto tr397;
		case 113: goto tr398;
		case 115: goto tr399;
		case 118: goto tr400;
		case 120: goto tr401;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr384;
	goto tr1;
case 28:
	switch( (*p) ) {
		case 0: goto tr402;
		case 32: goto tr402;
		case 33: goto tr403;
		case 42: goto tr404;
		case 64: goto tr406;
		case 67: goto tr407;
		case 73: goto tr408;
		case 76: goto tr409;
		case 78: goto tr410;
		case 81: goto tr411;
		case 83: goto tr412;
		case 86: goto tr413;
		case 88: goto tr414;
		case 95: goto tr403;
		case 99: goto tr415;
		case 105: goto tr416;
		case 108: goto tr417;
		case 110: goto tr418;
		case 113: goto tr419;
		case 115: goto tr420;
		case 118: goto tr421;
		case 120: goto tr422;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr405;
	} else if ( (*p) >= 9 )
		goto tr402;
	goto tr1;
case 29:
	switch( (*p) ) {
		case 0: goto tr423;
		case 32: goto tr423;
		case 42: goto tr424;
		case 64: goto tr426;
		case 67: goto tr427;
		case 73: goto tr428;
		case 76: goto tr429;
		case 78: goto tr430;
		case 81: goto tr431;
		case 83: goto tr432;
		case 86: goto tr433;
		case 88: goto tr434;
		case 99: goto tr435;
		case 105: goto tr436;
		case 108: goto tr437;
		case 110: goto tr438;
		case 113: goto tr439;
		case 115: goto tr440;
		case 118: goto tr441;
		case 120: goto tr442;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr425;
	} else if ( (*p) >= 9 )
		goto tr423;
	goto tr1;
case 30:
	switch( (*p) ) {
		case 0: goto tr443;
		case 32: goto tr443;
		case 64: goto tr444;
		case 67: goto tr445;
		case 73: goto tr446;
		case 76: goto tr447;
		case 78: goto tr448;
		case 81: goto tr449;
		case 83: goto tr450;
		case 86: goto tr451;
		case 88: goto tr452;
		case 99: goto tr453;
		case 105: goto tr454;
		case 108: goto tr455;
		case 110: goto tr456;
		case 113: goto tr457;
		case 115: goto tr458;
		case 118: goto tr459;
		case 120: goto tr460;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr443;
	goto tr1;
case 31:
	switch( (*p) ) {
		case 0: goto tr461;
		case 32: goto tr461;
		case 33: goto tr462;
		case 42: goto tr463;
		case 64: goto tr465;
		case 67: goto tr466;
		case 73: goto tr467;
		case 76: goto tr468;
		case 78: goto tr469;
		case 81: goto tr470;
		case 83: goto tr471;
		case 86: goto tr472;
		case 88: goto tr473;
		case 95: goto tr462;
		case 99: goto tr474;
		case 105: goto tr475;
		case 108: goto tr476;
		case 110: goto tr477;
		case 113: goto tr478;
		case 115: goto tr479;
		case 118: goto tr480;
		case 120: goto tr481;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr464;
	} else if ( (*p) >= 9 )
		goto tr461;
	goto tr1;
case 32:
	switch( (*p) ) {
		case 0: goto tr461;
		case 32: goto tr461;
		case 64: goto tr465;
		case 67: goto tr466;
		case 73: goto tr467;
		case 76: goto tr468;
		case 78: goto tr469;
		case 81: goto tr470;
		case 83: goto tr471;
		case 86: goto tr472;
		case 88: goto tr473;
		case 99: goto tr474;
		case 105: goto tr475;
		case 108: goto tr476;
		case 110: goto tr477;
		case 113: goto tr478;
		case 115: goto tr479;
		case 118: goto tr480;
		case 120: goto tr481;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr461;
	goto tr1;
case 33:
	switch( (*p) ) {
		case 0: goto tr482;
		case 32: goto tr482;
		case 33: goto tr483;
		case 42: goto tr484;
		case 64: goto tr486;
		case 67: goto tr487;
		case 73: goto tr488;
		case 76: goto tr489;
		case 78: goto tr490;
		case 81: goto tr491;
		case 83: goto tr492;
		case 86: goto tr493;
		case 88: goto tr494;
		case 95: goto tr483;
		case 99: goto tr495;
		case 105: goto tr496;
		case 108: goto tr497;
		case 110: goto tr498;
		case 113: goto tr499;
		case 115: goto tr500;
		case 118: goto tr501;
		case 120: goto tr502;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr485;
	} else if ( (*p) >= 9 )
		goto tr482;
	goto tr1;
case 34:
	switch( (*p) ) {
		case 0: goto tr482;
		case 32: goto tr482;
		case 64: goto tr486;
		case 67: goto tr487;
		case 73: goto tr488;
		case 76: goto tr489;
		case 78: goto tr490;
		case 81: goto tr491;
		case 83: goto tr492;
		case 86: goto tr493;
		case 88: goto tr494;
		case 99: goto tr495;
		case 105: goto tr496;
		case 108: goto tr497;
		case 110: goto tr498;
		case 113: goto tr499;
		case 115: goto tr500;
		case 118: goto tr501;
		case 120: goto tr502;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr482;
	goto tr1;
case 35:
	switch( (*p) ) {
		case 0: goto tr503;
		case 32: goto tr503;
		case 33: goto tr504;
		case 42: goto tr505;
		case 64: goto tr507;
		case 67: goto tr508;
		case 73: goto tr509;
		case 76: goto tr510;
		case 78: goto tr511;
		case 81: goto tr512;
		case 83: goto tr513;
		case 86: goto tr514;
		case 88: goto tr515;
		case 95: goto tr504;
		case 99: goto tr516;
		case 105: goto tr517;
		case 108: goto tr518;
		case 110: goto tr519;
		case 113: goto tr520;
		case 115: goto tr521;
		case 118: goto tr522;
		case 120: goto tr523;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr506;
	} else if ( (*p) >= 9 )
		goto tr503;
	goto tr1;
case 36:
	switch( (*p) ) {
		case 0: goto tr524;
		case 32: goto tr524;
		case 42: goto tr525;
		case 64: goto tr527;
		case 67: goto tr528;
		case 73: goto tr529;
		case 76: goto tr530;
		case 78: goto tr531;
		case 81: goto tr532;
		case 83: goto tr533;
		case 86: goto tr534;
		case 88: goto tr535;
		case 99: goto tr536;
		case 105: goto tr537;
		case 108: goto tr538;
		case 110: goto tr539;
		case 113: goto tr540;
		case 115: goto tr541;
		case 118: goto tr542;
		case 120: goto tr543;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr526;
	} else if ( (*p) >= 9 )
		goto tr524;
	goto tr1;
case 37:
	switch( (*p) ) {
		case 0: goto tr544;
		case 32: goto tr544;
		case 64: goto tr545;
		case 67: goto tr546;
		case 73: goto tr547;
		case 76: goto tr548;
		case 78: goto tr549;
		case 81: goto tr550;
		case 83: goto tr551;
		case 86: goto tr552;
		case 88: goto tr553;
		case 99: goto tr554;
		case 105: goto tr555;
		case 108: goto tr556;
		case 110: goto tr557;
		case 113: goto tr558;
		case 115: goto tr559;
		case 118: goto tr560;
		case 120: goto tr561;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr544;
	goto tr1;
case 38:
	switch( (*p) ) {
		case 0: goto tr562;
		case 32: goto tr562;
		case 33: goto tr563;
		case 42: goto tr564;
		case 64: goto tr566;
		case 67: goto tr567;
		case 73: goto tr568;
		case 76: goto tr569;
		case 78: goto tr570;
		case 81: goto tr571;
		case 83: goto tr572;
		case 86: goto tr573;
		case 88: goto tr574;
		case 95: goto tr563;
		case 99: goto tr575;
		case 105: goto tr576;
		case 108: goto tr577;
		case 110: goto tr578;
		case 113: goto tr579;
		case 115: goto tr580;
		case 118: goto tr581;
		case 120: goto tr582;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr565;
	} else if ( (*p) >= 9 )
		goto tr562;
	goto tr1;
case 39:
	switch( (*p) ) {
		case 0: goto tr562;
		case 32: goto tr562;
		case 64: goto tr566;
		case 67: goto tr567;
		case 73: goto tr568;
		case 76: goto tr569;
		case 78: goto tr570;
		case 81: goto tr571;
		case 83: goto tr572;
		case 86: goto tr573;
		case 88: goto tr574;
		case 99: goto tr575;
		case 105: goto tr576;
		case 108: goto tr577;
		case 110: goto tr578;
		case 113: goto tr579;
		case 115: goto tr580;
		case 118: goto tr581;
		case 120: goto tr582;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr562;
	goto tr1;
case 40:
	switch( (*p) ) {
		case 0: goto tr583;
		case 32: goto tr583;
		case 33: goto tr584;
		case 42: goto tr585;
		case 64: goto tr587;
		case 67: goto tr588;
		case 73: goto tr589;
		case 76: goto tr590;
		case 78: goto tr591;
		case 81: goto tr592;
		case 83: goto tr593;
		case 86: goto tr594;
		case 88: goto tr595;
		case 95: goto tr584;
		case 99: goto tr596;
		case 105: goto tr597;
		case 108: goto tr598;
		case 110: goto tr599;
		case 113: goto tr600;
		case 115: goto tr601;
		case 118: goto tr602;
		case 120: goto tr603;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr586;
	} else if ( (*p) >= 9 )
		goto tr583;
	goto tr1;
case 41:
	switch( (*p) ) {
		case 0: goto tr583;
		case 32: goto tr583;
		case 64: goto tr587;
		case 67: goto tr588;
		case 73: goto tr589;
		case 76: goto tr590;
		case 78: goto tr591;
		case 81: goto tr592;
		case 83: goto tr593;
		case 86: goto tr594;
		case 88: goto tr595;
		case 99: goto tr596;
		case 105: goto tr597;
		case 108: goto tr598;
		case 110: goto tr599;
		case 113: goto tr600;
		case 115: goto tr601;
		case 118: goto tr602;
		case 120: goto tr603;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr583;
	goto tr1;
case 42:
	switch( (*p) ) {
		case 0: goto tr604;
		case 32: goto tr604;
		case 64: goto tr605;
		case 67: goto tr606;
		case 73: goto tr607;
		case 76: goto tr608;
		case 78: goto tr609;
		case 81: goto tr610;
		case 83: goto tr611;
		case 86: goto tr612;
		case 88: goto tr613;
		case 99: goto tr614;
		case 105: goto tr615;
		case 108: goto tr616;
		case 110: goto tr617;
		case 113: goto tr618;
		case 115: goto tr619;
		case 118: goto tr620;
		case 120: goto tr621;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr604;
	goto tr1;
case 43:
	switch( (*p) ) {
		case 0: goto tr583;
		case 32: goto tr583;
		case 64: goto tr587;
		case 67: goto tr588;
		case 73: goto tr589;
		case 76: goto tr590;
		case 78: goto tr591;
		case 81: goto tr592;
		case 83: goto tr593;
		case 86: goto tr594;
		case 88: goto tr595;
		case 99: goto tr596;
		case 105: goto tr597;
		case 108: goto tr598;
		case 110: goto tr599;
		case 113: goto tr600;
		case 115: goto tr601;
		case 118: goto tr602;
		case 120: goto tr603;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr622;
	} else if ( (*p) >= 9 )
		goto tr583;
	goto tr1;
case 44:
	switch( (*p) ) {
		case 0: goto tr623;
		case 32: goto tr623;
		case 64: goto tr624;
		case 67: goto tr625;
		case 73: goto tr626;
		case 76: goto tr627;
		case 78: goto tr628;
		case 81: goto tr629;
		case 83: goto tr630;
		case 86: goto tr631;
		case 88: goto tr632;
		case 99: goto tr633;
		case 105: goto tr634;
		case 108: goto tr635;
		case 110: goto tr636;
		case 113: goto tr637;
		case 115: goto tr638;
		case 118: goto tr639;
		case 120: goto tr640;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr623;
	goto tr1;
case 45:
	switch( (*p) ) {
		case 0: goto tr562;
		case 32: goto tr562;
		case 64: goto tr566;
		case 67: goto tr567;
		case 73: goto tr568;
		case 76: goto tr569;
		case 78: goto tr570;
		case 81: goto tr571;
		case 83: goto tr572;
		case 86: goto tr573;
		case 88: goto tr574;
		case 99: goto tr575;
		case 105: goto tr576;
		case 108: goto tr577;
		case 110: goto tr578;
		case 113: goto tr579;
		case 115: goto tr580;
		case 118: goto tr581;
		case 120: goto tr582;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr641;
	} else if ( (*p) >= 9 )
		goto tr562;
	goto tr1;
case 46:
	switch( (*p) ) {
		case 0: goto tr503;
		case 32: goto tr503;
		case 64: goto tr507;
		case 67: goto tr508;
		case 73: goto tr509;
		case 76: goto tr510;
		case 78: goto tr511;
		case 81: goto tr512;
		case 83: goto tr513;
		case 86: goto tr514;
		case 88: goto tr515;
		case 99: goto tr516;
		case 105: goto tr517;
		case 108: goto tr518;
		case 110: goto tr519;
		case 113: goto tr520;
		case 115: goto tr521;
		case 118: goto tr522;
		case 120: goto tr523;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr642;
	} else if ( (*p) >= 9 )
		goto tr503;
	goto tr1;
case 47:
	switch( (*p) ) {
		case 0: goto tr643;
		case 32: goto tr643;
		case 64: goto tr644;
		case 67: goto tr645;
		case 73: goto tr646;
		case 76: goto tr647;
		case 78: goto tr648;
		case 81: goto tr649;
		case 83: goto tr650;
		case 86: goto tr651;
		case 88: goto tr652;
		case 99: goto tr653;
		case 105: goto tr654;
		case 108: goto tr655;
		case 110: goto tr656;
		case 113: goto tr657;
		case 115: goto tr658;
		case 118: goto tr659;
		case 120: goto tr660;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr643;
	goto tr1;
case 48:
	switch( (*p) ) {
		case 0: goto tr482;
		case 32: goto tr482;
		case 64: goto tr486;
		case 67: goto tr487;
		case 73: goto tr488;
		case 76: goto tr489;
		case 78: goto tr490;
		case 81: goto tr491;
		case 83: goto tr492;
		case 86: goto tr493;
		case 88: goto tr494;
		case 99: goto tr495;
		case 105: goto tr496;
		case 108: goto tr497;
		case 110: goto tr498;
		case 113: goto tr499;
		case 115: goto tr500;
		case 118: goto tr501;
		case 120: goto tr502;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr661;
	} else if ( (*p) >= 9 )
		goto tr482;
	goto tr1;
case 49:
	switch( (*p) ) {
		case 0: goto tr662;
		case 32: goto tr662;
		case 64: goto tr663;
		case 67: goto tr664;
		case 73: goto tr665;
		case 76: goto tr666;
		case 78: goto tr667;
		case 81: goto tr668;
		case 83: goto tr669;
		case 86: goto tr670;
		case 88: goto tr671;
		case 99: goto tr672;
		case 105: goto tr673;
		case 108: goto tr674;
		case 110: goto tr675;
		case 113: goto tr676;
		case 115: goto tr677;
		case 118: goto tr678;
		case 120: goto tr679;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr662;
	goto tr1;
case 50:
	switch( (*p) ) {
		case 0: goto tr461;
		case 32: goto tr461;
		case 64: goto tr465;
		case 67: goto tr466;
		case 73: goto tr467;
		case 76: goto tr468;
		case 78: goto tr469;
		case 81: goto tr470;
		case 83: goto tr471;
		case 86: goto tr472;
		case 88: goto tr473;
		case 99: goto tr474;
		case 105: goto tr475;
		case 108: goto tr476;
		case 110: goto tr477;
		case 113: goto tr478;
		case 115: goto tr479;
		case 118: goto tr480;
		case 120: goto tr481;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr680;
	} else if ( (*p) >= 9 )
		goto tr461;
	goto tr1;
case 51:
	switch( (*p) ) {
		case 0: goto tr402;
		case 32: goto tr402;
		case 64: goto tr406;
		case 67: goto tr407;
		case 73: goto tr408;
		case 76: goto tr409;
		case 78: goto tr410;
		case 81: goto tr411;
		case 83: goto tr412;
		case 86: goto tr413;
		case 88: goto tr414;
		case 99: goto tr415;
		case 105: goto tr416;
		case 108: goto tr417;
		case 110: goto tr418;
		case 113: goto tr419;
		case 115: goto tr420;
		case 118: goto tr421;
		case 120: goto tr422;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr681;
	} else if ( (*p) >= 9 )
		goto tr402;
	goto tr1;
case 52:
	switch( (*p) ) {
		case 0: goto tr343;
		case 32: goto tr343;
		case 64: goto tr347;
		case 67: goto tr348;
		case 73: goto tr349;
		case 76: goto tr350;
		case 78: goto tr351;
		case 81: goto tr352;
		case 83: goto tr353;
		case 86: goto tr354;
		case 88: goto tr355;
		case 99: goto tr356;
		case 105: goto tr357;
		case 108: goto tr358;
		case 110: goto tr359;
		case 113: goto tr360;
		case 115: goto tr361;
		case 118: goto tr362;
		case 120: goto tr363;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr682;
	} else if ( (*p) >= 9 )
		goto tr343;
	goto tr1;
case 53:
	switch( (*p) ) {
		case 0: goto tr683;
		case 32: goto tr683;
		case 64: goto tr684;
		case 67: goto tr685;
		case 73: goto tr686;
		case 76: goto tr687;
		case 78: goto tr688;
		case 81: goto tr689;
		case 83: goto tr690;
		case 86: goto tr691;
		case 88: goto tr692;
		case 99: goto tr693;
		case 105: goto tr694;
		case 108: goto tr695;
		case 110: goto tr696;
		case 113: goto tr697;
		case 115: goto tr698;
		case 118: goto tr699;
		case 120: goto tr700;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr683;
	goto tr1;
case 54:
	switch( (*p) ) {
		case 0: goto tr322;
		case 32: goto tr322;
		case 64: goto tr326;
		case 67: goto tr327;
		case 73: goto tr328;
		case 76: goto tr329;
		case 78: goto tr330;
		case 81: goto tr331;
		case 83: goto tr332;
		case 86: goto tr333;
		case 88: goto tr334;
		case 99: goto tr335;
		case 105: goto tr336;
		case 108: goto tr337;
		case 110: goto tr338;
		case 113: goto tr339;
		case 115: goto tr340;
		case 118: goto tr341;
		case 120: goto tr342;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr701;
	} else if ( (*p) >= 9 )
		goto tr322;
	goto tr1;
case 55:
	switch( (*p) ) {
		case 0: goto tr702;
		case 32: goto tr702;
		case 64: goto tr703;
		case 67: goto tr704;
		case 73: goto tr705;
		case 76: goto tr706;
		case 78: goto tr707;
		case 81: goto tr708;
		case 83: goto tr709;
		case 86: goto tr710;
		case 88: goto tr711;
		case 99: goto tr712;
		case 105: goto tr713;
		case 108: goto tr714;
		case 110: goto tr715;
		case 113: goto tr716;
		case 115: goto tr717;
		case 118: goto tr718;
		case 120: goto tr719;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr702;
	goto tr1;
case 56:
	switch( (*p) ) {
		case 0: goto tr301;
		case 32: goto tr301;
		case 64: goto tr305;
		case 67: goto tr306;
		case 73: goto tr307;
		case 76: goto tr308;
		case 78: goto tr309;
		case 81: goto tr310;
		case 83: goto tr311;
		case 86: goto tr312;
		case 88: goto tr313;
		case 99: goto tr314;
		case 105: goto tr315;
		case 108: goto tr316;
		case 110: goto tr317;
		case 113: goto tr318;
		case 115: goto tr319;
		case 118: goto tr320;
		case 120: goto tr321;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr720;
	} else if ( (*p) >= 9 )
		goto tr301;
	goto tr1;
case 57:
	switch( (*p) ) {
		case 0: goto tr721;
		case 32: goto tr721;
		case 64: goto tr722;
		case 67: goto tr723;
		case 73: goto tr724;
		case 76: goto tr725;
		case 78: goto tr726;
		case 81: goto tr727;
		case 83: goto tr728;
		case 86: goto tr729;
		case 88: goto tr730;
		case 99: goto tr731;
		case 105: goto tr732;
		case 108: goto tr733;
		case 110: goto tr734;
		case 113: goto tr735;
		case 115: goto tr736;
		case 118: goto tr737;
		case 120: goto tr738;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr721;
	goto tr1;
case 58:
	switch( (*p) ) {
		case 0: goto tr280;
		case 32: goto tr280;
		case 64: goto tr284;
		case 67: goto tr285;
		case 73: goto tr286;
		case 76: goto tr287;
		case 78: goto tr288;
		case 81: goto tr289;
		case 83: goto tr290;
		case 86: goto tr291;
		case 88: goto tr292;
		case 99: goto tr293;
		case 105: goto tr294;
		case 108: goto tr295;
		case 110: goto tr296;
		case 113: goto tr297;
		case 115: goto tr298;
		case 118: goto tr299;
		case 120: goto tr300;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr739;
	} else if ( (*p) >= 9 )
		goto tr280;
	goto tr1;
case 59:
	switch( (*p) ) {
		case 0: goto tr221;
		case 32: goto tr221;
		case 64: goto tr225;
		case 67: goto tr226;
		case 73: goto tr227;
		case 76: goto tr228;
		case 78: goto tr229;
		case 81: goto tr230;
		case 83: goto tr231;
		case 86: goto tr232;
		case 88: goto tr233;
		case 99: goto tr234;
		case 105: goto tr235;
		case 108: goto tr236;
		case 110: goto tr237;
		case 113: goto tr238;
		case 115: goto tr239;
		case 118: goto tr240;
		case 120: goto tr241;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr740;
	} else if ( (*p) >= 9 )
		goto tr221;
	goto tr1;
case 60:
	switch( (*p) ) {
		case 0: goto tr741;
		case 32: goto tr741;
		case 64: goto tr742;
		case 67: goto tr743;
		case 73: goto tr744;
		case 76: goto tr745;
		case 78: goto tr746;
		case 81: goto tr747;
		case 83: goto tr748;
		case 86: goto tr749;
		case 88: goto tr750;
		case 99: goto tr751;
		case 105: goto tr752;
		case 108: goto tr753;
		case 110: goto tr754;
		case 113: goto tr755;
		case 115: goto tr756;
		case 118: goto tr757;
		case 120: goto tr758;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr741;
	goto tr1;
case 61:
	switch( (*p) ) {
		case 0: goto tr200;
		case 32: goto tr200;
		case 64: goto tr204;
		case 67: goto tr205;
		case 73: goto tr206;
		case 76: goto tr207;
		case 78: goto tr208;
		case 81: goto tr209;
		case 83: goto tr210;
		case 86: goto tr211;
		case 88: goto tr212;
		case 99: goto tr213;
		case 105: goto tr214;
		case 108: goto tr215;
		case 110: goto tr216;
		case 113: goto tr217;
		case 115: goto tr218;
		case 118: goto tr219;
		case 120: goto tr220;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr759;
	} else if ( (*p) >= 9 )
		goto tr200;
	goto tr1;
case 62:
	switch( (*p) ) {
		case 0: goto tr760;
		case 32: goto tr760;
		case 64: goto tr761;
		case 67: goto tr762;
		case 73: goto tr763;
		case 76: goto tr764;
		case 78: goto tr765;
		case 81: goto tr766;
		case 83: goto tr767;
		case 86: goto tr768;
		case 88: goto tr769;
		case 99: goto tr770;
		case 105: goto tr771;
		case 108: goto tr772;
		case 110: goto tr773;
		case 113: goto tr774;
		case 115: goto tr775;
		case 118: goto tr776;
		case 120: goto tr777;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr760;
	goto tr1;
case 63:
	switch( (*p) ) {
		case 0: goto tr179;
		case 32: goto tr179;
		case 64: goto tr183;
		case 67: goto tr184;
		case 73: goto tr185;
		case 76: goto tr186;
		case 78: goto tr187;
		case 81: goto tr188;
		case 83: goto tr189;
		case 86: goto tr190;
		case 88: goto tr191;
		case 99: goto tr192;
		case 105: goto tr193;
		case 108: goto tr194;
		case 110: goto tr195;
		case 113: goto tr196;
		case 115: goto tr197;
		case 118: goto tr198;
		case 120: goto tr199;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr778;
	} else if ( (*p) >= 9 )
		goto tr179;
	goto tr1;
case 64:
	switch( (*p) ) {
		case 0: goto tr120;
		case 32: goto tr120;
		case 64: goto tr124;
		case 67: goto tr125;
		case 73: goto tr126;
		case 76: goto tr127;
		case 78: goto tr128;
		case 81: goto tr129;
		case 83: goto tr130;
		case 86: goto tr131;
		case 88: goto tr132;
		case 99: goto tr133;
		case 105: goto tr134;
		case 108: goto tr135;
		case 110: goto tr136;
		case 113: goto tr137;
		case 115: goto tr138;
		case 118: goto tr139;
		case 120: goto tr140;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr779;
	} else if ( (*p) >= 9 )
		goto tr120;
	goto tr1;
case 65:
	switch( (*p) ) {
		case 0: goto tr61;
		case 32: goto tr61;
		case 64: goto tr65;
		case 67: goto tr66;
		case 73: goto tr67;
		case 76: goto tr68;
		case 78: goto tr69;
		case 81: goto tr70;
		case 83: goto tr71;
		case 86: goto tr72;
		case 88: goto tr73;
		case 99: goto tr74;
		case 105: goto tr75;
		case 108: goto tr76;
		case 110: goto tr77;
		case 113: goto tr78;
		case 115: goto tr79;
		case 118: goto tr80;
		case 120: goto tr81;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr780;
	} else if ( (*p) >= 9 )
		goto tr61;
	goto tr1;
case 66:
	switch( (*p) ) {
		case 0: goto tr781;
		case 32: goto tr781;
		case 64: goto tr782;
		case 67: goto tr783;
		case 73: goto tr784;
		case 76: goto tr785;
		case 78: goto tr786;
		case 81: goto tr787;
		case 83: goto tr788;
		case 86: goto tr789;
		case 88: goto tr790;
		case 99: goto tr791;
		case 105: goto tr792;
		case 108: goto tr793;
		case 110: goto tr794;
		case 113: goto tr795;
		case 115: goto tr796;
		case 118: goto tr797;
		case 120: goto tr798;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr781;
	goto tr1;
case 67:
	switch( (*p) ) {
		case 0: goto tr40;
		case 32: goto tr40;
		case 64: goto tr44;
		case 67: goto tr45;
		case 73: goto tr46;
		case 76: goto tr47;
		case 78: goto tr48;
		case 81: goto tr49;
		case 83: goto tr50;
		case 86: goto tr51;
		case 88: goto tr52;
		case 99: goto tr53;
		case 105: goto tr54;
		case 108: goto tr55;
		case 110: goto tr56;
		case 113: goto tr57;
		case 115: goto tr58;
		case 118: goto tr59;
		case 120: goto tr60;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr799;
	} else if ( (*p) >= 9 )
		goto tr40;
	goto tr1;
case 68:
	switch( (*p) ) {
		case 0: goto tr18;
		case 32: goto tr18;
		case 64: goto tr22;
		case 67: goto tr23;
		case 73: goto tr24;
		case 76: goto tr25;
		case 78: goto tr26;
		case 81: goto tr27;
		case 83: goto tr28;
		case 86: goto tr29;
		case 88: goto tr30;
		case 99: goto tr31;
		case 105: goto tr32;
		case 108: goto tr33;
		case 110: goto tr34;
		case 113: goto tr35;
		case 115: goto tr36;
		case 118: goto tr37;
		case 120: goto tr38;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr18;
	goto tr1;
case 69:
	switch( (*p) ) {
		case 0: goto tr800;
		case 32: goto tr800;
		case 64: goto tr801;
		case 67: goto tr802;
		case 73: goto tr803;
		case 76: goto tr804;
		case 78: goto tr805;
		case 81: goto tr806;
		case 83: goto tr807;
		case 86: goto tr808;
		case 88: goto tr809;
		case 99: goto tr810;
		case 105: goto tr811;
		case 108: goto tr812;
		case 110: goto tr813;
		case 113: goto tr814;
		case 115: goto tr815;
		case 118: goto tr816;
		case 120: goto tr817;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr800;
	goto tr1;
case 70:
	switch( (*p) ) {
		case 0: goto tr18;
		case 32: goto tr18;
		case 64: goto tr22;
		case 67: goto tr23;
		case 73: goto tr24;
		case 76: goto tr25;
		case 78: goto tr26;
		case 81: goto tr27;
		case 83: goto tr28;
		case 86: goto tr29;
		case 88: goto tr30;
		case 99: goto tr31;
		case 105: goto tr32;
		case 108: goto tr33;
		case 110: goto tr34;
		case 113: goto tr35;
		case 115: goto tr36;
		case 118: goto tr37;
		case 120: goto tr38;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr818;
	} else if ( (*p) >= 9 )
		goto tr18;
	goto tr1;
	}

	tr1: cs = 0; goto _again;
	tr0: cs = 2; goto f0;
	tr22: cs = 2; goto f6;
	tr44: cs = 2; goto f11;
	tr65: cs = 2; goto f15;
	tr85: cs = 2; goto f21;
	tr103: cs = 2; goto f25;
	tr124: cs = 2; goto f29;
	tr144: cs = 2; goto f33;
	tr162: cs = 2; goto f37;
	tr183: cs = 2; goto f41;
	tr204: cs = 2; goto f45;
	tr225: cs = 2; goto f49;
	tr245: cs = 2; goto f53;
	tr263: cs = 2; goto f57;
	tr284: cs = 2; goto f61;
	tr305: cs = 2; goto f65;
	tr326: cs = 2; goto f69;
	tr347: cs = 2; goto f73;
	tr367: cs = 2; goto f77;
	tr385: cs = 2; goto f81;
	tr406: cs = 2; goto f85;
	tr426: cs = 2; goto f89;
	tr444: cs = 2; goto f93;
	tr465: cs = 2; goto f97;
	tr486: cs = 2; goto f101;
	tr507: cs = 2; goto f105;
	tr527: cs = 2; goto f109;
	tr545: cs = 2; goto f113;
	tr566: cs = 2; goto f117;
	tr587: cs = 2; goto f121;
	tr605: cs = 2; goto f125;
	tr624: cs = 2; goto f130;
	tr644: cs = 2; goto f134;
	tr663: cs = 2; goto f138;
	tr684: cs = 2; goto f142;
	tr703: cs = 2; goto f146;
	tr722: cs = 2; goto f150;
	tr742: cs = 2; goto f154;
	tr761: cs = 2; goto f158;
	tr782: cs = 2; goto f162;
	tr801: cs = 2; goto f166;
	tr39: cs = 3; goto _again;
	tr18: cs = 3; goto f3;
	tr40: cs = 3; goto f10;
	tr61: cs = 3; goto f14;
	tr82: cs = 3; goto f18;
	tr102: cs = 3; goto f24;
	tr120: cs = 3; goto f28;
	tr141: cs = 3; goto f32;
	tr161: cs = 3; goto f36;
	tr179: cs = 3; goto f40;
	tr200: cs = 3; goto f44;
	tr221: cs = 3; goto f48;
	tr242: cs = 3; goto f52;
	tr262: cs = 3; goto f56;
	tr280: cs = 3; goto f60;
	tr301: cs = 3; goto f64;
	tr322: cs = 3; goto f68;
	tr343: cs = 3; goto f72;
	tr364: cs = 3; goto f76;
	tr384: cs = 3; goto f80;
	tr402: cs = 3; goto f84;
	tr423: cs = 3; goto f88;
	tr443: cs = 3; goto f92;
	tr461: cs = 3; goto f96;
	tr482: cs = 3; goto f100;
	tr503: cs = 3; goto f104;
	tr524: cs = 3; goto f108;
	tr544: cs = 3; goto f112;
	tr562: cs = 3; goto f116;
	tr583: cs = 3; goto f120;
	tr604: cs = 3; goto f124;
	tr623: cs = 3; goto f129;
	tr643: cs = 3; goto f133;
	tr662: cs = 3; goto f137;
	tr683: cs = 3; goto f141;
	tr702: cs = 3; goto f145;
	tr721: cs = 3; goto f149;
	tr741: cs = 3; goto f153;
	tr760: cs = 3; goto f157;
	tr781: cs = 3; goto f161;
	tr800: cs = 3; goto f165;
	tr2: cs = 4; goto f1;
	tr23: cs = 4; goto f7;
	tr45: cs = 4; goto f12;
	tr66: cs = 4; goto f16;
	tr86: cs = 4; goto f22;
	tr104: cs = 4; goto f26;
	tr125: cs = 4; goto f30;
	tr145: cs = 4; goto f34;
	tr163: cs = 4; goto f38;
	tr184: cs = 4; goto f42;
	tr205: cs = 4; goto f46;
	tr226: cs = 4; goto f50;
	tr246: cs = 4; goto f54;
	tr264: cs = 4; goto f58;
	tr285: cs = 4; goto f62;
	tr306: cs = 4; goto f66;
	tr327: cs = 4; goto f70;
	tr348: cs = 4; goto f74;
	tr368: cs = 4; goto f78;
	tr386: cs = 4; goto f82;
	tr407: cs = 4; goto f86;
	tr427: cs = 4; goto f90;
	tr445: cs = 4; goto f94;
	tr466: cs = 4; goto f98;
	tr487: cs = 4; goto f102;
	tr508: cs = 4; goto f106;
	tr528: cs = 4; goto f110;
	tr546: cs = 4; goto f114;
	tr567: cs = 4; goto f118;
	tr588: cs = 4; goto f122;
	tr606: cs = 4; goto f126;
	tr625: cs = 4; goto f131;
	tr645: cs = 4; goto f135;
	tr664: cs = 4; goto f139;
	tr685: cs = 4; goto f143;
	tr704: cs = 4; goto f147;
	tr723: cs = 4; goto f151;
	tr743: cs = 4; goto f155;
	tr762: cs = 4; goto f159;
	tr783: cs = 4; goto f163;
	tr802: cs = 4; goto f167;
	tr41: cs = 5; goto f4;
	tr3: cs = 6; goto f1;
	tr24: cs = 6; goto f7;
	tr46: cs = 6; goto f12;
	tr67: cs = 6; goto f16;
	tr87: cs = 6; goto f22;
	tr105: cs = 6; goto f26;
	tr126: cs = 6; goto f30;
	tr146: cs = 6; goto f34;
	tr164: cs = 6; goto f38;
	tr185: cs = 6; goto f42;
	tr206: cs = 6; goto f46;
	tr227: cs = 6; goto f50;
	tr247: cs = 6; goto f54;
	tr265: cs = 6; goto f58;
	tr286: cs = 6; goto f62;
	tr307: cs = 6; goto f66;
	tr328: cs = 6; goto f70;
	tr349: cs = 6; goto f74;
	tr369: cs = 6; goto f78;
	tr387: cs = 6; goto f82;
	tr408: cs = 6; goto f86;
	tr428: cs = 6; goto f90;
	tr446: cs = 6; goto f94;
	tr467: cs = 6; goto f98;
	tr488: cs = 6; goto f102;
	tr509: cs = 6; goto f106;
	tr529: cs = 6; goto f110;
	tr547: cs = 6; goto f114;
	tr568: cs = 6; goto f118;
	tr589: cs = 6; goto f122;
	tr607: cs = 6; goto f126;
	tr626: cs = 6; goto f131;
	tr646: cs = 6; goto f135;
	tr665: cs = 6; goto f139;
	tr686: cs = 6; goto f143;
	tr705: cs = 6; goto f147;
	tr724: cs = 6; goto f151;
	tr744: cs = 6; goto f155;
	tr763: cs = 6; goto f159;
	tr784: cs = 6; goto f163;
	tr803: cs = 6; goto f167;
	tr62: cs = 7; goto _again;
	tr63: cs = 8; goto _again;
	tr83: cs = 8; goto f19;
	tr4: cs = 9; goto f1;
	tr25: cs = 9; goto f7;
	tr47: cs = 9; goto f12;
	tr68: cs = 9; goto f16;
	tr88: cs = 9; goto f22;
	tr106: cs = 9; goto f26;
	tr127: cs = 9; goto f30;
	tr147: cs = 9; goto f34;
	tr165: cs = 9; goto f38;
	tr186: cs = 9; goto f42;
	tr207: cs = 9; goto f46;
	tr228: cs = 9; goto f50;
	tr248: cs = 9; goto f54;
	tr266: cs = 9; goto f58;
	tr287: cs = 9; goto f62;
	tr308: cs = 9; goto f66;
	tr329: cs = 9; goto f70;
	tr350: cs = 9; goto f74;
	tr370: cs = 9; goto f78;
	tr388: cs = 9; goto f82;
	tr409: cs = 9; goto f86;
	tr429: cs = 9; goto f90;
	tr447: cs = 9; goto f94;
	tr468: cs = 9; goto f98;
	tr489: cs = 9; goto f102;
	tr510: cs = 9; goto f106;
	tr530: cs = 9; goto f110;
	tr548: cs = 9; goto f114;
	tr569: cs = 9; goto f118;
	tr590: cs = 9; goto f122;
	tr608: cs = 9; goto f126;
	tr627: cs = 9; goto f131;
	tr647: cs = 9; goto f135;
	tr666: cs = 9; goto f139;
	tr687: cs = 9; goto f143;
	tr706: cs = 9; goto f147;
	tr725: cs = 9; goto f151;
	tr745: cs = 9; goto f155;
	tr764: cs = 9; goto f159;
	tr785: cs = 9; goto f163;
	tr804: cs = 9; goto f167;
	tr121: cs = 10; goto _again;
	tr122: cs = 11; goto _again;
	tr142: cs = 11; goto f19;
	tr5: cs = 12; goto f1;
	tr26: cs = 12; goto f7;
	tr48: cs = 12; goto f12;
	tr69: cs = 12; goto f16;
	tr89: cs = 12; goto f22;
	tr107: cs = 12; goto f26;
	tr128: cs = 12; goto f30;
	tr148: cs = 12; goto f34;
	tr166: cs = 12; goto f38;
	tr187: cs = 12; goto f42;
	tr208: cs = 12; goto f46;
	tr229: cs = 12; goto f50;
	tr249: cs = 12; goto f54;
	tr267: cs = 12; goto f58;
	tr288: cs = 12; goto f62;
	tr309: cs = 12; goto f66;
	tr330: cs = 12; goto f70;
	tr351: cs = 12; goto f74;
	tr371: cs = 12; goto f78;
	tr389: cs = 12; goto f82;
	tr410: cs = 12; goto f86;
	tr430: cs = 12; goto f90;
	tr448: cs = 12; goto f94;
	tr469: cs = 12; goto f98;
	tr490: cs = 12; goto f102;
	tr511: cs = 12; goto f106;
	tr531: cs = 12; goto f110;
	tr549: cs = 12; goto f114;
	tr570: cs = 12; goto f118;
	tr591: cs = 12; goto f122;
	tr609: cs = 12; goto f126;
	tr628: cs = 12; goto f131;
	tr648: cs = 12; goto f135;
	tr667: cs = 12; goto f139;
	tr688: cs = 12; goto f143;
	tr707: cs = 12; goto f147;
	tr726: cs = 12; goto f151;
	tr746: cs = 12; goto f155;
	tr765: cs = 12; goto f159;
	tr786: cs = 12; goto f163;
	tr805: cs = 12; goto f167;
	tr180: cs = 13; goto f4;
	tr6: cs = 14; goto f1;
	tr27: cs = 14; goto f7;
	tr49: cs = 14; goto f12;
	tr70: cs = 14; goto f16;
	tr90: cs = 14; goto f22;
	tr108: cs = 14; goto f26;
	tr129: cs = 14; goto f30;
	tr149: cs = 14; goto f34;
	tr167: cs = 14; goto f38;
	tr188: cs = 14; goto f42;
	tr209: cs = 14; goto f46;
	tr230: cs = 14; goto f50;
	tr250: cs = 14; goto f54;
	tr268: cs = 14; goto f58;
	tr289: cs = 14; goto f62;
	tr310: cs = 14; goto f66;
	tr331: cs = 14; goto f70;
	tr352: cs = 14; goto f74;
	tr372: cs = 14; goto f78;
	tr390: cs = 14; goto f82;
	tr411: cs = 14; goto f86;
	tr431: cs = 14; goto f90;
	tr449: cs = 14; goto f94;
	tr470: cs = 14; goto f98;
	tr491: cs = 14; goto f102;
	tr512: cs = 14; goto f106;
	tr532: cs = 14; goto f110;
	tr550: cs = 14; goto f114;
	tr571: cs = 14; goto f118;
	tr592: cs = 14; goto f122;
	tr610: cs = 14; goto f126;
	tr629: cs = 14; goto f131;
	tr649: cs = 14; goto f135;
	tr668: cs = 14; goto f139;
	tr689: cs = 14; goto f143;
	tr708: cs = 14; goto f147;
	tr727: cs = 14; goto f151;
	tr747: cs = 14; goto f155;
	tr766: cs = 14; goto f159;
	tr787: cs = 14; goto f163;
	tr806: cs = 14; goto f167;
	tr201: cs = 15; goto f4;
	tr7: cs = 16; goto f1;
	tr28: cs = 16; goto f7;
	tr50: cs = 16; goto f12;
	tr71: cs = 16; goto f16;
	tr91: cs = 16; goto f22;
	tr109: cs = 16; goto f26;
	tr130: cs = 16; goto f30;
	tr150: cs = 16; goto f34;
	tr168: cs = 16; goto f38;
	tr189: cs = 16; goto f42;
	tr210: cs = 16; goto f46;
	tr231: cs = 16; goto f50;
	tr251: cs = 16; goto f54;
	tr269: cs = 16; goto f58;
	tr290: cs = 16; goto f62;
	tr311: cs = 16; goto f66;
	tr332: cs = 16; goto f70;
	tr353: cs = 16; goto f74;
	tr373: cs = 16; goto f78;
	tr391: cs = 16; goto f82;
	tr412: cs = 16; goto f86;
	tr432: cs = 16; goto f90;
	tr450: cs = 16; goto f94;
	tr471: cs = 16; goto f98;
	tr492: cs = 16; goto f102;
	tr513: cs = 16; goto f106;
	tr533: cs = 16; goto f110;
	tr551: cs = 16; goto f114;
	tr572: cs = 16; goto f118;
	tr593: cs = 16; goto f122;
	tr611: cs = 16; goto f126;
	tr630: cs = 16; goto f131;
	tr650: cs = 16; goto f135;
	tr669: cs = 16; goto f139;
	tr690: cs = 16; goto f143;
	tr709: cs = 16; goto f147;
	tr728: cs = 16; goto f151;
	tr748: cs = 16; goto f155;
	tr767: cs = 16; goto f159;
	tr788: cs = 16; goto f163;
	tr807: cs = 16; goto f167;
	tr222: cs = 17; goto _again;
	tr223: cs = 18; goto _again;
	tr243: cs = 18; goto f19;
	tr8: cs = 19; goto f1;
	tr29: cs = 19; goto f7;
	tr51: cs = 19; goto f12;
	tr72: cs = 19; goto f16;
	tr92: cs = 19; goto f22;
	tr110: cs = 19; goto f26;
	tr131: cs = 19; goto f30;
	tr151: cs = 19; goto f34;
	tr169: cs = 19; goto f38;
	tr190: cs = 19; goto f42;
	tr211: cs = 19; goto f46;
	tr232: cs = 19; goto f50;
	tr252: cs = 19; goto f54;
	tr270: cs = 19; goto f58;
	tr291: cs = 19; goto f62;
	tr312: cs = 19; goto f66;
	tr333: cs = 19; goto f70;
	tr354: cs = 19; goto f74;
	tr374: cs = 19; goto f78;
	tr392: cs = 19; goto f82;
	tr413: cs = 19; goto f86;
	tr433: cs = 19; goto f90;
	tr451: cs = 19; goto f94;
	tr472: cs = 19; goto f98;
	tr493: cs = 19; goto f102;
	tr514: cs = 19; goto f106;
	tr534: cs = 19; goto f110;
	tr552: cs = 19; goto f114;
	tr573: cs = 19; goto f118;
	tr594: cs = 19; goto f122;
	tr612: cs = 19; goto f126;
	tr631: cs = 19; goto f131;
	tr651: cs = 19; goto f135;
	tr670: cs = 19; goto f139;
	tr691: cs = 19; goto f143;
	tr710: cs = 19; goto f147;
	tr729: cs = 19; goto f151;
	tr749: cs = 19; goto f155;
	tr768: cs = 19; goto f159;
	tr789: cs = 19; goto f163;
	tr808: cs = 19; goto f167;
	tr281: cs = 20; goto f4;
	tr9: cs = 21; goto f1;
	tr30: cs = 21; goto f7;
	tr52: cs = 21; goto f12;
	tr73: cs = 21; goto f16;
	tr93: cs = 21; goto f22;
	tr111: cs = 21; goto f26;
	tr132: cs = 21; goto f30;
	tr152: cs = 21; goto f34;
	tr170: cs = 21; goto f38;
	tr191: cs = 21; goto f42;
	tr212: cs = 21; goto f46;
	tr233: cs = 21; goto f50;
	tr253: cs = 21; goto f54;
	tr271: cs = 21; goto f58;
	tr292: cs = 21; goto f62;
	tr313: cs = 21; goto f66;
	tr334: cs = 21; goto f70;
	tr355: cs = 21; goto f74;
	tr375: cs = 21; goto f78;
	tr393: cs = 21; goto f82;
	tr414: cs = 21; goto f86;
	tr434: cs = 21; goto f90;
	tr452: cs = 21; goto f94;
	tr473: cs = 21; goto f98;
	tr494: cs = 21; goto f102;
	tr515: cs = 21; goto f106;
	tr535: cs = 21; goto f110;
	tr553: cs = 21; goto f114;
	tr574: cs = 21; goto f118;
	tr595: cs = 21; goto f122;
	tr613: cs = 21; goto f126;
	tr632: cs = 21; goto f131;
	tr652: cs = 21; goto f135;
	tr671: cs = 21; goto f139;
	tr692: cs = 21; goto f143;
	tr711: cs = 21; goto f147;
	tr730: cs = 21; goto f151;
	tr750: cs = 21; goto f155;
	tr769: cs = 21; goto f159;
	tr790: cs = 21; goto f163;
	tr809: cs = 21; goto f167;
	tr302: cs = 22; goto f4;
	tr10: cs = 23; goto f1;
	tr31: cs = 23; goto f7;
	tr53: cs = 23; goto f12;
	tr74: cs = 23; goto f16;
	tr94: cs = 23; goto f22;
	tr112: cs = 23; goto f26;
	tr133: cs = 23; goto f30;
	tr153: cs = 23; goto f34;
	tr171: cs = 23; goto f38;
	tr192: cs = 23; goto f42;
	tr213: cs = 23; goto f46;
	tr234: cs = 23; goto f50;
	tr254: cs = 23; goto f54;
	tr272: cs = 23; goto f58;
	tr293: cs = 23; goto f62;
	tr314: cs = 23; goto f66;
	tr335: cs = 23; goto f70;
	tr356: cs = 23; goto f74;
	tr376: cs = 23; goto f78;
	tr394: cs = 23; goto f82;
	tr415: cs = 23; goto f86;
	tr435: cs = 23; goto f90;
	tr453: cs = 23; goto f94;
	tr474: cs = 23; goto f98;
	tr495: cs = 23; goto f102;
	tr516: cs = 23; goto f106;
	tr536: cs = 23; goto f110;
	tr554: cs = 23; goto f114;
	tr575: cs = 23; goto f118;
	tr596: cs = 23; goto f122;
	tr614: cs = 23; goto f126;
	tr633: cs = 23; goto f131;
	tr653: cs = 23; goto f135;
	tr672: cs = 23; goto f139;
	tr693: cs = 23; goto f143;
	tr712: cs = 23; goto f147;
	tr731: cs = 23; goto f151;
	tr751: cs = 23; goto f155;
	tr770: cs = 23; goto f159;
	tr791: cs = 23; goto f163;
	tr810: cs = 23; goto f167;
	tr323: cs = 24; goto f4;
	tr11: cs = 25; goto f1;
	tr32: cs = 25; goto f7;
	tr54: cs = 25; goto f12;
	tr75: cs = 25; goto f16;
	tr95: cs = 25; goto f22;
	tr113: cs = 25; goto f26;
	tr134: cs = 25; goto f30;
	tr154: cs = 25; goto f34;
	tr172: cs = 25; goto f38;
	tr193: cs = 25; goto f42;
	tr214: cs = 25; goto f46;
	tr235: cs = 25; goto f50;
	tr255: cs = 25; goto f54;
	tr273: cs = 25; goto f58;
	tr294: cs = 25; goto f62;
	tr315: cs = 25; goto f66;
	tr336: cs = 25; goto f70;
	tr357: cs = 25; goto f74;
	tr377: cs = 25; goto f78;
	tr395: cs = 25; goto f82;
	tr416: cs = 25; goto f86;
	tr436: cs = 25; goto f90;
	tr454: cs = 25; goto f94;
	tr475: cs = 25; goto f98;
	tr496: cs = 25; goto f102;
	tr517: cs = 25; goto f106;
	tr537: cs = 25; goto f110;
	tr555: cs = 25; goto f114;
	tr576: cs = 25; goto f118;
	tr597: cs = 25; goto f122;
	tr615: cs = 25; goto f126;
	tr634: cs = 25; goto f131;
	tr654: cs = 25; goto f135;
	tr673: cs = 25; goto f139;
	tr694: cs = 25; goto f143;
	tr713: cs = 25; goto f147;
	tr732: cs = 25; goto f151;
	tr752: cs = 25; goto f155;
	tr771: cs = 25; goto f159;
	tr792: cs = 25; goto f163;
	tr811: cs = 25; goto f167;
	tr344: cs = 26; goto _again;
	tr345: cs = 27; goto _again;
	tr365: cs = 27; goto f19;
	tr12: cs = 28; goto f1;
	tr33: cs = 28; goto f7;
	tr55: cs = 28; goto f12;
	tr76: cs = 28; goto f16;
	tr96: cs = 28; goto f22;
	tr114: cs = 28; goto f26;
	tr135: cs = 28; goto f30;
	tr155: cs = 28; goto f34;
	tr173: cs = 28; goto f38;
	tr194: cs = 28; goto f42;
	tr215: cs = 28; goto f46;
	tr236: cs = 28; goto f50;
	tr256: cs = 28; goto f54;
	tr274: cs = 28; goto f58;
	tr295: cs = 28; goto f62;
	tr316: cs = 28; goto f66;
	tr337: cs = 28; goto f70;
	tr358: cs = 28; goto f74;
	tr378: cs = 28; goto f78;
	tr396: cs = 28; goto f82;
	tr417: cs = 28; goto f86;
	tr437: cs = 28; goto f90;
	tr455: cs = 28; goto f94;
	tr476: cs = 28; goto f98;
	tr497: cs = 28; goto f102;
	tr518: cs = 28; goto f106;
	tr538: cs = 28; goto f110;
	tr556: cs = 28; goto f114;
	tr577: cs = 28; goto f118;
	tr598: cs = 28; goto f122;
	tr616: cs = 28; goto f126;
	tr635: cs = 28; goto f131;
	tr655: cs = 28; goto f135;
	tr674: cs = 28; goto f139;
	tr695: cs = 28; goto f143;
	tr714: cs = 28; goto f147;
	tr733: cs = 28; goto f151;
	tr753: cs = 28; goto f155;
	tr772: cs = 28; goto f159;
	tr793: cs = 28; goto f163;
	tr812: cs = 28; goto f167;
	tr403: cs = 29; goto _again;
	tr404: cs = 30; goto _again;
	tr424: cs = 30; goto f19;
	tr13: cs = 31; goto f1;
	tr34: cs = 31; goto f7;
	tr56: cs = 31; goto f12;
	tr77: cs = 31; goto f16;
	tr97: cs = 31; goto f22;
	tr115: cs = 31; goto f26;
	tr136: cs = 31; goto f30;
	tr156: cs = 31; goto f34;
	tr174: cs = 31; goto f38;
	tr195: cs = 31; goto f42;
	tr216: cs = 31; goto f46;
	tr237: cs = 31; goto f50;
	tr257: cs = 31; goto f54;
	tr275: cs = 31; goto f58;
	tr296: cs = 31; goto f62;
	tr317: cs = 31; goto f66;
	tr338: cs = 31; goto f70;
	tr359: cs = 31; goto f74;
	tr379: cs = 31; goto f78;
	tr397: cs = 31; goto f82;
	tr418: cs = 31; goto f86;
	tr438: cs = 31; goto f90;
	tr456: cs = 31; goto f94;
	tr477: cs = 31; goto f98;
	tr498: cs = 31; goto f102;
	tr519: cs = 31; goto f106;
	tr539: cs = 31; goto f110;
	tr557: cs = 31; goto f114;
	tr578: cs = 31; goto f118;
	tr599: cs = 31; goto f122;
	tr617: cs = 31; goto f126;
	tr636: cs = 31; goto f131;
	tr656: cs = 31; goto f135;
	tr675: cs = 31; goto f139;
	tr696: cs = 31; goto f143;
	tr715: cs = 31; goto f147;
	tr734: cs = 31; goto f151;
	tr754: cs = 31; goto f155;
	tr773: cs = 31; goto f159;
	tr794: cs = 31; goto f163;
	tr813: cs = 31; goto f167;
	tr462: cs = 32; goto f4;
	tr14: cs = 33; goto f1;
	tr35: cs = 33; goto f7;
	tr57: cs = 33; goto f12;
	tr78: cs = 33; goto f16;
	tr98: cs = 33; goto f22;
	tr116: cs = 33; goto f26;
	tr137: cs = 33; goto f30;
	tr157: cs = 33; goto f34;
	tr175: cs = 33; goto f38;
	tr196: cs = 33; goto f42;
	tr217: cs = 33; goto f46;
	tr238: cs = 33; goto f50;
	tr258: cs = 33; goto f54;
	tr276: cs = 33; goto f58;
	tr297: cs = 33; goto f62;
	tr318: cs = 33; goto f66;
	tr339: cs = 33; goto f70;
	tr360: cs = 33; goto f74;
	tr380: cs = 33; goto f78;
	tr398: cs = 33; goto f82;
	tr419: cs = 33; goto f86;
	tr439: cs = 33; goto f90;
	tr457: cs = 33; goto f94;
	tr478: cs = 33; goto f98;
	tr499: cs = 33; goto f102;
	tr520: cs = 33; goto f106;
	tr540: cs = 33; goto f110;
	tr558: cs = 33; goto f114;
	tr579: cs = 33; goto f118;
	tr600: cs = 33; goto f122;
	tr618: cs = 33; goto f126;
	tr637: cs = 33; goto f131;
	tr657: cs = 33; goto f135;
	tr676: cs = 33; goto f139;
	tr697: cs = 33; goto f143;
	tr716: cs = 33; goto f147;
	tr735: cs = 33; goto f151;
	tr755: cs = 33; goto f155;
	tr774: cs = 33; goto f159;
	tr795: cs = 33; goto f163;
	tr814: cs = 33; goto f167;
	tr483: cs = 34; goto f4;
	tr15: cs = 35; goto f1;
	tr36: cs = 35; goto f7;
	tr58: cs = 35; goto f12;
	tr79: cs = 35; goto f16;
	tr99: cs = 35; goto f22;
	tr117: cs = 35; goto f26;
	tr138: cs = 35; goto f30;
	tr158: cs = 35; goto f34;
	tr176: cs = 35; goto f38;
	tr197: cs = 35; goto f42;
	tr218: cs = 35; goto f46;
	tr239: cs = 35; goto f50;
	tr259: cs = 35; goto f54;
	tr277: cs = 35; goto f58;
	tr298: cs = 35; goto f62;
	tr319: cs = 35; goto f66;
	tr340: cs = 35; goto f70;
	tr361: cs = 35; goto f74;
	tr381: cs = 35; goto f78;
	tr399: cs = 35; goto f82;
	tr420: cs = 35; goto f86;
	tr440: cs = 35; goto f90;
	tr458: cs = 35; goto f94;
	tr479: cs = 35; goto f98;
	tr500: cs = 35; goto f102;
	tr521: cs = 35; goto f106;
	tr541: cs = 35; goto f110;
	tr559: cs = 35; goto f114;
	tr580: cs = 35; goto f118;
	tr601: cs = 35; goto f122;
	tr619: cs = 35; goto f126;
	tr638: cs = 35; goto f131;
	tr658: cs = 35; goto f135;
	tr677: cs = 35; goto f139;
	tr698: cs = 35; goto f143;
	tr717: cs = 35; goto f147;
	tr736: cs = 35; goto f151;
	tr756: cs = 35; goto f155;
	tr775: cs = 35; goto f159;
	tr796: cs = 35; goto f163;
	tr815: cs = 35; goto f167;
	tr504: cs = 36; goto _again;
	tr505: cs = 37; goto _again;
	tr525: cs = 37; goto f19;
	tr16: cs = 38; goto f1;
	tr37: cs = 38; goto f7;
	tr59: cs = 38; goto f12;
	tr80: cs = 38; goto f16;
	tr100: cs = 38; goto f22;
	tr118: cs = 38; goto f26;
	tr139: cs = 38; goto f30;
	tr159: cs = 38; goto f34;
	tr177: cs = 38; goto f38;
	tr198: cs = 38; goto f42;
	tr219: cs = 38; goto f46;
	tr240: cs = 38; goto f50;
	tr260: cs = 38; goto f54;
	tr278: cs = 38; goto f58;
	tr299: cs = 38; goto f62;
	tr320: cs = 38; goto f66;
	tr341: cs = 38; goto f70;
	tr362: cs = 38; goto f74;
	tr382: cs = 38; goto f78;
	tr400: cs = 38; goto f82;
	tr421: cs = 38; goto f86;
	tr441: cs = 38; goto f90;
	tr459: cs = 38; goto f94;
	tr480: cs = 38; goto f98;
	tr501: cs = 38; goto f102;
	tr522: cs = 38; goto f106;
	tr542: cs = 38; goto f110;
	tr560: cs = 38; goto f114;
	tr581: cs = 38; goto f118;
	tr602: cs = 38; goto f122;
	tr620: cs = 38; goto f126;
	tr639: cs = 38; goto f131;
	tr659: cs = 38; goto f135;
	tr678: cs = 38; goto f139;
	tr699: cs = 38; goto f143;
	tr718: cs = 38; goto f147;
	tr737: cs = 38; goto f151;
	tr757: cs = 38; goto f155;
	tr776: cs = 38; goto f159;
	tr797: cs = 38; goto f163;
	tr816: cs = 38; goto f167;
	tr563: cs = 39; goto f4;
	tr17: cs = 40; goto f1;
	tr38: cs = 40; goto f7;
	tr60: cs = 40; goto f12;
	tr81: cs = 40; goto f16;
	tr101: cs = 40; goto f22;
	tr119: cs = 40; goto f26;
	tr140: cs = 40; goto f30;
	tr160: cs = 40; goto f34;
	tr178: cs = 40; goto f38;
	tr199: cs = 40; goto f42;
	tr220: cs = 40; goto f46;
	tr241: cs = 40; goto f50;
	tr261: cs = 40; goto f54;
	tr279: cs = 40; goto f58;
	tr300: cs = 40; goto f62;
	tr321: cs = 40; goto f66;
	tr342: cs = 40; goto f70;
	tr363: cs = 40; goto f74;
	tr383: cs = 40; goto f78;
	tr401: cs = 40; goto f82;
	tr422: cs = 40; goto f86;
	tr442: cs = 40; goto f90;
	tr460: cs = 40; goto f94;
	tr481: cs = 40; goto f98;
	tr502: cs = 40; goto f102;
	tr523: cs = 40; goto f106;
	tr543: cs = 40; goto f110;
	tr561: cs = 40; goto f114;
	tr582: cs = 40; goto f118;
	tr603: cs = 40; goto f122;
	tr621: cs = 40; goto f126;
	tr640: cs = 40; goto f131;
	tr660: cs = 40; goto f135;
	tr679: cs = 40; goto f139;
	tr700: cs = 40; goto f143;
	tr719: cs = 40; goto f147;
	tr738: cs = 40; goto f151;
	tr758: cs = 40; goto f155;
	tr777: cs = 40; goto f159;
	tr798: cs = 40; goto f163;
	tr817: cs = 40; goto f167;
	tr584: cs = 41; goto f4;
	tr585: cs = 42; goto _again;
	tr586: cs = 43; goto f5;
	tr622: cs = 43; goto f127;
	tr564: cs = 44; goto _again;
	tr565: cs = 45; goto f5;
	tr641: cs = 45; goto f127;
	tr506: cs = 46; goto f5;
	tr526: cs = 46; goto f20;
	tr642: cs = 46; goto f127;
	tr484: cs = 47; goto _again;
	tr485: cs = 48; goto f5;
	tr661: cs = 48; goto f127;
	tr463: cs = 49; goto _again;
	tr464: cs = 50; goto f5;
	tr680: cs = 50; goto f127;
	tr405: cs = 51; goto f5;
	tr425: cs = 51; goto f20;
	tr681: cs = 51; goto f127;
	tr346: cs = 52; goto f5;
	tr366: cs = 52; goto f20;
	tr682: cs = 52; goto f127;
	tr324: cs = 53; goto _again;
	tr325: cs = 54; goto f5;
	tr701: cs = 54; goto f127;
	tr303: cs = 55; goto _again;
	tr304: cs = 56; goto f5;
	tr720: cs = 56; goto f127;
	tr282: cs = 57; goto _again;
	tr283: cs = 58; goto f5;
	tr739: cs = 58; goto f127;
	tr224: cs = 59; goto f5;
	tr244: cs = 59; goto f20;
	tr740: cs = 59; goto f127;
	tr202: cs = 60; goto _again;
	tr203: cs = 61; goto f5;
	tr759: cs = 61; goto f127;
	tr181: cs = 62; goto _again;
	tr182: cs = 63; goto f5;
	tr778: cs = 63; goto f127;
	tr123: cs = 64; goto f5;
	tr143: cs = 64; goto f20;
	tr779: cs = 64; goto f127;
	tr64: cs = 65; goto f5;
	tr84: cs = 65; goto f20;
	tr780: cs = 65; goto f127;
	tr42: cs = 66; goto _again;
	tr43: cs = 67; goto f5;
	tr799: cs = 67; goto f127;
	tr19: cs = 68; goto f4;
	tr20: cs = 69; goto _again;
	tr21: cs = 70; goto f5;
	tr818: cs = 70; goto f127;

f1:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f5:
	{
    count = (*p) - '0';
  }
	goto _again;
f127:
	{
    count = count * 10 + ((*p) - '0');
  }
	goto _again;
f19:
	{
    platform = true;
  }
	goto _again;
f4:
	{
#define NON_NATIVE_ERROR_SIZE 36

    char non_native_msg[NON_NATIVE_ERROR_SIZE];
    snprintf(non_native_msg, NON_NATIVE_ERROR_SIZE,
             "'%c' allowed only after types sSiIlL", *p);
    Exception::argument_error(state, non_native_msg);
  }
	goto _again;
f0:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f20:
	{
    platform = true;
  }
	{
    count = (*p) - '0';
  }
	goto _again;
f64:
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f120:
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f3:
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f145:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f124:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f165:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	goto _again;
f66:
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f122:
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f7:
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f147:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f126:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f167:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f10:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f68:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f48:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f104:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f96:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f116:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f14:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f72:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f40:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f60:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f44:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f100:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f28:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f84:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f65:
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f121:
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f6:
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f161:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f141:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f56:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f112:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f137:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f129:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f24:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f80:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f157:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f149:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f153:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f133:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f36:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f92:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f146:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f125:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f166:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f52:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f108:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f18:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f76:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f32:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f88:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f12:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f70:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f50:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f106:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f98:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f118:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f16:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f74:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f42:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f62:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f46:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f102:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f30:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f86:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f163:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f143:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f58:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f114:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f139:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f131:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f26:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f82:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f159:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f151:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f155:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f135:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f38:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f94:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f54:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f110:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f22:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f78:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f34:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f90:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f11:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f69:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f49:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f105:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f97:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f117:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f15:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f73:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f41:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f61:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f45:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f101:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f29:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f85:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f162:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f142:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f57:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f113:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f138:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f130:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f25:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f81:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f158:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f150:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f154:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f134:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f37:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f93:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f53:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f109:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f21:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f77:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f33:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;
f89:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	{
    count = 0;
  }
	goto _again;

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _unpack_eof_actions[cs] ) {
	case 9:
	{
    return array;
  }
	break;
	case 64:
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 120:
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 3:
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 145:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) count = size() - index;
    index -= count;
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 124:
	{
    count = 0;
    rest = true;
  }
	{
    if(rest) {
      index = size();
    } else {
      index += count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 165:
	{
    count = 0;
    rest = true;
  }
	{
    if(!rest) {
      index = count;
    }
  }
	{
#define OOB_ERROR_SIZE 20

    if(index < 0 || index > size()) {
      char oob_error_msg[OOB_ERROR_SIZE];
      snprintf(oob_error_msg, OOB_ERROR_SIZE,
               "%c outside of string", *p);
      Exception::argument_error(state, oob_error_msg);
    }
  }
	{
    return array;
  }
	break;
	case 10:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 68:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 48:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 104:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 96:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 116:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 14:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 72:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 40:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 60:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 44:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 100:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 28:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 84:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 161:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 141:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 56:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 112:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 137:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 129:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 24:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 80:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 157:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 149:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 153:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 133:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 36:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 92:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 52:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 108:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 18:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 76:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 32:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 88:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	}
	}

	_out: {}
	}



    if(unpack_first_final && unpack_error && unpack_en_main) {
      // do nothing
    }

    return force_as<Array>(Primitives::failure());
  }
}
