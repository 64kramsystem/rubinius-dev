
/* This file was generated by Ragel. Your edits will be lost.
 *
 * This is a state machine implementation of String#unpack.
 *
 * vim: filetype=cpp
 */

#include "vm.hpp"
#include "object_utils.hpp"
#include "vm/config.h"

#include "builtin/array.hpp"
#include "builtin/exception.hpp"
#include "builtin/string.hpp"

namespace rubinius {

  namespace unpack {
    uint16_t swap16(uint16_t x) {
      return ((((x)&0xff)<<8) | (((x)>>8)&0xff));
    }

    uint32_t swap32(uint32_t x) {
      return ((((x)&0xff)<<24)
             |(((x)>>24)&0xff)
             |(((x)&0x0000ff00)<<8)
             |(((x)&0x00ff0000)>>8));
    }

    uint64_t swap64(uint64_t x) {
      return ((((x)&0x00000000000000ffLL)<<56)
             |(((x)&0xff00000000000000LL)>>56)
             |(((x)&0x000000000000ff00LL)<<40)
             |(((x)&0x00ff000000000000LL)>>40)
             |(((x)&0x0000000000ff0000LL)<<24)
             |(((x)&0x0000ff0000000000LL)>>24)
             |(((x)&0x00000000ff000000LL)<<8)
             |(((x)&0x000000ff00000000LL)>>8));
    }
  }

#define UNPACK_ELEMENTS(format, bits)                   \
  for(; index < stop; count--, index += width) {        \
    array->append(state, format(bits(bytes + index)));  \
  }

#define FIXNUM(b)         (Fixnum::from(b))
#define INTEGER(b)        (Integer::from(state, b))

#define SBYTE(p)          (*(int8_t*)(p))
#define UBYTE(p)          (*(uint8_t*)(p))

#define S16BITS(p)        (*(int16_t*)(p))
#define U16BITS(p)        (*(uint16_t*)(p))

#define S32BITS(p)        (*(int32_t*)(p))
#define U32BITS(p)        (*(uint32_t*)(p))

#define S64BITS(p)        (*(int64_t*)(p))
#define U64BITS(p)        (*(uint64_t*)(p))

#ifdef RBX_LITTLE_ENDIAN
# define LE_S16BITS(p)     (S16BITS(p))
# define LE_U16BITS(p)     (U16BITS(p))
# define LE_S32BITS(p)     (S32BITS(p))
# define LE_U32BITS(p)     (U32BITS(p))
# define LE_S64BITS(p)     (S64BITS(p))
# define LE_U64BITS(p)     (U64BITS(p))

# define BE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define BE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define BE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define BE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define BE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define BE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))
#else
# define LE_S16BITS(p)     ((int16_t)(unpack::swap16(U16BITS(p))))
# define LE_U16BITS(p)     ((uint16_t)(unpack::swap16(U16BITS(p))))
# define LE_S32BITS(p)     ((int32_t)(unpack::swap32(U32BITS(p))))
# define LE_U32BITS(p)     ((uint32_t)(unpack::swap32(U32BITS(p))))
# define LE_S64BITS(p)     ((int64_t)(unpack::swap64(U64BITS(p))))
# define LE_U64BITS(p)     ((uint64_t)(unpack::swap64(U64BITS(p))))

# define BE_S16BITS(p)     (S16BITS(p))
# define BE_U16BITS(p)     (U16BITS(p))
# define BE_S32BITS(p)     (S32BITS(p))
# define BE_U32BITS(p)     (U32BITS(p))
# define BE_S64BITS(p)     (S64BITS(p))
# define BE_U64BITS(p)     (U64BITS(p))
#endif

  Array* String::unpack(STATE, String* directives) {
    // Ragel-specific variables
    const char *p  = directives->c_str();
    const char *pe = p + directives->size();
    const char *eof = pe;
    int cs;

    // pack-specific variables
    uint8_t* bytes = byte_address();
    size_t index = 0;
    size_t stop = 0;
    size_t width = 0;
    int count = 0;
    bool rest = false;
    bool platform = false;
    Array* array = Array::create(state, 0);


static const short _unpack_eof_actions[] = {
	0, 0, 2, 7, 8, 11, 16, 19, 
	22, 25, 28, 28, 31, 31, 34, 37, 
	40, 43, 43, 46, 46, 49, 52, 55, 
	58, 61, 64, 67, 67, 70, 70, 73, 
	76, 79, 82, 82, 85, 82, 73, 89, 
	70, 92, 67, 58, 49, 95, 46, 98, 
	43, 34, 101, 31, 104, 28, 19, 8, 
	2, 107, 2
};

static const int unpack_start = 1;
static const int unpack_first_final = 2;
static const int unpack_error = 0;

static const int unpack_en_main = 1;


	{
	cs = unpack_start;
	}

	{
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	switch ( cs ) {
case 1:
	switch( (*p) ) {
		case 67: goto tr0;
		case 73: goto tr2;
		case 76: goto tr3;
		case 78: goto tr4;
		case 81: goto tr5;
		case 83: goto tr6;
		case 86: goto tr7;
		case 99: goto tr8;
		case 105: goto tr9;
		case 108: goto tr10;
		case 110: goto tr11;
		case 113: goto tr12;
		case 115: goto tr13;
		case 118: goto tr14;
	}
	goto tr1;
case 0:
	goto _out;
case 2:
	switch( (*p) ) {
		case 0: goto tr15;
		case 32: goto tr15;
		case 33: goto tr16;
		case 42: goto tr17;
		case 67: goto tr19;
		case 73: goto tr20;
		case 76: goto tr21;
		case 78: goto tr22;
		case 81: goto tr23;
		case 83: goto tr24;
		case 86: goto tr25;
		case 95: goto tr16;
		case 99: goto tr26;
		case 105: goto tr27;
		case 108: goto tr28;
		case 110: goto tr29;
		case 113: goto tr30;
		case 115: goto tr31;
		case 118: goto tr32;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr18;
	} else if ( (*p) >= 9 )
		goto tr15;
	goto tr1;
case 3:
	switch( (*p) ) {
		case 0: goto tr33;
		case 32: goto tr33;
		case 67: goto tr0;
		case 73: goto tr2;
		case 76: goto tr3;
		case 78: goto tr4;
		case 81: goto tr5;
		case 83: goto tr6;
		case 86: goto tr7;
		case 99: goto tr8;
		case 105: goto tr9;
		case 108: goto tr10;
		case 110: goto tr11;
		case 113: goto tr12;
		case 115: goto tr13;
		case 118: goto tr14;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr33;
	goto tr1;
case 4:
	switch( (*p) ) {
		case 0: goto tr34;
		case 32: goto tr34;
		case 33: goto tr35;
		case 42: goto tr36;
		case 67: goto tr38;
		case 73: goto tr39;
		case 76: goto tr40;
		case 78: goto tr41;
		case 81: goto tr42;
		case 83: goto tr43;
		case 86: goto tr44;
		case 95: goto tr35;
		case 99: goto tr45;
		case 105: goto tr46;
		case 108: goto tr47;
		case 110: goto tr48;
		case 113: goto tr49;
		case 115: goto tr50;
		case 118: goto tr51;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr37;
	} else if ( (*p) >= 9 )
		goto tr34;
	goto tr1;
case 5:
	switch( (*p) ) {
		case 0: goto tr52;
		case 32: goto tr52;
		case 42: goto tr53;
		case 67: goto tr55;
		case 73: goto tr56;
		case 76: goto tr57;
		case 78: goto tr58;
		case 81: goto tr59;
		case 83: goto tr60;
		case 86: goto tr61;
		case 99: goto tr62;
		case 105: goto tr63;
		case 108: goto tr64;
		case 110: goto tr65;
		case 113: goto tr66;
		case 115: goto tr67;
		case 118: goto tr68;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr54;
	} else if ( (*p) >= 9 )
		goto tr52;
	goto tr1;
case 6:
	switch( (*p) ) {
		case 0: goto tr69;
		case 32: goto tr69;
		case 67: goto tr70;
		case 73: goto tr71;
		case 76: goto tr72;
		case 78: goto tr73;
		case 81: goto tr74;
		case 83: goto tr75;
		case 86: goto tr76;
		case 99: goto tr77;
		case 105: goto tr78;
		case 108: goto tr79;
		case 110: goto tr80;
		case 113: goto tr81;
		case 115: goto tr82;
		case 118: goto tr83;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr69;
	goto tr1;
case 7:
	switch( (*p) ) {
		case 0: goto tr84;
		case 32: goto tr84;
		case 33: goto tr85;
		case 42: goto tr86;
		case 67: goto tr88;
		case 73: goto tr89;
		case 76: goto tr90;
		case 78: goto tr91;
		case 81: goto tr92;
		case 83: goto tr93;
		case 86: goto tr94;
		case 95: goto tr85;
		case 99: goto tr95;
		case 105: goto tr96;
		case 108: goto tr97;
		case 110: goto tr98;
		case 113: goto tr99;
		case 115: goto tr100;
		case 118: goto tr101;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr87;
	} else if ( (*p) >= 9 )
		goto tr84;
	goto tr1;
case 8:
	switch( (*p) ) {
		case 0: goto tr102;
		case 32: goto tr102;
		case 42: goto tr103;
		case 67: goto tr105;
		case 73: goto tr106;
		case 76: goto tr107;
		case 78: goto tr108;
		case 81: goto tr109;
		case 83: goto tr110;
		case 86: goto tr111;
		case 99: goto tr112;
		case 105: goto tr113;
		case 108: goto tr114;
		case 110: goto tr115;
		case 113: goto tr116;
		case 115: goto tr117;
		case 118: goto tr118;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr104;
	} else if ( (*p) >= 9 )
		goto tr102;
	goto tr1;
case 9:
	switch( (*p) ) {
		case 0: goto tr119;
		case 32: goto tr119;
		case 67: goto tr120;
		case 73: goto tr121;
		case 76: goto tr122;
		case 78: goto tr123;
		case 81: goto tr124;
		case 83: goto tr125;
		case 86: goto tr126;
		case 99: goto tr127;
		case 105: goto tr128;
		case 108: goto tr129;
		case 110: goto tr130;
		case 113: goto tr131;
		case 115: goto tr132;
		case 118: goto tr133;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr119;
	goto tr1;
case 10:
	switch( (*p) ) {
		case 0: goto tr134;
		case 32: goto tr134;
		case 33: goto tr135;
		case 42: goto tr136;
		case 67: goto tr138;
		case 73: goto tr139;
		case 76: goto tr140;
		case 78: goto tr141;
		case 81: goto tr142;
		case 83: goto tr143;
		case 86: goto tr144;
		case 95: goto tr135;
		case 99: goto tr145;
		case 105: goto tr146;
		case 108: goto tr147;
		case 110: goto tr148;
		case 113: goto tr149;
		case 115: goto tr150;
		case 118: goto tr151;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr137;
	} else if ( (*p) >= 9 )
		goto tr134;
	goto tr1;
case 11:
	switch( (*p) ) {
		case 0: goto tr134;
		case 32: goto tr134;
		case 67: goto tr138;
		case 73: goto tr139;
		case 76: goto tr140;
		case 78: goto tr141;
		case 81: goto tr142;
		case 83: goto tr143;
		case 86: goto tr144;
		case 99: goto tr145;
		case 105: goto tr146;
		case 108: goto tr147;
		case 110: goto tr148;
		case 113: goto tr149;
		case 115: goto tr150;
		case 118: goto tr151;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr134;
	goto tr1;
case 12:
	switch( (*p) ) {
		case 0: goto tr152;
		case 32: goto tr152;
		case 33: goto tr153;
		case 42: goto tr154;
		case 67: goto tr156;
		case 73: goto tr157;
		case 76: goto tr158;
		case 78: goto tr159;
		case 81: goto tr160;
		case 83: goto tr161;
		case 86: goto tr162;
		case 95: goto tr153;
		case 99: goto tr163;
		case 105: goto tr164;
		case 108: goto tr165;
		case 110: goto tr166;
		case 113: goto tr167;
		case 115: goto tr168;
		case 118: goto tr169;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr155;
	} else if ( (*p) >= 9 )
		goto tr152;
	goto tr1;
case 13:
	switch( (*p) ) {
		case 0: goto tr152;
		case 32: goto tr152;
		case 67: goto tr156;
		case 73: goto tr157;
		case 76: goto tr158;
		case 78: goto tr159;
		case 81: goto tr160;
		case 83: goto tr161;
		case 86: goto tr162;
		case 99: goto tr163;
		case 105: goto tr164;
		case 108: goto tr165;
		case 110: goto tr166;
		case 113: goto tr167;
		case 115: goto tr168;
		case 118: goto tr169;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr152;
	goto tr1;
case 14:
	switch( (*p) ) {
		case 0: goto tr170;
		case 32: goto tr170;
		case 33: goto tr171;
		case 42: goto tr172;
		case 67: goto tr174;
		case 73: goto tr175;
		case 76: goto tr176;
		case 78: goto tr177;
		case 81: goto tr178;
		case 83: goto tr179;
		case 86: goto tr180;
		case 95: goto tr171;
		case 99: goto tr181;
		case 105: goto tr182;
		case 108: goto tr183;
		case 110: goto tr184;
		case 113: goto tr185;
		case 115: goto tr186;
		case 118: goto tr187;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr173;
	} else if ( (*p) >= 9 )
		goto tr170;
	goto tr1;
case 15:
	switch( (*p) ) {
		case 0: goto tr188;
		case 32: goto tr188;
		case 42: goto tr189;
		case 67: goto tr191;
		case 73: goto tr192;
		case 76: goto tr193;
		case 78: goto tr194;
		case 81: goto tr195;
		case 83: goto tr196;
		case 86: goto tr197;
		case 99: goto tr198;
		case 105: goto tr199;
		case 108: goto tr200;
		case 110: goto tr201;
		case 113: goto tr202;
		case 115: goto tr203;
		case 118: goto tr204;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr190;
	} else if ( (*p) >= 9 )
		goto tr188;
	goto tr1;
case 16:
	switch( (*p) ) {
		case 0: goto tr205;
		case 32: goto tr205;
		case 67: goto tr206;
		case 73: goto tr207;
		case 76: goto tr208;
		case 78: goto tr209;
		case 81: goto tr210;
		case 83: goto tr211;
		case 86: goto tr212;
		case 99: goto tr213;
		case 105: goto tr214;
		case 108: goto tr215;
		case 110: goto tr216;
		case 113: goto tr217;
		case 115: goto tr218;
		case 118: goto tr219;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr205;
	goto tr1;
case 17:
	switch( (*p) ) {
		case 0: goto tr220;
		case 32: goto tr220;
		case 33: goto tr221;
		case 42: goto tr222;
		case 67: goto tr224;
		case 73: goto tr225;
		case 76: goto tr226;
		case 78: goto tr227;
		case 81: goto tr228;
		case 83: goto tr229;
		case 86: goto tr230;
		case 95: goto tr221;
		case 99: goto tr231;
		case 105: goto tr232;
		case 108: goto tr233;
		case 110: goto tr234;
		case 113: goto tr235;
		case 115: goto tr236;
		case 118: goto tr237;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr223;
	} else if ( (*p) >= 9 )
		goto tr220;
	goto tr1;
case 18:
	switch( (*p) ) {
		case 0: goto tr220;
		case 32: goto tr220;
		case 67: goto tr224;
		case 73: goto tr225;
		case 76: goto tr226;
		case 78: goto tr227;
		case 81: goto tr228;
		case 83: goto tr229;
		case 86: goto tr230;
		case 99: goto tr231;
		case 105: goto tr232;
		case 108: goto tr233;
		case 110: goto tr234;
		case 113: goto tr235;
		case 115: goto tr236;
		case 118: goto tr237;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr220;
	goto tr1;
case 19:
	switch( (*p) ) {
		case 0: goto tr238;
		case 32: goto tr238;
		case 33: goto tr239;
		case 42: goto tr240;
		case 67: goto tr242;
		case 73: goto tr243;
		case 76: goto tr244;
		case 78: goto tr245;
		case 81: goto tr246;
		case 83: goto tr247;
		case 86: goto tr248;
		case 95: goto tr239;
		case 99: goto tr249;
		case 105: goto tr250;
		case 108: goto tr251;
		case 110: goto tr252;
		case 113: goto tr253;
		case 115: goto tr254;
		case 118: goto tr255;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr241;
	} else if ( (*p) >= 9 )
		goto tr238;
	goto tr1;
case 20:
	switch( (*p) ) {
		case 0: goto tr238;
		case 32: goto tr238;
		case 67: goto tr242;
		case 73: goto tr243;
		case 76: goto tr244;
		case 78: goto tr245;
		case 81: goto tr246;
		case 83: goto tr247;
		case 86: goto tr248;
		case 99: goto tr249;
		case 105: goto tr250;
		case 108: goto tr251;
		case 110: goto tr252;
		case 113: goto tr253;
		case 115: goto tr254;
		case 118: goto tr255;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr238;
	goto tr1;
case 21:
	switch( (*p) ) {
		case 0: goto tr256;
		case 32: goto tr256;
		case 33: goto tr257;
		case 42: goto tr258;
		case 67: goto tr260;
		case 73: goto tr261;
		case 76: goto tr262;
		case 78: goto tr263;
		case 81: goto tr264;
		case 83: goto tr265;
		case 86: goto tr266;
		case 95: goto tr257;
		case 99: goto tr267;
		case 105: goto tr268;
		case 108: goto tr269;
		case 110: goto tr270;
		case 113: goto tr271;
		case 115: goto tr272;
		case 118: goto tr273;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr259;
	} else if ( (*p) >= 9 )
		goto tr256;
	goto tr1;
case 22:
	switch( (*p) ) {
		case 0: goto tr274;
		case 32: goto tr274;
		case 42: goto tr275;
		case 67: goto tr277;
		case 73: goto tr278;
		case 76: goto tr279;
		case 78: goto tr280;
		case 81: goto tr281;
		case 83: goto tr282;
		case 86: goto tr283;
		case 99: goto tr284;
		case 105: goto tr285;
		case 108: goto tr286;
		case 110: goto tr287;
		case 113: goto tr288;
		case 115: goto tr289;
		case 118: goto tr290;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr276;
	} else if ( (*p) >= 9 )
		goto tr274;
	goto tr1;
case 23:
	switch( (*p) ) {
		case 0: goto tr291;
		case 32: goto tr291;
		case 67: goto tr292;
		case 73: goto tr293;
		case 76: goto tr294;
		case 78: goto tr295;
		case 81: goto tr296;
		case 83: goto tr297;
		case 86: goto tr298;
		case 99: goto tr299;
		case 105: goto tr300;
		case 108: goto tr301;
		case 110: goto tr302;
		case 113: goto tr303;
		case 115: goto tr304;
		case 118: goto tr305;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr291;
	goto tr1;
case 24:
	switch( (*p) ) {
		case 0: goto tr306;
		case 32: goto tr306;
		case 33: goto tr307;
		case 42: goto tr308;
		case 67: goto tr310;
		case 73: goto tr311;
		case 76: goto tr312;
		case 78: goto tr313;
		case 81: goto tr314;
		case 83: goto tr315;
		case 86: goto tr316;
		case 95: goto tr307;
		case 99: goto tr317;
		case 105: goto tr318;
		case 108: goto tr319;
		case 110: goto tr320;
		case 113: goto tr321;
		case 115: goto tr322;
		case 118: goto tr323;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr309;
	} else if ( (*p) >= 9 )
		goto tr306;
	goto tr1;
case 25:
	switch( (*p) ) {
		case 0: goto tr324;
		case 32: goto tr324;
		case 42: goto tr325;
		case 67: goto tr327;
		case 73: goto tr328;
		case 76: goto tr329;
		case 78: goto tr330;
		case 81: goto tr331;
		case 83: goto tr332;
		case 86: goto tr333;
		case 99: goto tr334;
		case 105: goto tr335;
		case 108: goto tr336;
		case 110: goto tr337;
		case 113: goto tr338;
		case 115: goto tr339;
		case 118: goto tr340;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr326;
	} else if ( (*p) >= 9 )
		goto tr324;
	goto tr1;
case 26:
	switch( (*p) ) {
		case 0: goto tr341;
		case 32: goto tr341;
		case 67: goto tr342;
		case 73: goto tr343;
		case 76: goto tr344;
		case 78: goto tr345;
		case 81: goto tr346;
		case 83: goto tr347;
		case 86: goto tr348;
		case 99: goto tr349;
		case 105: goto tr350;
		case 108: goto tr351;
		case 110: goto tr352;
		case 113: goto tr353;
		case 115: goto tr354;
		case 118: goto tr355;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr341;
	goto tr1;
case 27:
	switch( (*p) ) {
		case 0: goto tr356;
		case 32: goto tr356;
		case 33: goto tr357;
		case 42: goto tr358;
		case 67: goto tr360;
		case 73: goto tr361;
		case 76: goto tr362;
		case 78: goto tr363;
		case 81: goto tr364;
		case 83: goto tr365;
		case 86: goto tr366;
		case 95: goto tr357;
		case 99: goto tr367;
		case 105: goto tr368;
		case 108: goto tr369;
		case 110: goto tr370;
		case 113: goto tr371;
		case 115: goto tr372;
		case 118: goto tr373;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr359;
	} else if ( (*p) >= 9 )
		goto tr356;
	goto tr1;
case 28:
	switch( (*p) ) {
		case 0: goto tr356;
		case 32: goto tr356;
		case 67: goto tr360;
		case 73: goto tr361;
		case 76: goto tr362;
		case 78: goto tr363;
		case 81: goto tr364;
		case 83: goto tr365;
		case 86: goto tr366;
		case 99: goto tr367;
		case 105: goto tr368;
		case 108: goto tr369;
		case 110: goto tr370;
		case 113: goto tr371;
		case 115: goto tr372;
		case 118: goto tr373;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr356;
	goto tr1;
case 29:
	switch( (*p) ) {
		case 0: goto tr374;
		case 32: goto tr374;
		case 33: goto tr375;
		case 42: goto tr376;
		case 67: goto tr378;
		case 73: goto tr379;
		case 76: goto tr380;
		case 78: goto tr381;
		case 81: goto tr382;
		case 83: goto tr383;
		case 86: goto tr384;
		case 95: goto tr375;
		case 99: goto tr385;
		case 105: goto tr386;
		case 108: goto tr387;
		case 110: goto tr388;
		case 113: goto tr389;
		case 115: goto tr390;
		case 118: goto tr391;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr377;
	} else if ( (*p) >= 9 )
		goto tr374;
	goto tr1;
case 30:
	switch( (*p) ) {
		case 0: goto tr374;
		case 32: goto tr374;
		case 67: goto tr378;
		case 73: goto tr379;
		case 76: goto tr380;
		case 78: goto tr381;
		case 81: goto tr382;
		case 83: goto tr383;
		case 86: goto tr384;
		case 99: goto tr385;
		case 105: goto tr386;
		case 108: goto tr387;
		case 110: goto tr388;
		case 113: goto tr389;
		case 115: goto tr390;
		case 118: goto tr391;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr374;
	goto tr1;
case 31:
	switch( (*p) ) {
		case 0: goto tr392;
		case 32: goto tr392;
		case 33: goto tr393;
		case 42: goto tr394;
		case 67: goto tr396;
		case 73: goto tr397;
		case 76: goto tr398;
		case 78: goto tr399;
		case 81: goto tr400;
		case 83: goto tr401;
		case 86: goto tr402;
		case 95: goto tr393;
		case 99: goto tr403;
		case 105: goto tr404;
		case 108: goto tr405;
		case 110: goto tr406;
		case 113: goto tr407;
		case 115: goto tr408;
		case 118: goto tr409;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr395;
	} else if ( (*p) >= 9 )
		goto tr392;
	goto tr1;
case 32:
	switch( (*p) ) {
		case 0: goto tr410;
		case 32: goto tr410;
		case 42: goto tr411;
		case 67: goto tr413;
		case 73: goto tr414;
		case 76: goto tr415;
		case 78: goto tr416;
		case 81: goto tr417;
		case 83: goto tr418;
		case 86: goto tr419;
		case 99: goto tr420;
		case 105: goto tr421;
		case 108: goto tr422;
		case 110: goto tr423;
		case 113: goto tr424;
		case 115: goto tr425;
		case 118: goto tr426;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr412;
	} else if ( (*p) >= 9 )
		goto tr410;
	goto tr1;
case 33:
	switch( (*p) ) {
		case 0: goto tr427;
		case 32: goto tr427;
		case 67: goto tr428;
		case 73: goto tr429;
		case 76: goto tr430;
		case 78: goto tr431;
		case 81: goto tr432;
		case 83: goto tr433;
		case 86: goto tr434;
		case 99: goto tr435;
		case 105: goto tr436;
		case 108: goto tr437;
		case 110: goto tr438;
		case 113: goto tr439;
		case 115: goto tr440;
		case 118: goto tr441;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr427;
	goto tr1;
case 34:
	switch( (*p) ) {
		case 0: goto tr442;
		case 32: goto tr442;
		case 33: goto tr443;
		case 42: goto tr444;
		case 67: goto tr446;
		case 73: goto tr447;
		case 76: goto tr448;
		case 78: goto tr449;
		case 81: goto tr450;
		case 83: goto tr451;
		case 86: goto tr452;
		case 95: goto tr443;
		case 99: goto tr453;
		case 105: goto tr454;
		case 108: goto tr455;
		case 110: goto tr456;
		case 113: goto tr457;
		case 115: goto tr458;
		case 118: goto tr459;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr445;
	} else if ( (*p) >= 9 )
		goto tr442;
	goto tr1;
case 35:
	switch( (*p) ) {
		case 0: goto tr442;
		case 32: goto tr442;
		case 67: goto tr446;
		case 73: goto tr447;
		case 76: goto tr448;
		case 78: goto tr449;
		case 81: goto tr450;
		case 83: goto tr451;
		case 86: goto tr452;
		case 99: goto tr453;
		case 105: goto tr454;
		case 108: goto tr455;
		case 110: goto tr456;
		case 113: goto tr457;
		case 115: goto tr458;
		case 118: goto tr459;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr442;
	goto tr1;
case 36:
	switch( (*p) ) {
		case 0: goto tr460;
		case 32: goto tr460;
		case 67: goto tr461;
		case 73: goto tr462;
		case 76: goto tr463;
		case 78: goto tr464;
		case 81: goto tr465;
		case 83: goto tr466;
		case 86: goto tr467;
		case 99: goto tr468;
		case 105: goto tr469;
		case 108: goto tr470;
		case 110: goto tr471;
		case 113: goto tr472;
		case 115: goto tr473;
		case 118: goto tr474;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr460;
	goto tr1;
case 37:
	switch( (*p) ) {
		case 0: goto tr442;
		case 32: goto tr442;
		case 67: goto tr446;
		case 73: goto tr447;
		case 76: goto tr448;
		case 78: goto tr449;
		case 81: goto tr450;
		case 83: goto tr451;
		case 86: goto tr452;
		case 99: goto tr453;
		case 105: goto tr454;
		case 108: goto tr455;
		case 110: goto tr456;
		case 113: goto tr457;
		case 115: goto tr458;
		case 118: goto tr459;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr475;
	} else if ( (*p) >= 9 )
		goto tr442;
	goto tr1;
case 38:
	switch( (*p) ) {
		case 0: goto tr392;
		case 32: goto tr392;
		case 67: goto tr396;
		case 73: goto tr397;
		case 76: goto tr398;
		case 78: goto tr399;
		case 81: goto tr400;
		case 83: goto tr401;
		case 86: goto tr402;
		case 99: goto tr403;
		case 105: goto tr404;
		case 108: goto tr405;
		case 110: goto tr406;
		case 113: goto tr407;
		case 115: goto tr408;
		case 118: goto tr409;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr476;
	} else if ( (*p) >= 9 )
		goto tr392;
	goto tr1;
case 39:
	switch( (*p) ) {
		case 0: goto tr477;
		case 32: goto tr477;
		case 67: goto tr478;
		case 73: goto tr479;
		case 76: goto tr480;
		case 78: goto tr481;
		case 81: goto tr482;
		case 83: goto tr483;
		case 86: goto tr484;
		case 99: goto tr485;
		case 105: goto tr486;
		case 108: goto tr487;
		case 110: goto tr488;
		case 113: goto tr489;
		case 115: goto tr490;
		case 118: goto tr491;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr477;
	goto tr1;
case 40:
	switch( (*p) ) {
		case 0: goto tr374;
		case 32: goto tr374;
		case 67: goto tr378;
		case 73: goto tr379;
		case 76: goto tr380;
		case 78: goto tr381;
		case 81: goto tr382;
		case 83: goto tr383;
		case 86: goto tr384;
		case 99: goto tr385;
		case 105: goto tr386;
		case 108: goto tr387;
		case 110: goto tr388;
		case 113: goto tr389;
		case 115: goto tr390;
		case 118: goto tr391;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr492;
	} else if ( (*p) >= 9 )
		goto tr374;
	goto tr1;
case 41:
	switch( (*p) ) {
		case 0: goto tr493;
		case 32: goto tr493;
		case 67: goto tr494;
		case 73: goto tr495;
		case 76: goto tr496;
		case 78: goto tr497;
		case 81: goto tr498;
		case 83: goto tr499;
		case 86: goto tr500;
		case 99: goto tr501;
		case 105: goto tr502;
		case 108: goto tr503;
		case 110: goto tr504;
		case 113: goto tr505;
		case 115: goto tr506;
		case 118: goto tr507;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr493;
	goto tr1;
case 42:
	switch( (*p) ) {
		case 0: goto tr356;
		case 32: goto tr356;
		case 67: goto tr360;
		case 73: goto tr361;
		case 76: goto tr362;
		case 78: goto tr363;
		case 81: goto tr364;
		case 83: goto tr365;
		case 86: goto tr366;
		case 99: goto tr367;
		case 105: goto tr368;
		case 108: goto tr369;
		case 110: goto tr370;
		case 113: goto tr371;
		case 115: goto tr372;
		case 118: goto tr373;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr508;
	} else if ( (*p) >= 9 )
		goto tr356;
	goto tr1;
case 43:
	switch( (*p) ) {
		case 0: goto tr306;
		case 32: goto tr306;
		case 67: goto tr310;
		case 73: goto tr311;
		case 76: goto tr312;
		case 78: goto tr313;
		case 81: goto tr314;
		case 83: goto tr315;
		case 86: goto tr316;
		case 99: goto tr317;
		case 105: goto tr318;
		case 108: goto tr319;
		case 110: goto tr320;
		case 113: goto tr321;
		case 115: goto tr322;
		case 118: goto tr323;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr509;
	} else if ( (*p) >= 9 )
		goto tr306;
	goto tr1;
case 44:
	switch( (*p) ) {
		case 0: goto tr256;
		case 32: goto tr256;
		case 67: goto tr260;
		case 73: goto tr261;
		case 76: goto tr262;
		case 78: goto tr263;
		case 81: goto tr264;
		case 83: goto tr265;
		case 86: goto tr266;
		case 99: goto tr267;
		case 105: goto tr268;
		case 108: goto tr269;
		case 110: goto tr270;
		case 113: goto tr271;
		case 115: goto tr272;
		case 118: goto tr273;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr510;
	} else if ( (*p) >= 9 )
		goto tr256;
	goto tr1;
case 45:
	switch( (*p) ) {
		case 0: goto tr511;
		case 32: goto tr511;
		case 67: goto tr512;
		case 73: goto tr513;
		case 76: goto tr514;
		case 78: goto tr515;
		case 81: goto tr516;
		case 83: goto tr517;
		case 86: goto tr518;
		case 99: goto tr519;
		case 105: goto tr520;
		case 108: goto tr521;
		case 110: goto tr522;
		case 113: goto tr523;
		case 115: goto tr524;
		case 118: goto tr525;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr511;
	goto tr1;
case 46:
	switch( (*p) ) {
		case 0: goto tr238;
		case 32: goto tr238;
		case 67: goto tr242;
		case 73: goto tr243;
		case 76: goto tr244;
		case 78: goto tr245;
		case 81: goto tr246;
		case 83: goto tr247;
		case 86: goto tr248;
		case 99: goto tr249;
		case 105: goto tr250;
		case 108: goto tr251;
		case 110: goto tr252;
		case 113: goto tr253;
		case 115: goto tr254;
		case 118: goto tr255;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr526;
	} else if ( (*p) >= 9 )
		goto tr238;
	goto tr1;
case 47:
	switch( (*p) ) {
		case 0: goto tr527;
		case 32: goto tr527;
		case 67: goto tr528;
		case 73: goto tr529;
		case 76: goto tr530;
		case 78: goto tr531;
		case 81: goto tr532;
		case 83: goto tr533;
		case 86: goto tr534;
		case 99: goto tr535;
		case 105: goto tr536;
		case 108: goto tr537;
		case 110: goto tr538;
		case 113: goto tr539;
		case 115: goto tr540;
		case 118: goto tr541;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr527;
	goto tr1;
case 48:
	switch( (*p) ) {
		case 0: goto tr220;
		case 32: goto tr220;
		case 67: goto tr224;
		case 73: goto tr225;
		case 76: goto tr226;
		case 78: goto tr227;
		case 81: goto tr228;
		case 83: goto tr229;
		case 86: goto tr230;
		case 99: goto tr231;
		case 105: goto tr232;
		case 108: goto tr233;
		case 110: goto tr234;
		case 113: goto tr235;
		case 115: goto tr236;
		case 118: goto tr237;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr542;
	} else if ( (*p) >= 9 )
		goto tr220;
	goto tr1;
case 49:
	switch( (*p) ) {
		case 0: goto tr170;
		case 32: goto tr170;
		case 67: goto tr174;
		case 73: goto tr175;
		case 76: goto tr176;
		case 78: goto tr177;
		case 81: goto tr178;
		case 83: goto tr179;
		case 86: goto tr180;
		case 99: goto tr181;
		case 105: goto tr182;
		case 108: goto tr183;
		case 110: goto tr184;
		case 113: goto tr185;
		case 115: goto tr186;
		case 118: goto tr187;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr543;
	} else if ( (*p) >= 9 )
		goto tr170;
	goto tr1;
case 50:
	switch( (*p) ) {
		case 0: goto tr544;
		case 32: goto tr544;
		case 67: goto tr545;
		case 73: goto tr546;
		case 76: goto tr547;
		case 78: goto tr548;
		case 81: goto tr549;
		case 83: goto tr550;
		case 86: goto tr551;
		case 99: goto tr552;
		case 105: goto tr553;
		case 108: goto tr554;
		case 110: goto tr555;
		case 113: goto tr556;
		case 115: goto tr557;
		case 118: goto tr558;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr544;
	goto tr1;
case 51:
	switch( (*p) ) {
		case 0: goto tr152;
		case 32: goto tr152;
		case 67: goto tr156;
		case 73: goto tr157;
		case 76: goto tr158;
		case 78: goto tr159;
		case 81: goto tr160;
		case 83: goto tr161;
		case 86: goto tr162;
		case 99: goto tr163;
		case 105: goto tr164;
		case 108: goto tr165;
		case 110: goto tr166;
		case 113: goto tr167;
		case 115: goto tr168;
		case 118: goto tr169;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr559;
	} else if ( (*p) >= 9 )
		goto tr152;
	goto tr1;
case 52:
	switch( (*p) ) {
		case 0: goto tr560;
		case 32: goto tr560;
		case 67: goto tr561;
		case 73: goto tr562;
		case 76: goto tr563;
		case 78: goto tr564;
		case 81: goto tr565;
		case 83: goto tr566;
		case 86: goto tr567;
		case 99: goto tr568;
		case 105: goto tr569;
		case 108: goto tr570;
		case 110: goto tr571;
		case 113: goto tr572;
		case 115: goto tr573;
		case 118: goto tr574;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr560;
	goto tr1;
case 53:
	switch( (*p) ) {
		case 0: goto tr134;
		case 32: goto tr134;
		case 67: goto tr138;
		case 73: goto tr139;
		case 76: goto tr140;
		case 78: goto tr141;
		case 81: goto tr142;
		case 83: goto tr143;
		case 86: goto tr144;
		case 99: goto tr145;
		case 105: goto tr146;
		case 108: goto tr147;
		case 110: goto tr148;
		case 113: goto tr149;
		case 115: goto tr150;
		case 118: goto tr151;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr575;
	} else if ( (*p) >= 9 )
		goto tr134;
	goto tr1;
case 54:
	switch( (*p) ) {
		case 0: goto tr84;
		case 32: goto tr84;
		case 67: goto tr88;
		case 73: goto tr89;
		case 76: goto tr90;
		case 78: goto tr91;
		case 81: goto tr92;
		case 83: goto tr93;
		case 86: goto tr94;
		case 99: goto tr95;
		case 105: goto tr96;
		case 108: goto tr97;
		case 110: goto tr98;
		case 113: goto tr99;
		case 115: goto tr100;
		case 118: goto tr101;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr576;
	} else if ( (*p) >= 9 )
		goto tr84;
	goto tr1;
case 55:
	switch( (*p) ) {
		case 0: goto tr34;
		case 32: goto tr34;
		case 67: goto tr38;
		case 73: goto tr39;
		case 76: goto tr40;
		case 78: goto tr41;
		case 81: goto tr42;
		case 83: goto tr43;
		case 86: goto tr44;
		case 99: goto tr45;
		case 105: goto tr46;
		case 108: goto tr47;
		case 110: goto tr48;
		case 113: goto tr49;
		case 115: goto tr50;
		case 118: goto tr51;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr577;
	} else if ( (*p) >= 9 )
		goto tr34;
	goto tr1;
case 56:
	switch( (*p) ) {
		case 0: goto tr15;
		case 32: goto tr15;
		case 67: goto tr19;
		case 73: goto tr20;
		case 76: goto tr21;
		case 78: goto tr22;
		case 81: goto tr23;
		case 83: goto tr24;
		case 86: goto tr25;
		case 99: goto tr26;
		case 105: goto tr27;
		case 108: goto tr28;
		case 110: goto tr29;
		case 113: goto tr30;
		case 115: goto tr31;
		case 118: goto tr32;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr15;
	goto tr1;
case 57:
	switch( (*p) ) {
		case 0: goto tr578;
		case 32: goto tr578;
		case 67: goto tr579;
		case 73: goto tr580;
		case 76: goto tr581;
		case 78: goto tr582;
		case 81: goto tr583;
		case 83: goto tr584;
		case 86: goto tr585;
		case 99: goto tr586;
		case 105: goto tr587;
		case 108: goto tr588;
		case 110: goto tr589;
		case 113: goto tr590;
		case 115: goto tr591;
		case 118: goto tr592;
	}
	if ( 9 <= (*p) && (*p) <= 13 )
		goto tr578;
	goto tr1;
case 58:
	switch( (*p) ) {
		case 0: goto tr15;
		case 32: goto tr15;
		case 67: goto tr19;
		case 73: goto tr20;
		case 76: goto tr21;
		case 78: goto tr22;
		case 81: goto tr23;
		case 83: goto tr24;
		case 86: goto tr25;
		case 99: goto tr26;
		case 105: goto tr27;
		case 108: goto tr28;
		case 110: goto tr29;
		case 113: goto tr30;
		case 115: goto tr31;
		case 118: goto tr32;
	}
	if ( (*p) > 13 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr593;
	} else if ( (*p) >= 9 )
		goto tr15;
	goto tr1;
	}

	tr1: cs = 0; goto _again;
	tr0: cs = 2; goto f0;
	tr19: cs = 2; goto f5;
	tr38: cs = 2; goto f9;
	tr55: cs = 2; goto f14;
	tr70: cs = 2; goto f17;
	tr88: cs = 2; goto f20;
	tr105: cs = 2; goto f23;
	tr120: cs = 2; goto f26;
	tr138: cs = 2; goto f29;
	tr156: cs = 2; goto f32;
	tr174: cs = 2; goto f35;
	tr191: cs = 2; goto f38;
	tr206: cs = 2; goto f41;
	tr224: cs = 2; goto f44;
	tr242: cs = 2; goto f47;
	tr260: cs = 2; goto f50;
	tr277: cs = 2; goto f53;
	tr292: cs = 2; goto f56;
	tr310: cs = 2; goto f59;
	tr327: cs = 2; goto f62;
	tr342: cs = 2; goto f65;
	tr360: cs = 2; goto f68;
	tr378: cs = 2; goto f71;
	tr396: cs = 2; goto f74;
	tr413: cs = 2; goto f77;
	tr428: cs = 2; goto f80;
	tr446: cs = 2; goto f83;
	tr461: cs = 2; goto f86;
	tr478: cs = 2; goto f90;
	tr494: cs = 2; goto f93;
	tr512: cs = 2; goto f96;
	tr528: cs = 2; goto f99;
	tr545: cs = 2; goto f102;
	tr561: cs = 2; goto f105;
	tr579: cs = 2; goto f108;
	tr33: cs = 3; goto _again;
	tr15: cs = 3; goto f2;
	tr34: cs = 3; goto f8;
	tr52: cs = 3; goto f11;
	tr69: cs = 3; goto f16;
	tr84: cs = 3; goto f19;
	tr102: cs = 3; goto f22;
	tr119: cs = 3; goto f25;
	tr134: cs = 3; goto f28;
	tr152: cs = 3; goto f31;
	tr170: cs = 3; goto f34;
	tr188: cs = 3; goto f37;
	tr205: cs = 3; goto f40;
	tr220: cs = 3; goto f43;
	tr238: cs = 3; goto f46;
	tr256: cs = 3; goto f49;
	tr274: cs = 3; goto f52;
	tr291: cs = 3; goto f55;
	tr306: cs = 3; goto f58;
	tr324: cs = 3; goto f61;
	tr341: cs = 3; goto f64;
	tr356: cs = 3; goto f67;
	tr374: cs = 3; goto f70;
	tr392: cs = 3; goto f73;
	tr410: cs = 3; goto f76;
	tr427: cs = 3; goto f79;
	tr442: cs = 3; goto f82;
	tr460: cs = 3; goto f85;
	tr477: cs = 3; goto f89;
	tr493: cs = 3; goto f92;
	tr511: cs = 3; goto f95;
	tr527: cs = 3; goto f98;
	tr544: cs = 3; goto f101;
	tr560: cs = 3; goto f104;
	tr578: cs = 3; goto f107;
	tr2: cs = 4; goto f0;
	tr20: cs = 4; goto f5;
	tr39: cs = 4; goto f9;
	tr56: cs = 4; goto f14;
	tr71: cs = 4; goto f17;
	tr89: cs = 4; goto f20;
	tr106: cs = 4; goto f23;
	tr121: cs = 4; goto f26;
	tr139: cs = 4; goto f29;
	tr157: cs = 4; goto f32;
	tr175: cs = 4; goto f35;
	tr192: cs = 4; goto f38;
	tr207: cs = 4; goto f41;
	tr225: cs = 4; goto f44;
	tr243: cs = 4; goto f47;
	tr261: cs = 4; goto f50;
	tr278: cs = 4; goto f53;
	tr293: cs = 4; goto f56;
	tr311: cs = 4; goto f59;
	tr328: cs = 4; goto f62;
	tr343: cs = 4; goto f65;
	tr361: cs = 4; goto f68;
	tr379: cs = 4; goto f71;
	tr397: cs = 4; goto f74;
	tr414: cs = 4; goto f77;
	tr429: cs = 4; goto f80;
	tr447: cs = 4; goto f83;
	tr462: cs = 4; goto f86;
	tr479: cs = 4; goto f90;
	tr495: cs = 4; goto f93;
	tr513: cs = 4; goto f96;
	tr529: cs = 4; goto f99;
	tr546: cs = 4; goto f102;
	tr562: cs = 4; goto f105;
	tr580: cs = 4; goto f108;
	tr35: cs = 5; goto _again;
	tr36: cs = 6; goto _again;
	tr53: cs = 6; goto f12;
	tr3: cs = 7; goto f0;
	tr21: cs = 7; goto f5;
	tr40: cs = 7; goto f9;
	tr57: cs = 7; goto f14;
	tr72: cs = 7; goto f17;
	tr90: cs = 7; goto f20;
	tr107: cs = 7; goto f23;
	tr122: cs = 7; goto f26;
	tr140: cs = 7; goto f29;
	tr158: cs = 7; goto f32;
	tr176: cs = 7; goto f35;
	tr193: cs = 7; goto f38;
	tr208: cs = 7; goto f41;
	tr226: cs = 7; goto f44;
	tr244: cs = 7; goto f47;
	tr262: cs = 7; goto f50;
	tr279: cs = 7; goto f53;
	tr294: cs = 7; goto f56;
	tr312: cs = 7; goto f59;
	tr329: cs = 7; goto f62;
	tr344: cs = 7; goto f65;
	tr362: cs = 7; goto f68;
	tr380: cs = 7; goto f71;
	tr398: cs = 7; goto f74;
	tr415: cs = 7; goto f77;
	tr430: cs = 7; goto f80;
	tr448: cs = 7; goto f83;
	tr463: cs = 7; goto f86;
	tr480: cs = 7; goto f90;
	tr496: cs = 7; goto f93;
	tr514: cs = 7; goto f96;
	tr530: cs = 7; goto f99;
	tr547: cs = 7; goto f102;
	tr563: cs = 7; goto f105;
	tr581: cs = 7; goto f108;
	tr85: cs = 8; goto _again;
	tr86: cs = 9; goto _again;
	tr103: cs = 9; goto f12;
	tr4: cs = 10; goto f0;
	tr22: cs = 10; goto f5;
	tr41: cs = 10; goto f9;
	tr58: cs = 10; goto f14;
	tr73: cs = 10; goto f17;
	tr91: cs = 10; goto f20;
	tr108: cs = 10; goto f23;
	tr123: cs = 10; goto f26;
	tr141: cs = 10; goto f29;
	tr159: cs = 10; goto f32;
	tr177: cs = 10; goto f35;
	tr194: cs = 10; goto f38;
	tr209: cs = 10; goto f41;
	tr227: cs = 10; goto f44;
	tr245: cs = 10; goto f47;
	tr263: cs = 10; goto f50;
	tr280: cs = 10; goto f53;
	tr295: cs = 10; goto f56;
	tr313: cs = 10; goto f59;
	tr330: cs = 10; goto f62;
	tr345: cs = 10; goto f65;
	tr363: cs = 10; goto f68;
	tr381: cs = 10; goto f71;
	tr399: cs = 10; goto f74;
	tr416: cs = 10; goto f77;
	tr431: cs = 10; goto f80;
	tr449: cs = 10; goto f83;
	tr464: cs = 10; goto f86;
	tr481: cs = 10; goto f90;
	tr497: cs = 10; goto f93;
	tr515: cs = 10; goto f96;
	tr531: cs = 10; goto f99;
	tr548: cs = 10; goto f102;
	tr564: cs = 10; goto f105;
	tr582: cs = 10; goto f108;
	tr135: cs = 11; goto f3;
	tr5: cs = 12; goto f0;
	tr23: cs = 12; goto f5;
	tr42: cs = 12; goto f9;
	tr59: cs = 12; goto f14;
	tr74: cs = 12; goto f17;
	tr92: cs = 12; goto f20;
	tr109: cs = 12; goto f23;
	tr124: cs = 12; goto f26;
	tr142: cs = 12; goto f29;
	tr160: cs = 12; goto f32;
	tr178: cs = 12; goto f35;
	tr195: cs = 12; goto f38;
	tr210: cs = 12; goto f41;
	tr228: cs = 12; goto f44;
	tr246: cs = 12; goto f47;
	tr264: cs = 12; goto f50;
	tr281: cs = 12; goto f53;
	tr296: cs = 12; goto f56;
	tr314: cs = 12; goto f59;
	tr331: cs = 12; goto f62;
	tr346: cs = 12; goto f65;
	tr364: cs = 12; goto f68;
	tr382: cs = 12; goto f71;
	tr400: cs = 12; goto f74;
	tr417: cs = 12; goto f77;
	tr432: cs = 12; goto f80;
	tr450: cs = 12; goto f83;
	tr465: cs = 12; goto f86;
	tr482: cs = 12; goto f90;
	tr498: cs = 12; goto f93;
	tr516: cs = 12; goto f96;
	tr532: cs = 12; goto f99;
	tr549: cs = 12; goto f102;
	tr565: cs = 12; goto f105;
	tr583: cs = 12; goto f108;
	tr153: cs = 13; goto f3;
	tr6: cs = 14; goto f0;
	tr24: cs = 14; goto f5;
	tr43: cs = 14; goto f9;
	tr60: cs = 14; goto f14;
	tr75: cs = 14; goto f17;
	tr93: cs = 14; goto f20;
	tr110: cs = 14; goto f23;
	tr125: cs = 14; goto f26;
	tr143: cs = 14; goto f29;
	tr161: cs = 14; goto f32;
	tr179: cs = 14; goto f35;
	tr196: cs = 14; goto f38;
	tr211: cs = 14; goto f41;
	tr229: cs = 14; goto f44;
	tr247: cs = 14; goto f47;
	tr265: cs = 14; goto f50;
	tr282: cs = 14; goto f53;
	tr297: cs = 14; goto f56;
	tr315: cs = 14; goto f59;
	tr332: cs = 14; goto f62;
	tr347: cs = 14; goto f65;
	tr365: cs = 14; goto f68;
	tr383: cs = 14; goto f71;
	tr401: cs = 14; goto f74;
	tr418: cs = 14; goto f77;
	tr433: cs = 14; goto f80;
	tr451: cs = 14; goto f83;
	tr466: cs = 14; goto f86;
	tr483: cs = 14; goto f90;
	tr499: cs = 14; goto f93;
	tr517: cs = 14; goto f96;
	tr533: cs = 14; goto f99;
	tr550: cs = 14; goto f102;
	tr566: cs = 14; goto f105;
	tr584: cs = 14; goto f108;
	tr171: cs = 15; goto _again;
	tr172: cs = 16; goto _again;
	tr189: cs = 16; goto f12;
	tr7: cs = 17; goto f0;
	tr25: cs = 17; goto f5;
	tr44: cs = 17; goto f9;
	tr61: cs = 17; goto f14;
	tr76: cs = 17; goto f17;
	tr94: cs = 17; goto f20;
	tr111: cs = 17; goto f23;
	tr126: cs = 17; goto f26;
	tr144: cs = 17; goto f29;
	tr162: cs = 17; goto f32;
	tr180: cs = 17; goto f35;
	tr197: cs = 17; goto f38;
	tr212: cs = 17; goto f41;
	tr230: cs = 17; goto f44;
	tr248: cs = 17; goto f47;
	tr266: cs = 17; goto f50;
	tr283: cs = 17; goto f53;
	tr298: cs = 17; goto f56;
	tr316: cs = 17; goto f59;
	tr333: cs = 17; goto f62;
	tr348: cs = 17; goto f65;
	tr366: cs = 17; goto f68;
	tr384: cs = 17; goto f71;
	tr402: cs = 17; goto f74;
	tr419: cs = 17; goto f77;
	tr434: cs = 17; goto f80;
	tr452: cs = 17; goto f83;
	tr467: cs = 17; goto f86;
	tr484: cs = 17; goto f90;
	tr500: cs = 17; goto f93;
	tr518: cs = 17; goto f96;
	tr534: cs = 17; goto f99;
	tr551: cs = 17; goto f102;
	tr567: cs = 17; goto f105;
	tr585: cs = 17; goto f108;
	tr221: cs = 18; goto f3;
	tr8: cs = 19; goto f0;
	tr26: cs = 19; goto f5;
	tr45: cs = 19; goto f9;
	tr62: cs = 19; goto f14;
	tr77: cs = 19; goto f17;
	tr95: cs = 19; goto f20;
	tr112: cs = 19; goto f23;
	tr127: cs = 19; goto f26;
	tr145: cs = 19; goto f29;
	tr163: cs = 19; goto f32;
	tr181: cs = 19; goto f35;
	tr198: cs = 19; goto f38;
	tr213: cs = 19; goto f41;
	tr231: cs = 19; goto f44;
	tr249: cs = 19; goto f47;
	tr267: cs = 19; goto f50;
	tr284: cs = 19; goto f53;
	tr299: cs = 19; goto f56;
	tr317: cs = 19; goto f59;
	tr334: cs = 19; goto f62;
	tr349: cs = 19; goto f65;
	tr367: cs = 19; goto f68;
	tr385: cs = 19; goto f71;
	tr403: cs = 19; goto f74;
	tr420: cs = 19; goto f77;
	tr435: cs = 19; goto f80;
	tr453: cs = 19; goto f83;
	tr468: cs = 19; goto f86;
	tr485: cs = 19; goto f90;
	tr501: cs = 19; goto f93;
	tr519: cs = 19; goto f96;
	tr535: cs = 19; goto f99;
	tr552: cs = 19; goto f102;
	tr568: cs = 19; goto f105;
	tr586: cs = 19; goto f108;
	tr239: cs = 20; goto f3;
	tr9: cs = 21; goto f0;
	tr27: cs = 21; goto f5;
	tr46: cs = 21; goto f9;
	tr63: cs = 21; goto f14;
	tr78: cs = 21; goto f17;
	tr96: cs = 21; goto f20;
	tr113: cs = 21; goto f23;
	tr128: cs = 21; goto f26;
	tr146: cs = 21; goto f29;
	tr164: cs = 21; goto f32;
	tr182: cs = 21; goto f35;
	tr199: cs = 21; goto f38;
	tr214: cs = 21; goto f41;
	tr232: cs = 21; goto f44;
	tr250: cs = 21; goto f47;
	tr268: cs = 21; goto f50;
	tr285: cs = 21; goto f53;
	tr300: cs = 21; goto f56;
	tr318: cs = 21; goto f59;
	tr335: cs = 21; goto f62;
	tr350: cs = 21; goto f65;
	tr368: cs = 21; goto f68;
	tr386: cs = 21; goto f71;
	tr404: cs = 21; goto f74;
	tr421: cs = 21; goto f77;
	tr436: cs = 21; goto f80;
	tr454: cs = 21; goto f83;
	tr469: cs = 21; goto f86;
	tr486: cs = 21; goto f90;
	tr502: cs = 21; goto f93;
	tr520: cs = 21; goto f96;
	tr536: cs = 21; goto f99;
	tr553: cs = 21; goto f102;
	tr569: cs = 21; goto f105;
	tr587: cs = 21; goto f108;
	tr257: cs = 22; goto _again;
	tr258: cs = 23; goto _again;
	tr275: cs = 23; goto f12;
	tr10: cs = 24; goto f0;
	tr28: cs = 24; goto f5;
	tr47: cs = 24; goto f9;
	tr64: cs = 24; goto f14;
	tr79: cs = 24; goto f17;
	tr97: cs = 24; goto f20;
	tr114: cs = 24; goto f23;
	tr129: cs = 24; goto f26;
	tr147: cs = 24; goto f29;
	tr165: cs = 24; goto f32;
	tr183: cs = 24; goto f35;
	tr200: cs = 24; goto f38;
	tr215: cs = 24; goto f41;
	tr233: cs = 24; goto f44;
	tr251: cs = 24; goto f47;
	tr269: cs = 24; goto f50;
	tr286: cs = 24; goto f53;
	tr301: cs = 24; goto f56;
	tr319: cs = 24; goto f59;
	tr336: cs = 24; goto f62;
	tr351: cs = 24; goto f65;
	tr369: cs = 24; goto f68;
	tr387: cs = 24; goto f71;
	tr405: cs = 24; goto f74;
	tr422: cs = 24; goto f77;
	tr437: cs = 24; goto f80;
	tr455: cs = 24; goto f83;
	tr470: cs = 24; goto f86;
	tr487: cs = 24; goto f90;
	tr503: cs = 24; goto f93;
	tr521: cs = 24; goto f96;
	tr537: cs = 24; goto f99;
	tr554: cs = 24; goto f102;
	tr570: cs = 24; goto f105;
	tr588: cs = 24; goto f108;
	tr307: cs = 25; goto _again;
	tr308: cs = 26; goto _again;
	tr325: cs = 26; goto f12;
	tr11: cs = 27; goto f0;
	tr29: cs = 27; goto f5;
	tr48: cs = 27; goto f9;
	tr65: cs = 27; goto f14;
	tr80: cs = 27; goto f17;
	tr98: cs = 27; goto f20;
	tr115: cs = 27; goto f23;
	tr130: cs = 27; goto f26;
	tr148: cs = 27; goto f29;
	tr166: cs = 27; goto f32;
	tr184: cs = 27; goto f35;
	tr201: cs = 27; goto f38;
	tr216: cs = 27; goto f41;
	tr234: cs = 27; goto f44;
	tr252: cs = 27; goto f47;
	tr270: cs = 27; goto f50;
	tr287: cs = 27; goto f53;
	tr302: cs = 27; goto f56;
	tr320: cs = 27; goto f59;
	tr337: cs = 27; goto f62;
	tr352: cs = 27; goto f65;
	tr370: cs = 27; goto f68;
	tr388: cs = 27; goto f71;
	tr406: cs = 27; goto f74;
	tr423: cs = 27; goto f77;
	tr438: cs = 27; goto f80;
	tr456: cs = 27; goto f83;
	tr471: cs = 27; goto f86;
	tr488: cs = 27; goto f90;
	tr504: cs = 27; goto f93;
	tr522: cs = 27; goto f96;
	tr538: cs = 27; goto f99;
	tr555: cs = 27; goto f102;
	tr571: cs = 27; goto f105;
	tr589: cs = 27; goto f108;
	tr357: cs = 28; goto f3;
	tr12: cs = 29; goto f0;
	tr30: cs = 29; goto f5;
	tr49: cs = 29; goto f9;
	tr66: cs = 29; goto f14;
	tr81: cs = 29; goto f17;
	tr99: cs = 29; goto f20;
	tr116: cs = 29; goto f23;
	tr131: cs = 29; goto f26;
	tr149: cs = 29; goto f29;
	tr167: cs = 29; goto f32;
	tr185: cs = 29; goto f35;
	tr202: cs = 29; goto f38;
	tr217: cs = 29; goto f41;
	tr235: cs = 29; goto f44;
	tr253: cs = 29; goto f47;
	tr271: cs = 29; goto f50;
	tr288: cs = 29; goto f53;
	tr303: cs = 29; goto f56;
	tr321: cs = 29; goto f59;
	tr338: cs = 29; goto f62;
	tr353: cs = 29; goto f65;
	tr371: cs = 29; goto f68;
	tr389: cs = 29; goto f71;
	tr407: cs = 29; goto f74;
	tr424: cs = 29; goto f77;
	tr439: cs = 29; goto f80;
	tr457: cs = 29; goto f83;
	tr472: cs = 29; goto f86;
	tr489: cs = 29; goto f90;
	tr505: cs = 29; goto f93;
	tr523: cs = 29; goto f96;
	tr539: cs = 29; goto f99;
	tr556: cs = 29; goto f102;
	tr572: cs = 29; goto f105;
	tr590: cs = 29; goto f108;
	tr375: cs = 30; goto f3;
	tr13: cs = 31; goto f0;
	tr31: cs = 31; goto f5;
	tr50: cs = 31; goto f9;
	tr67: cs = 31; goto f14;
	tr82: cs = 31; goto f17;
	tr100: cs = 31; goto f20;
	tr117: cs = 31; goto f23;
	tr132: cs = 31; goto f26;
	tr150: cs = 31; goto f29;
	tr168: cs = 31; goto f32;
	tr186: cs = 31; goto f35;
	tr203: cs = 31; goto f38;
	tr218: cs = 31; goto f41;
	tr236: cs = 31; goto f44;
	tr254: cs = 31; goto f47;
	tr272: cs = 31; goto f50;
	tr289: cs = 31; goto f53;
	tr304: cs = 31; goto f56;
	tr322: cs = 31; goto f59;
	tr339: cs = 31; goto f62;
	tr354: cs = 31; goto f65;
	tr372: cs = 31; goto f68;
	tr390: cs = 31; goto f71;
	tr408: cs = 31; goto f74;
	tr425: cs = 31; goto f77;
	tr440: cs = 31; goto f80;
	tr458: cs = 31; goto f83;
	tr473: cs = 31; goto f86;
	tr490: cs = 31; goto f90;
	tr506: cs = 31; goto f93;
	tr524: cs = 31; goto f96;
	tr540: cs = 31; goto f99;
	tr557: cs = 31; goto f102;
	tr573: cs = 31; goto f105;
	tr591: cs = 31; goto f108;
	tr393: cs = 32; goto _again;
	tr394: cs = 33; goto _again;
	tr411: cs = 33; goto f12;
	tr14: cs = 34; goto f0;
	tr32: cs = 34; goto f5;
	tr51: cs = 34; goto f9;
	tr68: cs = 34; goto f14;
	tr83: cs = 34; goto f17;
	tr101: cs = 34; goto f20;
	tr118: cs = 34; goto f23;
	tr133: cs = 34; goto f26;
	tr151: cs = 34; goto f29;
	tr169: cs = 34; goto f32;
	tr187: cs = 34; goto f35;
	tr204: cs = 34; goto f38;
	tr219: cs = 34; goto f41;
	tr237: cs = 34; goto f44;
	tr255: cs = 34; goto f47;
	tr273: cs = 34; goto f50;
	tr290: cs = 34; goto f53;
	tr305: cs = 34; goto f56;
	tr323: cs = 34; goto f59;
	tr340: cs = 34; goto f62;
	tr355: cs = 34; goto f65;
	tr373: cs = 34; goto f68;
	tr391: cs = 34; goto f71;
	tr409: cs = 34; goto f74;
	tr426: cs = 34; goto f77;
	tr441: cs = 34; goto f80;
	tr459: cs = 34; goto f83;
	tr474: cs = 34; goto f86;
	tr491: cs = 34; goto f90;
	tr507: cs = 34; goto f93;
	tr525: cs = 34; goto f96;
	tr541: cs = 34; goto f99;
	tr558: cs = 34; goto f102;
	tr574: cs = 34; goto f105;
	tr592: cs = 34; goto f108;
	tr443: cs = 35; goto f3;
	tr444: cs = 36; goto _again;
	tr445: cs = 37; goto f4;
	tr475: cs = 37; goto f87;
	tr395: cs = 38; goto f4;
	tr412: cs = 38; goto f13;
	tr476: cs = 38; goto f87;
	tr376: cs = 39; goto _again;
	tr377: cs = 40; goto f4;
	tr492: cs = 40; goto f87;
	tr358: cs = 41; goto _again;
	tr359: cs = 42; goto f4;
	tr508: cs = 42; goto f87;
	tr309: cs = 43; goto f4;
	tr326: cs = 43; goto f13;
	tr509: cs = 43; goto f87;
	tr259: cs = 44; goto f4;
	tr276: cs = 44; goto f13;
	tr510: cs = 44; goto f87;
	tr240: cs = 45; goto _again;
	tr241: cs = 46; goto f4;
	tr526: cs = 46; goto f87;
	tr222: cs = 47; goto _again;
	tr223: cs = 48; goto f4;
	tr542: cs = 48; goto f87;
	tr173: cs = 49; goto f4;
	tr190: cs = 49; goto f13;
	tr543: cs = 49; goto f87;
	tr154: cs = 50; goto _again;
	tr155: cs = 51; goto f4;
	tr559: cs = 51; goto f87;
	tr136: cs = 52; goto _again;
	tr137: cs = 53; goto f4;
	tr575: cs = 53; goto f87;
	tr87: cs = 54; goto f4;
	tr104: cs = 54; goto f13;
	tr576: cs = 54; goto f87;
	tr37: cs = 55; goto f4;
	tr54: cs = 55; goto f13;
	tr577: cs = 55; goto f87;
	tr16: cs = 56; goto f3;
	tr17: cs = 57; goto _again;
	tr18: cs = 58; goto f4;
	tr593: cs = 58; goto f87;

f0:
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f4:
	{
    count = (*p) - '0';
  }
	goto _again;
f87:
	{
    count = count * 10 + ((*p) - '0');
  }
	goto _again;
f12:
	{
    platform = true;
  }
	goto _again;
f3:
	{
#define NON_NATIVE_ERROR_SIZE 36

    char non_native_msg[NON_NATIVE_ERROR_SIZE];
    snprintf(non_native_msg, NON_NATIVE_ERROR_SIZE,
             "'%c' allowed only after types sSiIlL", *p);
    Exception::argument_error(state, non_native_msg);
  }
	goto _again;
f13:
	{
    platform = true;
  }
	{
    count = (*p) - '0';
  }
	goto _again;
f2:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f46:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f34:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f73:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f67:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f82:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f8:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f49:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f28:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f43:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f31:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f70:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f19:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f58:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f107:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f95:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f40:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f79:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f92:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f85:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f16:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f55:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f104:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f98:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f101:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f89:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f25:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f64:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f37:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f76:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f11:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f52:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f22:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f61:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	goto _again;
f5:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f47:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f35:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f74:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f68:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f83:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f9:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f50:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f29:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f44:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f32:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f71:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f20:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f59:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f108:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f96:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f41:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f80:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f93:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f86:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f17:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f56:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f105:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f99:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f102:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f90:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f26:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f65:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f38:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f77:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f14:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f53:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f23:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;
f62:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    count = 1;
    rest = false;
    platform = false;
  }
	goto _again;

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _unpack_eof_actions[cs] ) {
	case 7:
	{
    return array;
  }
	break;
	case 2:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 46:
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 34:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 73:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 67:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 82:
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 8:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 49:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 28:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 43:
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 31:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 70:
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 19:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 58:
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 107:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, UBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 95:
	{
    count = 0;
    rest = true;
  }
	{
    width = 1;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, SBYTE);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 40:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 79:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 92:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, BE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 85:
	{
    count = 0;
    rest = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, LE_U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 16:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 55:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 104:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, BE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 98:
	{
    count = 0;
    rest = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, LE_U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 101:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 89:
	{
    count = 0;
    rest = true;
  }
	{
    width = 8;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S64BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 25:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 64:
	{
    count = 0;
    rest = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 37:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, U16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 76:
	{
    platform = true;
  }
	{
    width = 2;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(FIXNUM, S16BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 11:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, U32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 52:
	{
    platform = true;
  }
	{
    width = 4;
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    UNPACK_ELEMENTS(INTEGER, S32BITS);
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 22:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, U32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, U64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, U32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	case 61:
	{
    platform = true;
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      width = 4;
#else
      width = 8;
#endif
    } else {
      width = 4;
    }
  }
	{
    stop = rest ? size() + 1 : index + width * count;
    if(stop > size()) {
      stop = index + ((size() - index) / width) * width;
    }
  }
	{
    if(platform) {
#if RBX_SIZEOF_LONG == 4
      UNPACK_ELEMENTS(INTEGER, S32BITS);
#else
      UNPACK_ELEMENTS(INTEGER, S64BITS);
#endif
    } else {
      UNPACK_ELEMENTS(INTEGER, S32BITS);
    }
  }
	{
    while(count > 0) {
      array->append(state, Qnil);
      count--;
    }
  }
	{
    return array;
  }
	break;
	}
	}

	_out: {}
	}



    if(unpack_first_final && unpack_error && unpack_en_main) {
      // do nothing
    }

    return force_as<Array>(Primitives::failure());
  }
}
