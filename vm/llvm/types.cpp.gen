// Generated by llvm2cpp - DO NOT MODIFY!


Module* makeLLVMModuleContents(Module *mod) {

mod->setModuleIdentifier("vm/gen/types.bc");

// Type Definitions
std::vector<const Type*>StructTy_struct_jit_state_fields;
std::vector<const Type*>StructTy_struct_rubinius__Object_fields;
std::vector<const Type*>StructTy_struct_rubinius__ObjectHeader_fields;
std::vector<const Type*>StructTy_struct_rubinius__ObjectHeader____44_fields;
StructTy_struct_rubinius__ObjectHeader____44_fields.push_back(IntegerType::get(32));
StructType* StructTy_struct_rubinius__ObjectHeader____44 = StructType::get(StructTy_struct_rubinius__ObjectHeader____44_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::ObjectHeader::$_44", StructTy_struct_rubinius__ObjectHeader____44);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(StructTy_struct_rubinius__ObjectHeader____44);
std::vector<const Type*>StructTy_struct_rubinius__Class_fields;
std::vector<const Type*>StructTy_struct_rubinius__Module_fields;
PATypeHolder StructTy_struct_rubinius__Object_fwd = OpaqueType::get();
StructTy_struct_rubinius__Module_fields.push_back(StructTy_struct_rubinius__Object_fwd);
OpaqueType* OpaqueTy_struct_rubinius__LookupTable = OpaqueType::get();
mod->addTypeName("struct.rubinius::LookupTable", OpaqueTy_struct_rubinius__LookupTable);

PointerType* PointerTy_3 = PointerType::get(OpaqueTy_struct_rubinius__LookupTable, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_3);
OpaqueType* OpaqueTy_struct_rubinius__Symbol = OpaqueType::get();
mod->addTypeName("struct.rubinius::Symbol", OpaqueTy_struct_rubinius__Symbol);

PointerType* PointerTy_4 = PointerType::get(OpaqueTy_struct_rubinius__Symbol, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__Module_fields.push_back(PointerTy_3);
PATypeHolder StructTy_struct_rubinius__Module_fwd = OpaqueType::get();
PointerType* PointerTy_5 = PointerType::get(StructTy_struct_rubinius__Module_fwd, 0);

StructTy_struct_rubinius__Module_fields.push_back(PointerTy_5);
StructType* StructTy_struct_rubinius__Module = StructType::get(StructTy_struct_rubinius__Module_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Module", StructTy_struct_rubinius__Module);
cast<OpaqueType>(StructTy_struct_rubinius__Module_fwd.get())->refineAbstractTypeTo(StructTy_struct_rubinius__Module);
StructTy_struct_rubinius__Module = cast<StructType>(StructTy_struct_rubinius__Module_fwd.get());


StructTy_struct_rubinius__Class_fields.push_back(StructTy_struct_rubinius__Module);
OpaqueType* OpaqueTy_struct_rubinius__Fixnum = OpaqueType::get();
mod->addTypeName("struct.rubinius::Fixnum", OpaqueTy_struct_rubinius__Fixnum);

PointerType* PointerTy_6 = PointerType::get(OpaqueTy_struct_rubinius__Fixnum, 0);

StructTy_struct_rubinius__Class_fields.push_back(PointerTy_6);
OpaqueType* OpaqueTy_struct_rubinius__TypeInfo = OpaqueType::get();
mod->addTypeName("struct.rubinius::TypeInfo", OpaqueTy_struct_rubinius__TypeInfo);

PointerType* PointerTy_7 = PointerType::get(OpaqueTy_struct_rubinius__TypeInfo, 0);

StructTy_struct_rubinius__Class_fields.push_back(PointerTy_7);
StructTy_struct_rubinius__Class_fields.push_back(IntegerType::get(32));
StructType* StructTy_struct_rubinius__Class = StructType::get(StructTy_struct_rubinius__Class_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Class", StructTy_struct_rubinius__Class);

PointerType* PointerTy_2 = PointerType::get(StructTy_struct_rubinius__Class, 0);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_2);
PATypeHolder PointerTy_1_fwd = OpaqueType::get();
StructTy_struct_rubinius__ObjectHeader_fields.push_back(PointerTy_1_fwd);
PointerType* PointerTy_9 = PointerType::get(IntegerType::get(8), 0);

ArrayType* ArrayTy_8 = ArrayType::get(PointerTy_9, 0);

StructTy_struct_rubinius__ObjectHeader_fields.push_back(ArrayTy_8);
StructType* StructTy_struct_rubinius__ObjectHeader = StructType::get(StructTy_struct_rubinius__ObjectHeader_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::ObjectHeader", StructTy_struct_rubinius__ObjectHeader);

StructTy_struct_rubinius__Object_fields.push_back(StructTy_struct_rubinius__ObjectHeader);
StructType* StructTy_struct_rubinius__Object = StructType::get(StructTy_struct_rubinius__Object_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Object", StructTy_struct_rubinius__Object);
cast<OpaqueType>(StructTy_struct_rubinius__Object_fwd.get())->refineAbstractTypeTo(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Object = cast<StructType>(StructTy_struct_rubinius__Object_fwd.get());


PointerType* PointerTy_1 = PointerType::get(StructTy_struct_rubinius__Object, 0);
cast<OpaqueType>(PointerTy_1_fwd.get())->refineAbstractTypeTo(PointerTy_1);
PointerTy_1 = cast<PointerType>(PointerTy_1_fwd.get());


PointerType* PointerTy_0 = PointerType::get(PointerTy_1, 0);

StructTy_struct_jit_state_fields.push_back(PointerTy_0);
StructTy_struct_jit_state_fields.push_back(PointerTy_0);
StructType* StructTy_struct_jit_state = StructType::get(StructTy_struct_jit_state_fields, /*isPacked=*/false);
mod->addTypeName("struct.jit_state", StructTy_struct_jit_state);

std::vector<const Type*>StructTy_struct_rubinius__Arguments_fields;
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__Arguments_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_0);
std::vector<const Type*>StructTy_struct_rubinius__Array_fields;
StructTy_struct_rubinius__Array_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_6);
std::vector<const Type*>StructTy_struct_rubinius__Tuple_fields;
StructTy_struct_rubinius__Tuple_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Tuple_fields.push_back(IntegerType::get(32));
ArrayType* ArrayTy_12 = ArrayType::get(PointerTy_1, 0);

StructTy_struct_rubinius__Tuple_fields.push_back(ArrayTy_12);
StructType* StructTy_struct_rubinius__Tuple = StructType::get(StructTy_struct_rubinius__Tuple_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Tuple", StructTy_struct_rubinius__Tuple);

PointerType* PointerTy_11 = PointerType::get(StructTy_struct_rubinius__Tuple, 0);

StructTy_struct_rubinius__Array_fields.push_back(PointerTy_11);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_6);
StructTy_struct_rubinius__Array_fields.push_back(PointerTy_1);
StructType* StructTy_struct_rubinius__Array = StructType::get(StructTy_struct_rubinius__Array_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Array", StructTy_struct_rubinius__Array);

PointerType* PointerTy_10 = PointerType::get(StructTy_struct_rubinius__Array, 0);

StructTy_struct_rubinius__Arguments_fields.push_back(PointerTy_10);
StructType* StructTy_struct_rubinius__Arguments = StructType::get(StructTy_struct_rubinius__Arguments_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Arguments", StructTy_struct_rubinius__Arguments);

mod->addTypeName("struct.rubinius::Array", StructTy_struct_rubinius__Array);
std::vector<const Type*>StructTy_struct_rubinius__BlockEnvironment_fields;
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(StructTy_struct_rubinius__Object);
std::vector<const Type*>StructTy_struct_rubinius__VariableScope_fields;
StructTy_struct_rubinius__VariableScope_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_1);
std::vector<const Type*>StructTy_struct_rubinius__CompiledMethod_fields;
std::vector<const Type*>StructTy_struct_rubinius__Executable_fields;
StructTy_struct_rubinius__Executable_fields.push_back(StructTy_struct_rubinius__Object);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_6);
std::vector<const Type*>FuncTy_16_args;
OpaqueType* OpaqueTy_struct_rubinius__VM = OpaqueType::get();
mod->addTypeName("struct.rubinius::VM", OpaqueTy_struct_rubinius__VM);

PointerType* PointerTy_17 = PointerType::get(OpaqueTy_struct_rubinius__VM, 0);

FuncTy_16_args.push_back(PointerTy_17);
std::vector<const Type*>StructTy_struct_rubinius__CallFrame_fields;
PATypeHolder PointerTy_18_fwd = OpaqueType::get();
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_18_fwd);
OpaqueType* OpaqueTy_struct_rubinius__StaticScope = OpaqueType::get();
mod->addTypeName("struct.rubinius::StaticScope", OpaqueTy_struct_rubinius__StaticScope);

PointerType* PointerTy_19 = PointerType::get(OpaqueTy_struct_rubinius__StaticScope, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_19);
std::vector<const Type*>StructTy_struct_rubinius__Dispatch_fields;
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_5);
PATypeHolder StructTy_struct_rubinius__Executable_fwd = OpaqueType::get();
PointerType* PointerTy_21 = PointerType::get(StructTy_struct_rubinius__Executable_fwd, 0);

StructTy_struct_rubinius__Dispatch_fields.push_back(PointerTy_21);
StructTy_struct_rubinius__Dispatch_fields.push_back(IntegerType::get(8));
StructType* StructTy_struct_rubinius__Dispatch = StructType::get(StructTy_struct_rubinius__Dispatch_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Dispatch", StructTy_struct_rubinius__Dispatch);

PointerType* PointerTy_20 = PointerType::get(StructTy_struct_rubinius__Dispatch, 0);

StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_20);
PATypeHolder PointerTy_14_fwd = OpaqueType::get();
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_14_fwd);
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__CallFrame_fields.push_back(IntegerType::get(32));
PATypeHolder PointerTy_13_fwd = OpaqueType::get();
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_13_fwd);
StructTy_struct_rubinius__CallFrame_fields.push_back(PointerTy_13_fwd);
StructTy_struct_rubinius__CallFrame_fields.push_back(ArrayTy_12);
StructType* StructTy_struct_rubinius__CallFrame = StructType::get(StructTy_struct_rubinius__CallFrame_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::CallFrame", StructTy_struct_rubinius__CallFrame);

PointerType* PointerTy_18 = PointerType::get(StructTy_struct_rubinius__CallFrame, 0);
cast<OpaqueType>(PointerTy_18_fwd.get())->refineAbstractTypeTo(PointerTy_18);
PointerTy_18 = cast<PointerType>(PointerTy_18_fwd.get());


FuncTy_16_args.push_back(PointerTy_18);
FuncTy_16_args.push_back(PointerTy_20);
PointerType* PointerTy_22 = PointerType::get(StructTy_struct_rubinius__Arguments, 0);

FuncTy_16_args.push_back(PointerTy_22);
FunctionType* FuncTy_16 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_16_args,
  /*isVarArg=*/false);

PointerType* PointerTy_15 = PointerType::get(FuncTy_16, 0);

StructTy_struct_rubinius__Executable_fields.push_back(PointerTy_15);
StructType* StructTy_struct_rubinius__Executable = StructType::get(StructTy_struct_rubinius__Executable_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::Executable", StructTy_struct_rubinius__Executable);
cast<OpaqueType>(StructTy_struct_rubinius__Executable_fwd.get())->refineAbstractTypeTo(StructTy_struct_rubinius__Executable);
StructTy_struct_rubinius__Executable = cast<StructType>(StructTy_struct_rubinius__Executable_fwd.get());


StructTy_struct_rubinius__CompiledMethod_fields.push_back(StructTy_struct_rubinius__Executable);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
OpaqueType* OpaqueTy_struct_rubinius__InstructionSequence = OpaqueType::get();
mod->addTypeName("struct.rubinius::InstructionSequence", OpaqueTy_struct_rubinius__InstructionSequence);

PointerType* PointerTy_23 = PointerType::get(OpaqueTy_struct_rubinius__InstructionSequence, 0);

StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_23);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_6);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_6);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_6);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_6);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_11);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_11);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_11);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_4);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_19);
StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_11);
OpaqueType* OpaqueTy_struct_rubinius__VMMethod = OpaqueType::get();
mod->addTypeName("struct.rubinius::VMMethod", OpaqueTy_struct_rubinius__VMMethod);

PointerType* PointerTy_24 = PointerType::get(OpaqueTy_struct_rubinius__VMMethod, 0);

StructTy_struct_rubinius__CompiledMethod_fields.push_back(PointerTy_24);
StructType* StructTy_struct_rubinius__CompiledMethod = StructType::get(StructTy_struct_rubinius__CompiledMethod_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::CompiledMethod", StructTy_struct_rubinius__CompiledMethod);

PointerType* PointerTy_14 = PointerType::get(StructTy_struct_rubinius__CompiledMethod, 0);
cast<OpaqueType>(PointerTy_14_fwd.get())->refineAbstractTypeTo(PointerTy_14);
PointerTy_14 = cast<PointerType>(PointerTy_14_fwd.get());


StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_14);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_5);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_13_fwd);
StructTy_struct_rubinius__VariableScope_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__VariableScope_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__VariableScope_fields.push_back(ArrayTy_12);
StructType* StructTy_struct_rubinius__VariableScope = StructType::get(StructTy_struct_rubinius__VariableScope_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::VariableScope", StructTy_struct_rubinius__VariableScope);

PointerType* PointerTy_13 = PointerType::get(StructTy_struct_rubinius__VariableScope, 0);
cast<OpaqueType>(PointerTy_13_fwd.get())->refineAbstractTypeTo(PointerTy_13);
PointerTy_13 = cast<PointerType>(PointerTy_13_fwd.get());


StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_13);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_14);
StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_24);
std::vector<const Type*>FuncTy_26_args;
FuncTy_26_args.push_back(PointerTy_17);
FuncTy_26_args.push_back(PointerTy_18);
PATypeHolder StructTy_struct_rubinius__BlockEnvironment_fwd = OpaqueType::get();
PointerType* PointerTy_27 = PointerType::get(StructTy_struct_rubinius__BlockEnvironment_fwd, 0);

FuncTy_26_args.push_back(PointerTy_27);
FuncTy_26_args.push_back(PointerTy_22);
std::vector<const Type*>StructTy_struct_rubinius__BlockInvocation_fields;
StructTy_struct_rubinius__BlockInvocation_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_1);
StructTy_struct_rubinius__BlockInvocation_fields.push_back(PointerTy_19);
StructType* StructTy_struct_rubinius__BlockInvocation = StructType::get(StructTy_struct_rubinius__BlockInvocation_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::BlockInvocation", StructTy_struct_rubinius__BlockInvocation);

PointerType* PointerTy_28 = PointerType::get(StructTy_struct_rubinius__BlockInvocation, 0);

FuncTy_26_args.push_back(PointerTy_28);
FunctionType* FuncTy_26 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_26_args,
  /*isVarArg=*/false);

PointerType* PointerTy_25 = PointerType::get(FuncTy_26, 0);

StructTy_struct_rubinius__BlockEnvironment_fields.push_back(PointerTy_25);
StructType* StructTy_struct_rubinius__BlockEnvironment = StructType::get(StructTy_struct_rubinius__BlockEnvironment_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::BlockEnvironment", StructTy_struct_rubinius__BlockEnvironment);
cast<OpaqueType>(StructTy_struct_rubinius__BlockEnvironment_fwd.get())->refineAbstractTypeTo(StructTy_struct_rubinius__BlockEnvironment);
StructTy_struct_rubinius__BlockEnvironment = cast<StructType>(StructTy_struct_rubinius__BlockEnvironment_fwd.get());


mod->addTypeName("struct.rubinius::BlockInvocation", StructTy_struct_rubinius__BlockInvocation);
mod->addTypeName("struct.rubinius::CallFrame", StructTy_struct_rubinius__CallFrame);
mod->addTypeName("struct.rubinius::Class", StructTy_struct_rubinius__Class);
mod->addTypeName("struct.rubinius::CompiledMethod", StructTy_struct_rubinius__CompiledMethod);
mod->addTypeName("struct.rubinius::Dispatch", StructTy_struct_rubinius__Dispatch);
mod->addTypeName("struct.rubinius::Executable", StructTy_struct_rubinius__Executable);
mod->addTypeName("struct.rubinius::Fixnum", OpaqueTy_struct_rubinius__Fixnum);
std::vector<const Type*>StructTy_struct_rubinius__InlineCache_fields;
StructTy_struct_rubinius__InlineCache_fields.push_back(StructTy_struct_rubinius__Dispatch);
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_2);
std::vector<const Type*>FuncTy_30_args;
FuncTy_30_args.push_back(PointerTy_17);
PATypeHolder StructTy_struct_rubinius__InlineCache_fwd = OpaqueType::get();
PointerType* PointerTy_31 = PointerType::get(StructTy_struct_rubinius__InlineCache_fwd, 0);

FuncTy_30_args.push_back(PointerTy_31);
FuncTy_30_args.push_back(PointerTy_18);
FuncTy_30_args.push_back(PointerTy_22);
FunctionType* FuncTy_30 = FunctionType::get(
  /*Result=*/PointerTy_1,
  /*Params=*/FuncTy_30_args,
  /*isVarArg=*/false);

PointerType* PointerTy_29 = PointerType::get(FuncTy_30, 0);

StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_29);
StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_29);
PointerType* PointerTy_32 = PointerType::get(IntegerType::get(32), 0);

StructTy_struct_rubinius__InlineCache_fields.push_back(PointerTy_32);
StructTy_struct_rubinius__InlineCache_fields.push_back(IntegerType::get(32));
std::vector<const Type*>StructTy_struct_rubinius__InlineCacheHit_fields;
StructTy_struct_rubinius__InlineCacheHit_fields.push_back(PointerTy_2);
StructTy_struct_rubinius__InlineCacheHit_fields.push_back(IntegerType::get(32));
StructType* StructTy_struct_rubinius__InlineCacheHit = StructType::get(StructTy_struct_rubinius__InlineCacheHit_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::InlineCacheHit", StructTy_struct_rubinius__InlineCacheHit);

ArrayType* ArrayTy_33 = ArrayType::get(StructTy_struct_rubinius__InlineCacheHit, 3);

StructTy_struct_rubinius__InlineCache_fields.push_back(ArrayTy_33);
StructType* StructTy_struct_rubinius__InlineCache = StructType::get(StructTy_struct_rubinius__InlineCache_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::InlineCache", StructTy_struct_rubinius__InlineCache);
cast<OpaqueType>(StructTy_struct_rubinius__InlineCache_fwd.get())->refineAbstractTypeTo(StructTy_struct_rubinius__InlineCache);
StructTy_struct_rubinius__InlineCache = cast<StructType>(StructTy_struct_rubinius__InlineCache_fwd.get());


mod->addTypeName("struct.rubinius::InlineCacheHit", StructTy_struct_rubinius__InlineCacheHit);
mod->addTypeName("struct.rubinius::InstructionSequence", OpaqueTy_struct_rubinius__InstructionSequence);
mod->addTypeName("struct.rubinius::LookupTable", OpaqueTy_struct_rubinius__LookupTable);
mod->addTypeName("struct.rubinius::Module", StructTy_struct_rubinius__Module);
mod->addTypeName("struct.rubinius::Object", StructTy_struct_rubinius__Object);
mod->addTypeName("struct.rubinius::ObjectHeader", StructTy_struct_rubinius__ObjectHeader);
mod->addTypeName("struct.rubinius::ObjectHeader::$_44", StructTy_struct_rubinius__ObjectHeader____44);
OpaqueType* OpaqueTy_struct_rubinius__Selector = OpaqueType::get();
mod->addTypeName("struct.rubinius::Selector", OpaqueTy_struct_rubinius__Selector);

mod->addTypeName("struct.rubinius::StaticScope", OpaqueTy_struct_rubinius__StaticScope);
mod->addTypeName("struct.rubinius::Symbol", OpaqueTy_struct_rubinius__Symbol);
mod->addTypeName("struct.rubinius::Tuple", StructTy_struct_rubinius__Tuple);
mod->addTypeName("struct.rubinius::TypeInfo", OpaqueTy_struct_rubinius__TypeInfo);
std::vector<const Type*>StructTy_struct_rubinius__UnwindInfo_fields;
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(32));
StructTy_struct_rubinius__UnwindInfo_fields.push_back(IntegerType::get(32));
StructType* StructTy_struct_rubinius__UnwindInfo = StructType::get(StructTy_struct_rubinius__UnwindInfo_fields, /*isPacked=*/false);
mod->addTypeName("struct.rubinius::UnwindInfo", StructTy_struct_rubinius__UnwindInfo);

mod->addTypeName("struct.rubinius::VM", OpaqueTy_struct_rubinius__VM);
mod->addTypeName("struct.rubinius::VMMethod", OpaqueTy_struct_rubinius__VMMethod);
mod->addTypeName("struct.rubinius::VariableScope", StructTy_struct_rubinius__VariableScope);

// Function Declarations

// Global Variable Declarations


// Constant Definitions

// Global Variable Definitions

// Function Definitions

return mod;

}
