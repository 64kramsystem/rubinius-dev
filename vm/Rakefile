require 'rake/clean'

# NOTE: instructions.bc is checked in, not built. This should probably
#       be remedied at some point, but not right now.

############################################################
# Primary Tasks

task :default => :test

desc "Build test/runner and run all VM tests [DEFAULT TASK]"
task :test => "test/runner" do
  sh "./test/runner"
end

desc "Build the VM"
task :build => "vm"

desc "Clean up, including all external libs"
task :distclean => :clean do
  EXTERNALS.each do |lib|
    path = lib.split("/")[0,2].join("/")
    system "cd #{path}; make clean"
  end
end

############################################################
# Files, Flags, & Constants

LLVM_CONFIG = "./external_libs/llvm/Release/bin/llvm-config"
tests       = FileList["test/test_*.hpp"]
srcs        = FileList["*.{cpp,c}"]
hdrs        = FileList["*.{hpp,h}"]
objs        = srcs.map { |f| f.sub(/c(pp)?$/, 'o') }
dep_file    = ".depends.mf"
vm_objs     = %w( drivers/cli.o )
vm_srcs     = %w( drivers/cli.cpp )
EX_INC      = %w( libtommath onig libffi/include
                  libltdl libev llvm/include ).map { |f| "external_libs/#{f}" }
INSN_GEN    = %w( gen/task_instructions_switch.c
                  gen/iseq_instruction_names.cpp
                  gen/iseq_instruction_names.hpp
                  gen/iseq_instruction_dt_helper.cpp
                  gen/task_instruction_dt.cpp
                  test/test_instructions.hpp )
TYPE_GEN    = %w( gen/simple_field.rb
                  gen/typechecks.gen.cpp
                  gen/primitives_declare.hpp
                  gen/primitives_glue.gen.cpp )
EXTERNALS   = %w( external_libs/llvm/Release/lib/libLLVMSystem.a
                  external_libs/libtommath/libtommath.a
                  external_libs/onig/.libs/libonig.a
                  external_libs/libffi/.libs/libffi.a
                  external_libs/libltdl/.libs/libltdl.a
                  external_libs/libev/.libs/libev.a )
INCLUDES    = (EX_INC + ["test/cxxtest", "."]).map { |f| "-I#{f}" }
FLAGS       = %w(-Wall -ggdb -gdwarf-2)

FLAGS << "-O2" if ENV['FAST']

############################################################
# Other Tasks

# TODO evan? "*.gcda *.gcno *.gcov *.dSYM ../*.o coverage"
CLEAN << objs << dep_file << "test/runner" << "gen" << "vm"

rule '.o' do |t|
  obj   = t.name
  src   = t.prerequisites.find { |f| f =~ /#{File.basename obj, '.o'}\.c(pp)?$/}
  cc    = "gcc" # File.basename(src) == "c" ? "gcc" : "g++"

  unless defined? $llvm_c then
    $llvm_c = `#{LLVM_CONFIG} --cflags`.split(/\s+/)
    $llvm_c.delete_if { |e| e.index("-O") == 0 }
  end

  flags = (INCLUDES + FLAGS + $llvm_c).join(' ')

  sh "#{cc} #{flags} -c -o #{obj} #{src} 2>&1"
end

def files targets, dependencies = nil, &block
  targets.each do |target|
    if dependencies then
      file target => dependencies, &block
    else
      file target, &block
    end
  end
end

directory "gen"
file  "type_info.o"    => "gen/typechecks.gen.cpp"
file  "primitives.hpp" => "gen/primitives_declare.hpp"
files Dir["builtin_*.hpp"], INSN_GEN
files objs, EXTERNALS
files vm_objs, vm_srcs

objs.zip(srcs).each do |obj, src|
  file obj => src
end

files EXTERNALS do |t|
  path = File.join(*split_all(t.name)[0..1])
  configure_path = File.join(path, 'configure')
  if File.exist? configure_path then
    sh "cd #{path}; ./configure && make"
  else
    sh "cd #{path}; make"
  end
end

files INSN_GEN, %w(gen instructions.rb) do
  sh "ruby instructions.rb"
end

files TYPE_GEN, %w(gen instructions.rb field_extract.rb) do
  field_extract
end

file :vm => EXTERNALS + objs + vm_objs do |t|
  link t
end

file 'gen/primitives_glue.gen.cpp' => hdrs

file 'test/runner.cpp' => tests do
  sh('test/cxxtest/cxxtestgen.pl', '--error-printer', '--have-eh',
     '--abort-on-fail', '-o', 'test/runner.cpp', *tests)
end

file 'test/runner.o' => 'test/runner.cpp' # no rule .o => .cpp

file "test/runner" => EXTERNALS + objs + %w(test/runner.o) do |t|
  link t
end

############################################################$
# Importers & Methods:

require 'rake/loaders/makefile'

file dep_file => srcs + hdrs + vm_srcs do |t|
  flags = (INCLUDES + FLAGS).join(' ')
  flags << " -D__STDC_LIMIT_MACROS"

  dep = `makedepend -f- -- #{flags} -- #{t.prerequisites} 2>/dev/null`
  dep.gsub!(%r% /usr/include\S+%, '') # speeds up rake a lot
  dep.gsub!(%r%^\S+:[^ ]%, '')

  File.open t.name, 'w' do |f|
    f.puts dep
  end
end

import dep_file

def ex_libs # needs to be method to delay running of llvm_config
  unless defined? $ex_libs then
    $ex_libs = EXTERNALS + [ "-ldl" ]
    $ex_libs << "-lrt" if RUBY_PLATFORM =~ /linux/
    $ex_libs += `#{LLVM_CONFIG} --libs all`.split(/\s+/)
  end
  $ex_libs
end

def field_extract
  order = %w(builtin_object.hpp objects.hpp)
  order += File.read("objects.hpp").scan(/builtin_[^"]+/)
  sh "ruby field_extract.rb #{order.join(' ')}"
end

def link t
  $link_opts ||= `#{LLVM_CONFIG} --ldflags`.split(/\s+/).join(' ')

  ld = ENV['LD'] || 'g++'
  o  = t.prerequisites.find_all { |f| f =~ /o$/ }.join(' ')
  l  = ex_libs.join(' ')

  sh "#{ld} #{$link_opts} -o #{t.name} #{o} #{l}"
end
