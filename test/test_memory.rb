# Code Generated by ZenTest v. 3.2.0
#                 classname: asrt / meth =  ratio%

require 'test/unit' unless defined? $ZENTEST and $ZENTEST
require 'memory'

class TestMemory < Test::Unit::TestCase
  
  def setup
    @addr = Memory.allocate_memory(10)
  end
  
  def test_class_allocate_memory
    addr = Memory.allocate_memory(10)
    assert_kind_of Fixnum, addr
  end

  def test_class_clear_memory
    Memory.store_byte @addr, 47
    Memory.clear_memory @addr, 10
    byte = Memory.fetch_byte @addr
    assert_equal 0, byte
  end
  
  def test_class_clear_memory_faulted
    assert_raises(Memory::Fault) do
      Memory.clear_memory 1, 1
    end
  end

  def test_class_fetch_byte
    Memory.store_byte @addr, 47
    byte = Memory.fetch_byte @addr
    assert_equal 47, byte
  end
  
  def test_class_fetch_byte_faulted
    assert_raises(Memory::Fault) do
      Memory.fetch_byte 0
    end
  end

  def test_class_fetch_long
    Memory.store_long @addr, 0, 47
    long = Memory.fetch_long @addr, 0
    assert_equal 47, long
  end
  
  def test_class_fetch_long_faulted
    assert_raises(Memory::Fault) do
      Memory.fetch_long 0, 0
    end
  end

  def test_class_long_size
    sz = Memory.long_size
    assert_kind_of Fixnum, sz
  end

  def test_class_pointer_size
    sz = Memory.pointer_size
    assert_kind_of Fixnum, sz
  end

  def test_class_release_memory
    assert_nothing_raised do
      Memory.release_memory @addr
    end
  end
  
  def test_class_release_memory_faulted
    assert_raises(Memory::Fault) do
      Memory.release_memory 1
    end
  end

  def test_class_resize_memory
    out = Memory.resize_memory 20, @addr
    assert_kind_of Fixnum, out
    assert out > 0
  end

  def test_class_store_byte
    Memory.store_byte @addr, 47
    out = Memory.fetch_byte @addr
    assert_equal 47, out
  end
  
  def test_class_store_byte_faulted
    assert_raises(Memory::Fault) do
      Memory.store_byte 10, 47
    end
  end

  def test_class_store_long
    Memory.store_long @addr, 0, 47
    out = Memory.fetch_long @addr, 0
    assert_equal 47, out
  end
  
  def test_class_store_long_faulted
    assert_raises(Memory::Fault) do
      Memory.store_long 10, 0, 47
    end
  end

  def test_class_transfer_memory
    a2 = Memory.allocate_memory 10
    Memory.clear_memory a2, 10
    Memory.store_long @addr, 0, 47
    
    Memory.transfer_memory @addr, 10, a2
    out = Memory.fetch_long @addr, 0
    assert_equal 47, out
  end
  
  def test_segfault_protection
    assert_raises(Memory::Fault) do
      Memory.fetch_byte 0
    end
  end
end